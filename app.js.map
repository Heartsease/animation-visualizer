{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/macgyvr/src/baseapplication.js","node_modules/macgyvr/src/baseconfig.js","node_modules/macgyvr/src/basegroup.js","node_modules/macgyvr/src/utils/eventlistener.js","src/app.js","src/components/aviz-nodes-list/aviz-nodes-list.js","src/components/aviz-nodes-list/template.js","src/components/aviz-playback-controls/aviz-playback-controls.js","src/components/aviz-playback-controls/template.js","src/components/aviz-sample-gltfs/aviz-sample-gltfs.js","src/components/aviz-sample-gltfs/template.js","src/components/aviz-scene-info/aviz-scene-info.js","src/components/aviz-scene-info/template.js","src/components/aviz-timeline/aviz-timeline.js","src/components/aviz-timeline/template.js","src/io/gltfexploder.js","src/io/gltffileloader.js","src/objects/gltfobject.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import BaseConfig from './baseconfig.js';\nimport BaseGroup from './basegroup.js';\n\nexport default class BaseApplication {\n    constructor(el, cfg) {\n        this.appConfig = BaseConfig.apply(cfg);\n        this.element = el;\n        this.engine = new BABYLON.Engine(this.element, this.appConfig.engine.antialias, this.appConfig.engine.options);\n        this.engine.enableOfflineSupport = false;\n        this.scene = new BABYLON.Scene(this.engine);\n        this.scene.useRightHandedSystem = this.appConfig.scene.useRightHandedSystem;\n\n        this.isApplication = true;\n        this.engine.runRenderLoop( () => this.tick() );\n\n        this.cameras = [];\n        this.lights = [];\n\n        if (this.appConfig.camera) {\n            this.addCamera(this.appConfig.camera.type, this.appConfig.camera.position);\n        }\n\n        if (this.appConfig.lights) {\n            this.addLights(this.appConfig.lights);\n        }\n\n        if (this.appConfig.inspector) {\n            document.addEventListener('keydown', e => this.onKeyDown(e) );\n        }\n        this.root = new BaseGroup();\n        this.root.parent = this;\n        this.root.initializeGroup(this.scene, 'application-root');\n        this.root.onParented(this.scene, this, this.element);\n        this.onCreate(this.scene);\n\n        window.addEventListener('resize', () => this.onResize());\n\n        this.initialized = true;\n    }\n\n    get canvas() { return this.element; }\n\n    get name() { return 'root'; }\n\n    /**\n     * convenience method to add a typical camera\n     */\n    addCamera(type, options) {\n        if (!type) {\n            type = 'freecamera';\n        }\n\n        if (!options.position) {\n            options.position = new BABYLON.Vector3(0, 0, 0);\n        }\n\n        let camera;\n        switch (type) {\n            case 'default':\n            case 'freecamera':\n                camera = new BABYLON.FreeCamera('camera', options.position, this.scene);\n                camera.setTarget(BABYLON.Vector3.Zero());\n                camera.attachControl(this.element, true);\n                break;\n\n            case 'arcrotate':\n                camera = new BABYLON.ArcRotateCamera(\"ArcRotateCamera\", 0, 0, 0, BABYLON.Vector3.Zero(), this.scene);\n                camera.attachControl(this.element, true);\n                camera.setPosition(options.position);\n                break;\n\n            default:\n                console.error('Camera not added, ', type, ' is not found');\n        }\n        this.cameras.push(camera);\n    }\n\n    /**\n     * convenience method to add a typical light\n     */\n    addLights() {\n        let light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), this.scene);\n        light.intensity = 0.7;\n\n    }\n\n    get config() {\n        return this.appConfig;\n    }\n\n    /**\n     * render engine tick\n     */\n    tick() {\n        if (this.initialized && this.cameras.length > 0) {\n            this.scene.render();\n            this.onRender(this.engine.getDeltaTime());\n        }\n    }\n\n    /**\n     * replace all scenes starting with application and spidering through children, restarting all render loops\n     * @param scene\n     * @param children\n     */\n    replaceAllScenes(scene, children) {\n        if (!children) {\n            this.engine.stopRenderLoop();\n            this.engine.runRenderLoop( () => this.tick() );\n\n            this.scene = scene;\n            this.root.scene = scene;\n            children = this.root.children;\n        }\n        for (let c = 0; c < children.length; c++) {\n            if (children[c].isGroup) {\n                children[c].scene = scene;\n            }\n\n            if (children[c].children && children[c].children.length > 0) {\n                this.replaceAllScenes(scene, children[c].children);\n            }\n        }\n    }\n\n    add(objects) { return this.root.add(objects); }\n    remove(objects) { return this.root.remove(objects); }\n    removeAll(objects) { this.root.removeAll(objects); }\n    find(name) { return this.root.find(name); }\n\n    onKeyDown(e) {\n        if (this.config.inspector) {\n            if (e.keyCode === this.config.inspector || String.fromCharCode(e.keyCode).toLowerCase() === this.config.inspector ) {\n                if (this.scene.debugLayer.isVisible()) {\n                    this.scene.debugLayer.hide();\n                } else {\n                    this.scene.debugLayer.show();\n                }\n            }\n        }\n    }\n\n    onResize() {\n        this.engine.resize();\n    }\n\n    onCreate(sceneEl) {}\n    onRender(time) {}\n}\n","export default {\n    default: {\n        scene: {\n           useRightHandedSystem: false,\n        },\n        engine: {\n            antialias: true,\n            options: {}\n        },\n        camera: {\n            type: 'freecamera',\n            position: {\n                x: 0,\n                y: 0,\n                z: 0\n            }\n        },\n        inspector: 'i'\n    },\n\n    apply(cfg, node) {\n        if (!node) {\n            node = this.default;\n        }\n        for (let c in node) {\n            if (!cfg[c]) {\n                cfg[c] = node[c];\n            } else {\n                if (typeof cfg[c] === 'object') {\n                    cfg[c] = this.apply(cfg[c], node[c]);\n                }\n            }\n        }\n\n        return cfg;\n    }\n}\n","import EventListener from './utils/eventlistener.js';\nexport default class BaseGroup extends EventListener {\n    constructor(params) {\n        super();\n        this._config = params;\n        this._children = [];\n        this.isGroup = true;\n    }\n\n    init() {\n        this.onCreate(this.config);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * get app config\n     * @returns {*}\n     */\n    get appConfig() {\n        return this.application.appConfig;\n    }\n\n    /**\n     * get config\n     * @returns {*}\n     */\n    get config() {\n        return this._config;\n    }\n\n    initializeGroup(scene, name) {\n        if (!name) {\n            name = this.constructor.name + '-group';\n        }\n        this._group = new BABYLON.Mesh(name, scene);\n    }\n\n    onParented(scene, parent, canvas) {\n        this.scene = scene;\n        this._canvas = canvas;\n        this.onCreate(scene);\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     */\n    onRender(scene, time) {};\n    onCreate(params) {};\n\n    /**\n     * add object to parent\n     * @param object\n     */\n    add(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n        for (let c = 0; c < objects.length; c++) {\n            if (objects[c].isGroup) {\n                if (!objects[c].group) {\n                    objects[c].initializeGroup(this.scene);\n                }\n                objects[c].parent = this;\n                objects[c].group.parent = this._group;\n            } else {\n                objects[c].parent = this._group;\n            }\n            this._children.push(objects[c]);\n            if (objects[c].onParented) {\n                objects[c].onParented(this._scene, this._group, this._canvas);\n            }\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    remove(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n\n        this._children = this.children.filter(val => !objects.includes(val));\n        for (let c = 0; c < objects.length; c++) {\n            this.scene.removeMesh(objects[c]);\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    removeAll() {\n        for (let c = 0; c < this._children.length; c++) {\n            this._children[c].dispose();\n        }\n        this._children = [];\n    }\n\n    find(name) {\n        for (let c = 0; c < this._children.length; c++) {\n            if (this._children[c].name === name) {\n                return this._children[c];\n            }\n        }\n        return null;\n    }\n\n    get application() {\n        let parent = this.parent;\n        while (parent) {\n            if (parent.isApplication) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * get engine\n     */\n    get engine() {\n        return this._scene._engine;\n    }\n\n    /**\n     * get babylon scene\n     */\n    get scene() {\n        return this._scene;\n    }\n\n    /**\n     * set scene and rewire render loop for scene\n     * @param val\n     */\n    set scene(val) {\n        if (this.scene) {\n            //console.log(this.engine, this.name);\n        }\n        if (this._scene && this._scene._engine) {\n            this._scene._engine.stopRenderLoop();\n        }\n        this._scene = val;\n        this._scene._engine.runRenderLoop( () => this.tick() );\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._children;\n    }\n\n    /**\n     * render loop\n     */\n    tick() {\n        //console.log('tick', this.name)\n        this.onRender(this.scene._engine.getDeltaTime());\n    }\n}\n","export default class EventListener {\n    constructor() {\n        /**\n         * event listeners\n         * @type {Array}\n         * @private\n         */\n        this._listeners = [];\n    }\n\n    /**\n     * add event listener\n     * @param type\n     * @param cb\n     * @returns {{type: *, callback: *}}\n     */\n    addListener(type, cb) {\n        let listener = { type: type, callback: cb };\n        this._listeners.push(listener);\n        return listener;\n    }\n\n    /**\n     * remove event listener\n     * @param listener\n     */\n    removeListener(listener) {\n        for (let c = 0; c < this._listeners.length; c++) {\n            if (listener === this._listeners[c]) {\n                this._listeners.splice(c, 0);\n                return;\n            }\n        }\n    }\n\n    /**\n     * trigger event\n     * @param type\n     * @param params\n     */\n    triggerEvent(type, params) {\n        this._listeners.forEach( function(l) {\n            if (type == l.type) {\n                l.callback.apply(this, [type, params]);\n            }\n        });\n    }\n}\n","import GLTFFileLoader from './io/gltffileloader.js';\nimport GLTFExploder from './io/gltfexploder.js';\nimport BaseApplication from '../node_modules/macgyvr/src/baseapplication.js';\nimport GLTFObject from './objects/gltfobject.js';\nimport AnimationTimeline from './components/aviz-timeline/aviz-timeline.js';\nimport AnimationPlaybackControls from './components/aviz-playback-controls/aviz-playback-controls.js';\nimport AnimationSampleGLTFs from './components/aviz-sample-gltfs/aviz-sample-gltfs.js';\nimport AnimationSceneInfo from './components/aviz-scene-info/aviz-scene-info.js';\nimport AnimationNodesList from './components/aviz-nodes-list/aviz-nodes-list.js';\n\nexport default class Application extends BaseApplication {\n\n    set time(t) {\n        this._currentTime = t;\n\n        if (this.gltf) {\n            this.gltf.time = t;\n        }\n\n        if (this.config.components.timeline) {\n            this.config.components.timeline.currentTime = t;\n        }\n\n        if (this.config.components.controls) {\n            this.config.components.controls.time = t;\n        }\n    }\n\n    get time() {\n        return this._currentTime;\n    }\n\n    onCreate(scene) {\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_SELECTED, e => this.onTrackSelection(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.SCRUB_TIMELINE, e => this.onScrubTimeline(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_VISIBILITY_CHANGED, e => this.onTrackVisibilityChanged(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.CONTROL_CLICKED, e => this.onPlaybackControlClicked(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.LOAD_GLTF, e => this.loadFile(e));\n        this.config.components.samples.addEventListener(AnimationSampleGLTFs.SELECT_REMOTE_FILE, e => this.loadFile(e));\n        this.config.components.info.addEventListener(AnimationSceneInfo.SWITCH_COORDINATE_SYSTEM, e => this.switchCoordinateSystem(e));\n        this.time = 0;\n        this.playing = false;\n        this.gltf = this.add( new GLTFObject() );\n    }\n\n    loadFile(event) {\n        this.config.components.samples.style.display = 'none';\n\n        let loader = new GLTFFileLoader();\n        loader.addListener(GLTFFileLoader.LOADED, (eventtype, event) => this.onGLTFData(event));\n        if (typeof event === 'string') {\n            let uri = event;\n            this.config.components.info.setAttribute('filename', uri);\n            loader.loadRemote(uri);\n            this.gltf.load(uri);\n        } else if (event.detail.uri) {\n            this.config.components.info.setAttribute('filename', event.detail.uri);\n            loader.loadRemote(event.detail.uri);\n            this.gltf.load(event.detail.uri);\n        } else {\n            this.config.components.info.setAttribute('filename', event.detail.files[0].name);\n            loader.loadLocal(event.detail.files);\n            this.gltf.load(event.detail.inputevent);\n        }\n\n        this.gltf.time = this.time;\n    }\n\n    onGLTFData(event) {\n        let timeline = GLTFExploder.generateTimeline(event.gltf.animations);\n        this.config.components.timeline.data = timeline;\n        this.gltf.duration = timeline.duration;\n        this.config.components.controls.duration = timeline.duration;\n        this.config.components.nodes.data = event.gltf.nodes;\n    }\n\n    switchCoordinateSystem(event) {\n        this.gltf.useRightHandedSystem = event.detail.rightHanded;\n    }\n\n    onScrubTimeline(event) {\n        if (!event.detail.resumeplayback) {\n            this.playing = false;\n        }\n\n        this.time = event.detail.playbacktime;\n    }\n\n    onTrackSelection(event) {\n        this.config.components.nodes.selectNodeByName(event.detail.name);\n    }\n\n    onTrackVisibilityChanged(event) {\n        this.gltf.toggleVisibility(event.detail.visible, event.detail.name, event.detail.playbacktime);\n    }\n\n    onPlaybackControlClicked(event) {\n        this.playing = event.detail.isPlaying;\n\n        switch (event.detail.action) {\n            case AnimationPlaybackControls.STEP_FORWARD:\n                this.time += .01;\n                break;\n\n            case AnimationPlaybackControls.STEP_BACKWARD:\n                this.time -= .01;\n                break;\n\n            case AnimationPlaybackControls.FAST_FORWARD:\n                this.time += .1;\n                break;\n\n            case AnimationPlaybackControls.FAST_BACKWARD:\n                this.time -= .1;\n                break;\n        }\n    }\n\n    onRender(deltatime) {\n        if (this.playing) {\n            this.time += deltatime / 1000;\n        }\n    }\n\n}\n","import Template from './template.js';\n\nexport default class AnimationNodes extends HTMLElement {\n    static get observedAttributes() { return []}\n\n    constructor() {\n        super();\n\n        // two ways to represent the node list (same nodes)\n        this._tree = { name: \"Scene Root\", index: -1, children: [] };\n        this._list = [];\n        this._breadcrumbTrail = [];\n        this.dom = {};\n    }\n\n    connectedCallback() {\n        this.innerHTML = Template.get();\n        this.dom.list = this.querySelector('ul');\n        this.dom.header = this.querySelector('.node-header');\n        this.dom.breadcrumbs = this.querySelector('.breadcrumbs');\n\n        this.addBreadcrumb(this._tree);\n    }\n\n    selectNodeByName(name) {\n        for (let c = 0; c < this._list.length; c++) {\n            if (this._list[c].name == name) {\n                let node = this._list[c];\n                this._breadcrumbTrail = [];\n                while (node.parent) {\n                    this._breadcrumbTrail.push(node);\n                    node = node.parent;\n                }\n\n                this._breadcrumbTrail.reverse();\n                this.renderBreadcrumbs();\n                this.renderNode(this._list[c]);\n            }\n        }\n    }\n\n    renderNode(node) {\n        this.dom.list.innerHTML = '';\n        this.dom.header.innerHTML = node.name;\n        for (let c = 0; c < node.children.length; c++) {\n            let el = document.createElement('li');\n            el.innerHTML = this.nodeTemplate(node.children[c].index, node.children[c].name, node.children[c].transform, node.children[c].children.length);\n\n            let expand = el.querySelector('.expand');\n            if (expand) {\n                expand.addEventListener('click', e => this.onExpandClick(e) );\n            }\n\n            this.dom.list.appendChild(el);\n        }\n    }\n\n    renderBreadcrumbs() {\n        this.dom.breadcrumbs.innerHTML = '';\n        for (let c = 0; c < this._breadcrumbTrail.length-1; c++) {\n            let el = document.createElement('span');\n            el.classList.add('circle');\n            el.dataset.index = this._breadcrumbTrail[c].index;\n            el.addEventListener('click', e => this.onBreadcrumbClicked(e));\n            this.dom.breadcrumbs.appendChild(el);\n        }\n    }\n\n    addBreadcrumb(node) {\n        this._breadcrumbTrail.push(node);\n        this.renderBreadcrumbs();\n    }\n\n    nodeTemplate(index, name, transform, numChildren) {\n        let tPos, tRot, tScale;\n        if (!transform.position) {\n            tPos = ['-', '-', '-'];\n        } else {\n            tPos = [transform.position[0].toFixed(2), transform.position[1].toFixed(2), transform.position[2].toFixed(2) ];\n        }\n\n        if (!transform.rotation) {\n            tRot = ['-', '-', '-', '-'];\n        } else {\n            tRot = [transform.rotation[0].toFixed(2), transform.rotation[1].toFixed(2), transform.rotation[2].toFixed(2), transform.rotation[3].toFixed(2) ];\n        }\n\n        if (!transform.scale) {\n            tScale = ['-', '-', '-'];\n        } else {\n            tScale = [transform.scale[0].toFixed(2), transform.scale[1].toFixed(2), transform.scale[2].toFixed(2) ];\n        }\n\n        let expand = '';\n        if (numChildren === 1) {\n            expand = `<a data-index=\"${index}\"> + (${numChildren} child)</a>`;\n        } else if (numChildren > 1) {\n            expand = `<a data-index=\"${index}\"> + (${numChildren} children)</a>`\n        }\n\n        return `<div><p class=\"name\">${name}</p><p class=\"expand\">${expand}</p></div>\n                <div class=\"transform\">\n                    <div class=\"position\"><div class=\"transform-label\">T</div>\n                        <div class=\"value\">${tPos[0]}</div> \n                        <div class=\"value\">${tPos[1]}</div>\n                        <div class=\"value\">${tPos[2]}</div>\n                    </div>\n                    <div class=\"rotation\"><div class=\"transform-label\">R</div>\n                        <div class=\"value\">${tRot[0]}</div>\n                        <div class=\"value\">${tRot[1]}</div>\n                        <div class=\"value\">${tRot[2]}</div>\n                        <div class=\"value\">${tRot[3]}</div>\n                    </div>\n                    <div class=\"scale\"><div class=\"transform-label\">S</div> \n                        <div class=\"value\">${tScale[0]}</div>\n                        <div class=\"value\">${tScale[1]}</div> \n                        <div class=\"value\">${tScale[2]}</div>\n                    </div>\n                </div>`;\n    }\n\n    set data(nodes) {\n        this.destroy();\n        this._list = [];\n        for (let c = 0; c < nodes.length; c++) {\n\n            let transform = {};\n            if (nodes[c].translation) {\n                transform.translation = nodes[c].translation;\n            }\n            if (nodes[c].rotation) {\n                transform.rotation = nodes[c].rotation;\n            }\n            if (nodes[c].scale) {\n                transform.scale = nodes[c].scale;\n            }\n\n            let node = {\n                name: nodes[c].name,\n                index: c,\n                transform: transform,\n                children: nodes[c].children ? nodes[c].children : [],\n            };\n\n            this._list.push(node);\n        }\n\n        for (let d = 0; d < this._list.length; d++) {\n            if (this._list[d].children.length > 0) {\n                for (let e = 0; e < this._list[d].children.length; e++) {\n                    // replace indices with nodes\n                    this._list[d].children[e] = this._list[this._list[d].children[e]];\n                    this._list[d].children[e].parent = this._list[d];\n                }\n            }\n        }\n\n        for (let f = 0; f < this._list.length; f++) {\n            if (!this._list[f].parent) {\n                this._list[f].parent = this._tree;\n                this._tree.children.push(this._list[f]);\n            }\n        }\n\n        this.renderNode(this._tree);\n    }\n\n\n    destroy() {\n        this._tree = { name: \"Scene Root\", index: -1, children: [] };\n        this.dom.list.innerHTML = '';\n        this.dom.breadcrumbs.innerHTML = '';\n    }\n\n    onBreadcrumbClicked(e) {\n        let nodeIndex = parseInt(e.target.dataset.index);\n        for (let d = 0; d < this._breadcrumbTrail.length; d++) {\n            if (nodeIndex === this._breadcrumbTrail[d].index) {\n                this._breadcrumbTrail = this._breadcrumbTrail.splice(0, d+1);\n                this.renderBreadcrumbs();\n            }\n        }\n\n        if (nodeIndex === -1) {\n            this.renderNode(this._tree);\n            return;\n        }\n\n        for (let c = 0; c < this._list.length; c++) {\n            if (this._list[c].index === nodeIndex) {\n                this.renderNode(this._list[c]);\n                return;\n            }\n        }\n    }\n\n    onExpandClick(e) {\n        let nodeIndex = e.target.dataset.index;\n        for (let c = 0; c < this._list.length; c++) {\n            if (this._list[c].index == nodeIndex) {\n                this.renderNode(this._list[c]);\n                this.addBreadcrumb(this._list[c]);\n            }\n        }\n    }\n\n    disconnectedCallback() {}\n    attributeChangedCallback(attributeName, oldValue, newValue, namespace) {}\n    adoptedCallback(oldDocument, newDocument) {}\n}\n\nif (!customElements.get('aviz-nodes-list')) {\n    customElements.define('aviz-nodes-list', AnimationNodes);\n}\n\n","export default {\n    get() {\n        return `<div class=\"node-header\"></div>\n            <div class=\"breadcrumbs\"></div>\n            <ul class=\"nodes-list\">\n            </ul>`;\n    }\n}\n","import Template from './template.js';\n\nexport default class AnimationPlaybackControls extends HTMLElement {\n    static get observedAttributes() { return []}\n\n    constructor() {\n        super();\n        this._playing = false;\n        this.dom = {};\n        this._duration = 0;\n\n        document.body.addEventListener('drop', e => this.onFileDropped(e), false);\n        document.body.addEventListener(\"dragover\", e => this.onFileHover(e), false);\n        //document.body.addEventListener(\"dragleave\", e => this.onFileHover(e), false);\n    }\n\n    set time(value) {\n        if (this._duration === 0) {\n            return;\n        }\n\n        if (value > this._duration) {\n            value = value % this._duration;\n        }\n        this.dom.timeDisplay.innerText = value.toFixed(3) + ' / ' + this._duration.toFixed(3);\n    }\n\n    set duration(value) {\n        this._duration = value;\n    }\n\n    connectedCallback() {\n        this.innerHTML = Template.get();\n        this.dom.buttons = {};\n        this.dom.buttons.fastForwardBtn = this.querySelector('.fast-forward');\n        this.dom.buttons.fastBackwardBtn = this.querySelector('.fast-backward');\n        this.dom.buttons.stepForwardBtn = this.querySelector('.step-forward');\n        this.dom.buttons.stepBackwardBtn = this.querySelector('.step-backward');\n        this.dom.buttons.playpauseBtn = this.querySelector('.playpause');\n        this.dom.buttonContainer = this.querySelector('.button-container');\n        this.dom.loadGLTFButton = this.querySelector('.load-button');\n        this.dom.timeDisplay = this.querySelector('.time-display');\n        this.dom.fileInput = this.querySelector('.file-input');\n        this.dom.buttonContainer.addEventListener('click', e => this.onButtonClick(e));\n        this.dom.fileInput.addEventListener('change', e => this.onFileInputChange(e));\n        this.togglePlay(false);\n    }\n\n    onFileDropped(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (!event.dataTransfer.files[0]) {\n            return;\n        }\n        let e = new CustomEvent(AnimationPlaybackControls.LOAD_GLTF, { 'detail': { files: event.dataTransfer.files, inputevent: event } });\n        this.dispatchEvent(e);\n    }\n\n    onFileHover(event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    onFileInputChange(event) {\n        if (!event.target.files[0]) {\n            return;\n        }\n        let e = new CustomEvent(AnimationPlaybackControls.LOAD_GLTF, { 'detail': { files: event.target.files, inputevent: event } });\n        this.dispatchEvent(e);\n    }\n\n    onButtonClick(event) {\n        let action = '';\n        switch (event.target) {\n            case this.dom.buttons.fastBackwardBtn:\n                action = AnimationPlaybackControls.FAST_BACKWARD;\n                break;\n\n            case this.dom.buttons.fastForwardBtn:\n                action = AnimationPlaybackControls.FAST_FORWARD;\n                break;\n\n            case this.dom.buttons.stepBackwardBtn:\n                action = AnimationPlaybackControls.STEP_BACKWARD;\n                break;\n\n            case this.dom.buttons.stepForwardBtn:\n                action = AnimationPlaybackControls.STEP_FORWARD;\n                break;\n\n            case this.dom.buttons.playpauseBtn:\n                this._playing = !this._playing;\n                this.togglePlay(this._playing);\n\n                if (this._playing) {\n                    action = AnimationPlaybackControls.PLAY;\n                } else {\n                    action = AnimationPlaybackControls.PAUSE;\n                }\n                break;\n        }\n\n        // lastly, turn off playback if we're stepping through\n        if (event.target !== this.dom.buttons.playpauseBtn) {\n            this.togglePlay(false);\n            this._playing = false;\n        }\n\n        let e = new CustomEvent(AnimationPlaybackControls.CONTROL_CLICKED, {\n            'detail': { action: action, isPlaying: this._playing } });\n        this.dispatchEvent(e);\n    }\n\n    togglePlay(playing) {\n        if (playing) {\n            this.dom.buttons.playpauseBtn.classList.remove('play');\n            this.dom.buttons.playpauseBtn.classList.add('pause');\n        } else {\n            this.dom.buttons.playpauseBtn.classList.remove('pause');\n            this.dom.buttons.playpauseBtn.classList.add('play');\n        }\n    }\n\n    disconnectedCallback() {}\n    attributeChangedCallback(attributeName, oldValue, newValue, namespace) {}\n    adoptedCallback(oldDocument, newDocument) {}\n}\n\nAnimationPlaybackControls.CONTROL_CLICKED = 'onControlClicked';\nAnimationPlaybackControls.LOAD_GLTF = 'onLoadGLTF';\nAnimationPlaybackControls.ANIMATION_SELECTED = 'onAnimationSelected';\nAnimationPlaybackControls.PLAY = 'play';\nAnimationPlaybackControls.PAUSE = 'pause';\nAnimationPlaybackControls.FAST_FORWARD = 'fastforward';\nAnimationPlaybackControls.FAST_BACKWARD = 'fastbackward';\nAnimationPlaybackControls.STEP_FORWARD = 'stepforward';\nAnimationPlaybackControls.STEP_BACKWARD = 'stepbackward';\n\nif (!customElements.get('aviz-playback-controls')) {\n    customElements.define('aviz-playback-controls', AnimationPlaybackControls);\n}\n\n\n","export default {\n    get() {\n        return `<div class=\"button-container\">\n                    <div class=\"fast-backward btn\"></div>\n                    <div class=\"step-backward btn\"></div>\n                    <div class=\"playpause btn\"></div>\n                    <div class=\"step-forward btn\"></div>\n                    <div class=\"fast-forward btn\"></div>\n                </div>\n                <div class=\"time-display\">- / -</div>\n                <div class=\"load-button\">\n                    <div>Load glTF...</div>\n                    <input type=\"file\" class=\"file-input\" id=\"files\" name=\"files[]\" accept=\".gltf, .bin, .png, .jpg, .jpeg, .gif\" multiple />\n                </div>`;\n    }\n}\n","import Template from './template.js';\n\nexport default class AnimationSampleGLTFs extends HTMLElement {\n    static get observedAttributes() { return []}\n\n    constructor() {\n        super();\n        this.dom = {};\n    }\n\n    connectedCallback() {\n        this.innerHTML = Template.get();\n        this.dom.list = this.querySelector('.container');\n        this.dom.list.addEventListener('click', e => this.onFileClicked(e));\n\n        let loader = new XMLHttpRequest();\n        loader.open('GET', this.getAttribute('manifest'), true);\n        loader.onload = e => this.onFileManifestLoaded(e);\n        loader.send();\n    }\n\n    onFileManifestLoaded(loader) {\n        let files = JSON.parse(loader.target.response);\n        for (let c = 0; c < files.length; c++) {\n            let item = document.createElement('p');\n            item.dataset.uri = files[c].uri;\n            item.innerHTML = `<a href=\"#\">${files[c].name}</a>`;\n            this.dom.list.appendChild(item);\n        }\n    }\n\n    onFileClicked(event) {\n        if (!event.target.parentNode.dataset.uri) {\n            return;\n        }\n        let e = new CustomEvent(AnimationSampleGLTFs.SELECT_REMOTE_FILE, { 'detail': { uri: event.target.parentNode.dataset.uri } });\n        this.dispatchEvent(e);\n    }\n\n    disconnectedCallback() {}\n    attributeChangedCallback(attributeName, oldValue, newValue, namespace) {}\n    adoptedCallback(oldDocument, newDocument) {}\n}\n\nAnimationSampleGLTFs.SELECT_REMOTE_FILE = 'onRemoteFileSelected';\n\nif (!customElements.get('aviz-sample-gltfs')) {\n    customElements.define('aviz-sample-gltfs', AnimationSampleGLTFs);\n}\n\n","export default {\n    get() {\n        return `<h3>Sample glTF files</h3>\n                <div class=\"container\"></div>\n                <p>Alternately, drag & drop or load your glTF 2.0 files. Sorry, .glb files are not supported at this time</p>\n                <p>When loading, please drag/drop/multiselect all files simultaneously (gltf, bin, images)</p>`;\n    }\n}\n","import Template from './template.js';\n\nexport default class AnimationSceneInfo extends HTMLElement {\n    static get observedAttributes() { return ['filename'] }\n\n    constructor() {\n        super();\n        this._playing = false;\n        this.dom = {};\n        this.rightHandedCoordinates = false;\n    }\n\n    onSwitchCoordinateSystem(event) {\n        this.rightHandedCoordinates = !this.rightHandedCoordinates;\n        if (this.rightHandedCoordinates) {\n            this.dom.coordinatesystem.innerText = 'use left-handed system on load';\n        } else {\n            this.dom.coordinatesystem.innerText = 'use right-handed system on load';\n        }\n\n        let e = new CustomEvent(AnimationSceneInfo.SWITCH_COORDINATE_SYSTEM, { 'detail': { rightHanded: this.rightHandedCoordinates } });\n        this.dispatchEvent(e);\n    }\n\n    connectedCallback() {\n        this.innerHTML = Template.get();\n        this.dom.filename = this.querySelector('.filename');\n        this.dom.coordinatesystem = this.querySelector('.coordinate-system');\n        this.dom.coordinatesystem.addEventListener('click', e => this.onSwitchCoordinateSystem(e));\n    }\n\n    disconnectedCallback() {}\n    attributeChangedCallback(attributeName, oldValue, newValue, namespace) {\n        switch (attributeName) {\n            case 'filename':\n                this.dom.filename.innerText = newValue;\n                break;\n        }\n    }\n    adoptedCallback(oldDocument, newDocument) {}\n}\n\nAnimationSceneInfo.SWITCH_COORDINATE_SYSTEM = 'onSwitchCoordinateSystem';\n\nif (!customElements.get('aviz-scene-info')) {\n    customElements.define('aviz-scene-info', AnimationSceneInfo);\n}\n\n","export default {\n    get() {\n        return `<span class=\"filename\"></span>\n                <a class=\"coordinate-system\" href=\"#\">use right-handed system on load</a>`;\n    }\n}\n","import Template from './template.js';\n\nexport default class AnimationTimeline extends HTMLElement {\n    static get observedAttributes() { return []}\n\n    set data(timeline) {\n        this.destroy();\n\n        this.timelineWidth = 0;\n        this.createPlaybackLine();\n        this.timeline = timeline;\n        this._populateDeltas(this.timeline);\n        this._drawTimelineLabel();\n        for (let c = 0; c < this.timeline.animations.length; c++) {\n            this._createAnimationHeader(c);\n            for (let track in this.timeline.animations[c].animation.tracks) {\n                this._createTrack(c, track, this.timeline.animations[c].animation.tracks[track]);\n            }\n        }\n  \n        this.dom.playbackLine.style.height = this.dom.container.scrollHeight + 'px';\n        this.currentTime = 0;\n        this._onTimelineScroll();\n    }\n\n    destroy() {\n        this.dom.container.innerHTML = '';\n    }\n\n    createPlaybackLine() {\n        this.dom.playbackLine = document.createElement('div');\n        this.dom.playbackLine.classList.add('playback-line');\n        this.dom.container.appendChild(this.dom.playbackLine);\n    }\n\n    set currentTime(seconds) {\n        if (this.timeline && !this._draggingPlayhead) {\n            this.relativeTime = seconds % this.timeline.duration;\n            this.dom.playbackLine.style.left = this.relativeTime * this.pixelsPerSecond + 'px';\n            this.dom.playbackHead.style.left = this.relativeTime * this.pixelsPerSecond - 7 + 'px';\n        }\n    }\n\n    constructor() {\n        super();\n        this.dom = {};\n\n        this._draggingPlayhead = false;\n        this.selectedTrack;\n        this.ticks = .1; // of a second\n        this.pixelsPerSecond = 200;\n        this.keyframeSize = {\n            width: 5,\n            height: 5\n        };\n        this.deltaRanges = {};\n    }\n\n    connectedCallback() {\n        this.innerHTML = Template.get();\n        this.dom.container = this.querySelector('.timeline-view');\n        this.dom.axislabel = this.querySelector('.timeline-timelabels .tick-container');\n        this.dom.zoomSlider = this.querySelector('.zoom');\n        this.dom.timelineZoomLabel = this.querySelector('.timeline-timelabels canvas');\n        this.dom.playbackLine = this.querySelector('.timeline-view .playback-line');\n        this.dom.playbackHead = this.querySelector('.timeline-timelabels .tick-container .playback-head');\n\n        this.dom.info = {\n            time: this.querySelector('.keyframe-info .time .val'),\n            frame: this.querySelector('.keyframe-info .frame .val'),\n            position: {\n                x: this.querySelector('.keyframe-info .position .x-val'),\n                y: this.querySelector('.keyframe-info .position .y-val'),\n                z: this.querySelector('.keyframe-info .position .z-val'),\n                d: this.querySelector('.keyframe-info .position .d-val')\n            },\n            rotation: {\n                x: this.querySelector('.keyframe-info .rotation .x-val'),\n                y: this.querySelector('.keyframe-info .rotation .y-val'),\n                z: this.querySelector('.keyframe-info .rotation .z-val'),\n                d: this.querySelector('.keyframe-info .rotation .d-val')\n            },\n            scale: {\n                x: this.querySelector('.keyframe-info .scale .x-val'),\n                y: this.querySelector('.keyframe-info .scale .y-val'),\n                z: this.querySelector('.keyframe-info .scale .z-val'),\n                d: this.querySelector('.keyframe-info .scale .d-val')\n            }\n        };\n\n        this.dom.container.addEventListener('scroll', e => this._onTimelineScroll(e));\n        this.dom.zoomSlider.addEventListener('input', e => this._onZoom(e));\n        this.dom.axislabel.addEventListener('mousedown', e => this._onLabelTrackMouseDown(e));\n        this.addEventListener('mouseup', e => this._onLabelTrackMouseUp(e));\n        this.addEventListener('mousemove', e => this._onLabelTrackMouseMove(e));\n    }\n\n    _createAnimationHeader(animationIndex) {\n        let header = document.createElement('DIV');\n        header.classList.add('animation-header');\n        header.innerHTML = '<span>Animation ' + animationIndex + '</span>';\n        this.dom.container.appendChild(header);\n    }\n\n    _createTrack(animationIndex, name, data) {\n        let trackcontainer = document.createElement('DIV');\n        trackcontainer.dataset.name = name;\n        trackcontainer.dataset.animation = animationIndex;\n        trackcontainer.addEventListener('click', e => this._onTrackClick(e));\n        trackcontainer.addEventListener('mousemove', e => this._onTrackHover(e));\n        trackcontainer.className = 'timeline-track';\n        let canvas = document.createElement('CANVAS');\n        let tracklabel = document.createElement('DIV');\n        tracklabel.classList.add('track-label');\n\n        /*let trackVisibilityToggle = document.createElement('div');\n        trackVisibilityToggle.classList.add('icon-eye');\n        trackVisibilityToggle.classList.add('on');\n        trackVisibilityToggle.addEventListener('click', e => this._onTrackVisibilityClick(e));\n        tracklabel.appendChild(trackVisibilityToggle);*/\n\n        let trackName = document.createElement('span');\n        trackName.innerText = name;\n        tracklabel.appendChild(trackName);\n        this.dom['animation-' + animationIndex + '-track-' + name] = canvas;\n        this._drawTrack(animationIndex, name, data);\n        trackcontainer.appendChild(tracklabel);\n        trackcontainer.appendChild(canvas);\n        this.dom.container.appendChild(trackcontainer);\n    }\n\n    _drawTrack(animationIndex, name, data) {\n        let canvas = this.dom['animation-' + animationIndex + '-track-' + name];\n        this.timelineWidth = this.timeline.duration * this.pixelsPerSecond + this.keyframeSize.width;\n        canvas.width = this.timelineWidth;\n        canvas.height = 16;\n        let ctx = canvas.getContext('2d');\n        for (let c = 0; c < data.length; c++) {\n            if (data[c].transform.translation) {\n                let alpha = (data[c].transform.deltas.position - this.deltaRanges[name].position.min) / (this.deltaRanges[name].position.max - this.deltaRanges[name].position.min);\n                ctx.fillStyle = `rgba(0, 255, 0, ${alpha ? alpha : 0})`;\n                ctx.fillRect(data[c].time * this.pixelsPerSecond, 0, this.keyframeSize.width, this.keyframeSize.height);\n                ctx.strokeStyle = 'rgba(0, 255, 0, 1)';\n                ctx.lineWidth = .25;\n                ctx.strokeRect(data[c].time * this.pixelsPerSecond, 0, this.keyframeSize.width, this.keyframeSize.height);\n            }\n            if (data[c].transform.rotation) {\n                let alpha = (data[c].transform.deltas.rotation - this.deltaRanges[name].rotation.min) / (this.deltaRanges[name].rotation.max - this.deltaRanges[name].rotation.min);\n                ctx.fillStyle = `rgba(255, 165, 0, ${alpha ? alpha : 0})`;\n                ctx.fillRect(data[c].time * this.pixelsPerSecond, this.keyframeSize.width+1, this.keyframeSize.width, this.keyframeSize.height);\n                ctx.strokeStyle = 'rgba(255, 165, 0, 1)';\n                ctx.lineWidth = .25;\n                ctx.strokeRect(data[c].time * this.pixelsPerSecond, this.keyframeSize.width+1, this.keyframeSize.width, this.keyframeSize.height);\n            }\n            if (data[c].transform.scale) {\n                let alpha = (data[c].transform.deltas.scaling - this.deltaRanges[name].scaling.min) / (this.deltaRanges[name].scaling.max - this.deltaRanges[name].scaling.min);\n                ctx.fillStyle = `rgba(255, 255, 0, ${alpha ? alpha : 0})`;\n                ctx.fillRect(data[c].time * this.pixelsPerSecond, this.keyframeSize.width*2+1, this.keyframeSize.width, this.keyframeSize.height);\n                ctx.strokeStyle = 'rgba(255, 255, 0, 1)';\n                ctx.lineWidth = .25;\n                ctx.strokeRect(data[c].time * this.pixelsPerSecond, this.keyframeSize.width*2+1, this.keyframeSize.width, this.keyframeSize.height);\n            }\n        }\n    }\n\n    _drawTimelineLabel() {\n        let canvas = this.dom.timelineZoomLabel;\n        canvas.width = this.timeline.duration * this.pixelsPerSecond + this.keyframeSize.width;\n        canvas.height = 15;\n        let ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n\n        for (let c = this.ticks; c < this.timeline.duration; c += this.ticks) {\n            let tHeight = 8;\n            let tWidth = 1;\n            if (Math.abs(Number(Math.round(c +'e2')+'e-2') === Math.round(c))) { // just trying to test if an integer, stupid precision loss\n                tHeight = 15;\n                tWidth = 3;\n            }\n            ctx.fillRect(c * this.pixelsPerSecond, 0, tWidth, tHeight);\n        }\n    }\n\n    _populateDeltas(timeline) {\n        for (let d = 0; d < timeline.animations.length; d++) {\n            for (let track in timeline.animations[d].animation.tracks) {\n                if (!this.deltaRanges[track]) {\n                    this.deltaRanges[track] = {};\n                }\n\n                for (let c = 1; c < timeline.animations[d].animation.tracks[track].length; c++) {\n                    let t1 = timeline.animations[d].animation.tracks[track][c].transform;\n                    let t0 = timeline.animations[d].animation.tracks[track][c-1].transform;\n\n                    let dPos = 0;\n                    if (t1.translation && t0.translation) {\n                        dPos = Math.sqrt(Math.pow(t1.translation.x - t0.translation.x, 2) + Math.pow(t1.translation.y - t0.translation.y, 2) + Math.pow(t1.translation.z - t0.translation.z, 2));\n                    }\n\n                    let dRot = 0;\n                    if (t1.rotation && t0.rotation) {\n                        dRot = Math.sqrt(Math.pow(t1.rotation.x - t0.rotation.x, 2) + Math.pow(t1.rotation.y - t0.rotation.y, 2) + Math.pow(t1.rotation.z - t0.rotation.z, 2));\n                    }\n\n                    let dScale = 0;\n                    if (t1.scale && t0.scale) {\n                        dScale = Math.sqrt(Math.pow(t1.scale.x - t0.scale.x, 2) + Math.pow(t1.scale.y - t0.scale.y, 2) + Math.pow(t1.scale.z - t0.scale.z, 2));\n                    }\n\n                    timeline.animations[d].animation.tracks[track][c].transform.deltas = { position: dPos, rotation: dRot, scaling: dScale };\n\n                    if (!this.deltaRanges[track].rotation) {\n                        this.deltaRanges[track].rotation = {};\n                        this.deltaRanges[track].rotation.min = 0;\n                        this.deltaRanges[track].rotation.max = dRot;\n                    } else {\n                        if (this.deltaRanges[track].rotation.min > dRot) { this.deltaRanges[track].rotation.min = dRot; }\n                        if (this.deltaRanges[track].rotation.max < dRot) { this.deltaRanges[track].rotation.max = dRot; }\n                    }\n\n                    if (!this.deltaRanges[track].position) {\n                        this.deltaRanges[track].position = {};\n                        this.deltaRanges[track].position.min = 0;\n                        this.deltaRanges[track].position.max = dPos;\n                    } else {\n                        if (this.deltaRanges[track].position.min > dPos) { this.deltaRanges[track].position.min = dPos; }\n                        if (this.deltaRanges[track].position.max < dPos) { this.deltaRanges[track].position.max = dPos; }\n                    }\n\n                    if (!this.deltaRanges[track].scaling) {\n                        this.deltaRanges[track].scaling = {};\n                        this.deltaRanges[track].scaling.min = 0;\n                        this.deltaRanges[track].scaling.max = dScale;\n                    } else {\n                        if (this.deltaRanges[track].scaling.min > dScale) { this.deltaRanges[track].scaling.min = dScale; }\n                        if (this.deltaRanges[track].scaling.max < dScale) { this.deltaRanges[track].scaling.max = dScale; }\n                    }\n                }\n                // first track has no delta, so give it maximum delta\n                timeline.animations[d].animation.tracks[track][0].transform.deltas = {\n                    position: this.deltaRanges[track].position.max,\n                    rotation: this.deltaRanges[track].rotation.max,\n                    scaling: this.deltaRanges[track].scaling.max\n                };\n            }\n        }\n    }\n\n    _onTimelineScroll(event) {\n        this.dom.axislabel.scrollLeft = this.dom.container.scrollLeft;\n\n        let labels = this.querySelectorAll('.track-label');\n        for (let c = 0; c < labels.length; c++) {\n            labels[c].style.paddingLeft = this.dom.container.scrollLeft + this.keyframeSize.width + 15 + 'px';\n        }\n\n        let animheaders = this.querySelectorAll('.animation-header span');\n        for (let c = 0; c < animheaders.length; c++) {\n            animheaders[c].style.paddingLeft = this.dom.container.scrollLeft + 5 + 'px';\n            animheaders[c].parentNode.style.width = this.timeline.duration * this.pixelsPerSecond + this.keyframeSize.width - 15 + 'px';\n        }\n\n        let tracks = this.querySelectorAll('.timeline-track');\n        for (let c = 0; c < tracks.length; c++) {\n            tracks[c].style.width = this.timeline.duration * this.pixelsPerSecond + this.keyframeSize.width + 5 + 'px';\n        }\n    }\n\n    _onZoom(event) {\n        this.pixelsPerSecond = event.target.value;\n        this._drawTimelineLabel();\n\n        for (let c = 0; c < this.timeline.animations.length; c++) {\n            for (let track in this.timeline.animations[c].animation.tracks) {\n                this._drawTrack(c, track, this.timeline.animations[c].animation.tracks[track]);\n            }\n        }\n        this._onTimelineScroll(); // need track resizing\n    }\n\n    _onTrackClick(event) {\n        if (this.selectedTrack) {\n            this.selectedTrack.classList.remove('selected');\n        }\n\n        if (this.selectedTrack === event.currentTarget) {\n            this.selectedTrack = null;\n            return;\n        }\n        this.selectedTrack = event.currentTarget;\n        this.selectedTrack.classList.add('selected');\n\n        let e = new CustomEvent(AnimationTimeline.TRACK_SELECTED, { 'detail': { name: event.currentTarget.dataset.name } });\n        this.dispatchEvent(e);\n    }\n\n    _onTrackVisibilityClick(event) {\n        event.stopPropagation();\n        let visible;\n        if (event.target.classList.contains('on')) {\n            event.target.classList.remove('on');\n            event.target.classList.add('off');\n            visible = false;\n        } else {\n            event.target.classList.remove('off');\n            event.target.classList.add('on');\n            visible = true;\n        }\n\n        let e = new CustomEvent(AnimationTimeline.TRACK_PLAYBACK_CHANGED, {\n            'detail': {\n                name: event.target.parentNode.parentNode.dataset.name,\n                visible: visible,\n                playbacktime: this.relativeTime / this.timeline.duration\n            }});\n        this.dispatchEvent(e);\n    }\n\n    _onTrackHover(event) {\n        let time = (event.offsetX - this.keyframeSize.width) / this.pixelsPerSecond;\n        let track = this.timeline.animations[parseInt(event.currentTarget.dataset.animation)].animation.tracks[event.currentTarget.dataset.name];\n        let timeIndex;\n        for (let c = 0; c < track.length; c++) {\n            if (track[c].time >= time) {\n                this.dom.info.time.innerText = track[c].time.toFixed(3);\n                this.dom.info.frame.innerText = (c+1) + ' / ' + track.length;\n\n                if (track[c].transform.translation) {\n                    this.dom.info.position.x.innerText = track[c].transform.translation.x.toFixed(3);\n                    this.dom.info.position.y.innerText = track[c].transform.translation.y.toFixed(3);\n                    this.dom.info.position.z.innerText = track[c].transform.translation.z.toFixed(3);\n                    this.dom.info.position.d.innerText = track[c].transform.deltas.position.toFixed(3);\n                } else {\n                    this._clearInfoValues('position');\n                }\n\n                if (track[c].transform.rotation) {\n                    this.dom.info.rotation.x.innerText = track[c].transform.rotation.x.toFixed(3);\n                    this.dom.info.rotation.y.innerText = track[c].transform.rotation.y.toFixed(3);\n                    this.dom.info.rotation.z.innerText = track[c].transform.rotation.z.toFixed(3);\n                    this.dom.info.rotation.d.innerText = track[c].transform.deltas.rotation.toFixed(3);\n                } else {\n                    this._clearInfoValues('rotation');\n                }\n\n                if (track[c].transform.scale) {\n                    this.dom.info.scale.x.innerText = track[c].transform.scale.x.toFixed(3);\n                    this.dom.info.scale.y.innerText = track[c].transform.scale.y.toFixed(3);\n                    this.dom.info.scale.z.innerText = track[c].transform.scale.z.toFixed(3);\n                    this.dom.info.scale.d.innerText = track[c].transform.deltas.scaling.toFixed(3);\n                } else {\n                    this._clearInfoValues('scale');\n                }\n                return;\n            }\n        }\n    }\n\n    _onLabelTrackMouseDown(event) {\n       this._draggingPlayhead = true;\n    }\n\n    _onLabelTrackMouseUp(event) {\n        if (this._draggingPlayhead) {\n            this._draggingPlayhead = false;\n            let bounds = event.currentTarget.getBoundingClientRect();\n            this._scrubTimeline(event.clientX - bounds.left, true);\n        }\n    }\n\n    _onLabelTrackMouseMove(event) {\n        if (this._draggingPlayhead) {\n            let bounds = event.currentTarget.getBoundingClientRect();\n            this._scrubTimeline(event.clientX - bounds.left, false);\n        }\n    }\n\n    _scrubTimeline(posX, endscrub) {\n        let bounds = event.currentTarget.getBoundingClientRect();\n        if (posX > this.timelineWidth) {\n            posX = this.timelineWidth;\n        }\n        this.dom.playbackLine.style.left = posX + 'px';\n        this.dom.playbackHead.style.left = posX - 7 + 'px';\n\n        let time = (posX-1) / this.pixelsPerSecond;\n        if (time < 0) {\n            time = 0;\n        }\n        if (time > this.timeline.duration) {\n            time = this.timeline.duration;\n        }\n\n        let e = new CustomEvent(AnimationTimeline.SCRUB_TIMELINE, {\n            'detail': {\n                resumeplayback: endscrub,\n                playbacktime: time,\n                playbackratio: time / this.timeline.duration\n            }});\n        this.dispatchEvent(e);\n    }\n\n    _clearInfoValues(transformTypes) {\n        if (typeof transformTypes === 'string') {\n            transformTypes = [transformTypes];\n        }\n\n        for (let c = 0; c < transformTypes.length; c++) {\n            this.dom.info[transformTypes].x.innerText = '-';\n            this.dom.info[transformTypes].y.innerText = '-';\n            this.dom.info[transformTypes].z.innerText = '-';\n            this.dom.info[transformTypes].d.innerText = '-';\n        }\n    }\n\n    disconnectedCallback() {}\n    attributeChangedCallback(attributeName, oldValue, newValue, namespace) {}\n    adoptedCallback(oldDocument, newDocument) {}\n}\nAnimationTimeline.TRACK_SELECTED = 'onTrackSelected';\nAnimationTimeline.SCRUB_TIMELINE = 'onScrubTimeline';\nAnimationTimeline.TRACK_PLAYBACK_CHANGED = 'onTrackPlaybackChanged';\n\nif (!customElements.get('aviz-timeline')) {\n    customElements.define('aviz-timeline', AnimationTimeline);\n}\n\n","export default {\n    get() {\n        return `<div class=\"timeline\">\n                            <div class=\"timeline-view\">\n                            </div> \n                            <div class=\"timeline-timelabels\">\n                                <div class=\"tick-container\">\n                                    <canvas></canvas>\n                                    <div class=\"playback-head\"></div>\n                                </div>\n                                <input class=\"zoom\" min=\"20\" max=\"1000\" value=\"200\" type=\"range\"></div>\n                            </div>\n                        </div>\n                        <div class=\"keyframe-info\">\n                            <div class=\"item\">\n                                <h4 class=\"time\">Time: <span class=\"val\">-</span></h4>\n                                <h4 class=\"frame\">Frame: <span class=\"val\">-/-</span></h4>\n                            </div>\n                            <div class=\"item position\">\n                                <h4>Position</h4>\n                                <div class=\"axis\"><span class=\"label\">x</span><span class=\"x-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">y</span><span class=\"y-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">z</span><span class=\"z-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">\\u25B2</span><span class=\"d-val\">-</span></div>\n                            </div>\n                            <div class=\"item rotation\">\n                                <h4>Rotation</h4>\n                                <div class=\"axis\"><span class=\"label\">x</span><span class=\"x-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">y</span><span class=\"y-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">z</span><span class=\"z-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">\\u25B2</span><span class=\"d-val\">-</span></div>\n                            </div>\n                            <div class=\"item scale\">\n                                <h4>Scale</h4>\n                                <div class=\"axis\"><span class=\"label\">x</span><span class=\"x-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">y</span><span class=\"y-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">z</span><span class=\"z-val\">-</span></div>\n                                <div class=\"axis\"><span class=\"label\">\\u25B2</span><span class=\"d-val\">-</span></div>\n                            </div>\n                        </div>`;\n    }\n}\n","// lots of approach in binary processing here stolen from Babylon\n// https://github.com/BabylonJS/Babylon.js/tree/master/loaders/src/glTF/2.0\n\n// Only supports mashing the animation buffer pieces into the GLTF object for now\nexport default {\n    explode(gltf) {\n        for (let f = 0; f < gltf.nodes.length; f++) {\n            if (!gltf.nodes[f].name) {\n                gltf.nodes[f].name = 'Node ' + Number(f+1) + ' (unnamed)';\n            }\n        }\n        for (let c = 0; c < gltf.animations.length; c++) {\n            // wire sampler references within channels for easy access\n            for (let d = 0; d < gltf.animations[c].channels.length; d++) {\n                gltf.animations[c].channels[d]._samplerRef = gltf.animations[c].samplers[gltf.animations[c].channels[d].sampler];\n                gltf.animations[c].channels[d]._samplerRef._channelRef = gltf.animations[c].channels[d];\n                gltf.animations[c].channels[d].target._nodeRef = gltf.nodes[gltf.animations[c].channels[d].target.node];\n            }\n\n            // get accessor references for samplers and resolve data from buffer\n            for (let e = 0; e < gltf.animations[c].samplers.length; e++) {\n               gltf.animations[c].samplers[e]._inputRef = gltf.accessors[gltf.animations[c].samplers[e].input];\n\n               // for animation, input refers to keyframe times\n               gltf.animations[c].samplers[e]._inputValues = this._resolveAnimationSamplerData('keyframes', gltf, gltf.animations[c].samplers[e]._inputRef);\n\n\n               // output refers to scale, rotate, or translate\n               gltf.animations[c].samplers[e]._outputRef = gltf.accessors[gltf.animations[c].samplers[e].output];\n               gltf.animations[c].samplers[e]._outputRef._bufferViewRef = gltf.bufferViews[gltf.animations[c].samplers[e]._outputRef.bufferView];\n\n               let transformType = gltf.animations[c].samplers[e]._channelRef.target.path;\n               gltf.animations[c].samplers[e]._outputValues = this._resolveAnimationSamplerData(transformType, gltf, gltf.animations[c].samplers[e]._outputRef);\n            }\n        }\n        return gltf;\n    },\n\n    _resolveAnimationSamplerData(type, gltf, samplerData) {\n        let bufferView = gltf.bufferViews[samplerData.bufferView];\n        let buffer = gltf.buffers[bufferView.buffer].data;\n\n        // map bufferView to actual mem ref\n        samplerData._bufferViewRef = bufferView;\n\n        let byteOffset = bufferView.byteOffset;\n        if (samplerData.byteOffset) {\n            byteOffset += samplerData.byteOffset;\n        }\n        let byteLength = samplerData.count * this._getByteStrideFromType(samplerData);\n        let values = this._parseBufferData(buffer, byteOffset, byteLength, samplerData.componentType);\n\n        if (type === 'keyframes') {\n            return values;\n        } else {\n            let counter = 0;\n            let transforms = [];\n            let vec;\n\n            for (let c = 0; c < values.length; c++) {\n                switch (counter) {\n                    case 0:\n                        transforms.push({});\n                        vec = transforms[transforms.length-1];\n                        vec.x = values[c];\n                        counter ++;\n                        break;\n\n                    case 1:\n                        vec.y = values[c];\n                        counter ++;\n                        break;\n\n                    case 2:\n                        vec.z = values[c];\n\n                        counter ++;\n                        if (type !== 'rotation') {\n                            counter = 0;\n                        }\n                        break;\n\n                    case 3:\n                        vec.w = values[c];\n                        counter = 0;\n                        break;\n                }\n            }\n            return transforms;\n        }\n    },\n\n    _getByteStrideFromType(accessor) {\n        switch (accessor.type) {\n            case \"SCALAR\":\n                return 1;\n            case \"VEC2\":\n                return 2;\n            case \"VEC3\":\n                return 3;\n            case \"VEC4\":\n                return 4;\n            case \"MAT2\":\n                return 4;\n            case \"MAT3\":\n                return 9;\n            case \"MAT4\":\n                return 16;\n            default:\n                console.warn(\"Invalid accessor type (\" + accessor.type + \")\");\n                return 0;\n        }\n    },\n\n    _parseBufferData(buffer, byteOffset, byteLength, componentType) {\n        let bufferViewData;\n        switch (componentType) {\n            case this.EComponentType.BYTE:\n                bufferViewData = new Int8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_BYTE:\n                bufferViewData = new Uint8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.SHORT:\n                bufferViewData = new Int16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_SHORT:\n                bufferViewData = new Uint16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_INT:\n                bufferViewData = new Uint32Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.FLOAT:\n                bufferViewData = new Float32Array(buffer, byteOffset, byteLength);\n                break;\n            default:\n                console.warn(\"Invalid component type (\" + componentType + \")\");\n                return;\n        }\n        return bufferViewData;\n    },\n\n    generateTimeline(gltfAnims) {\n        let start;\n        let end;\n        let timeline = { animations: [] };\n        for (let c = 0; c < gltfAnims.length; c++) {\n            let tracks = this._generateTracksForAnimation(gltfAnims[c]);\n            if (!start || start > tracks.start) {\n                start = tracks.start;\n            }\n            if (!end || end < tracks.end) {\n                end = tracks.end;\n            }\n            timeline.animations.push({ animation: tracks });\n        }\n\n        timeline.start = start;\n        timeline.end = end;\n        timeline.duration = end - start;\n        return timeline;\n    },\n\n    _generateTracksForAnimation(animation) {\n        let tracks = {};\n        let startTime = -1;\n        let endTime = -1;\n        for (let c = 0; c < animation.channels.length; c++) {\n            if (!tracks[animation.channels[c].target._nodeRef.name]) {\n                tracks[animation.channels[c].target._nodeRef.name] = [];\n            }\n\n            let currentChannel = tracks[animation.channels[c].target._nodeRef.name];\n\n            for (let d = 0; d < animation.channels[c]._samplerRef._inputValues.length; d++) {\n                let time = animation.channels[c]._samplerRef._inputValues[d];\n                if (startTime === -1 || time < startTime) {\n                    startTime = time;\n                }\n                if (endTime === -1 || time > endTime) {\n                    endTime = time;\n                }\n\n                let keyframe;\n                for (let e = 0; e < currentChannel.length; e++) {\n                    if (currentChannel[e].time === time) {\n                        keyframe = currentChannel[e];\n                    }\n                }\n                if (!keyframe) {\n                    keyframe = { time: time, transform: {}, name: animation.channels[c].target._nodeRef.name };\n                    currentChannel.push(keyframe);\n                }\n\n                let transformType = animation.channels[c].target.path;\n                keyframe.transform[transformType] = animation.channels[c]._samplerRef._outputValues[d];\n            }\n        }\n\n        return { start: startTime, end: endTime, duration: endTime-startTime, tracks: tracks };\n    },\n\n    EComponentType: {\n        BYTE: 5120,\n        UNSIGNED_BYTE: 5121,\n        SHORT: 5122,\n        UNSIGNED_SHORT: 5123,\n        UNSIGNED_INT: 5125,\n        FLOAT: 5126\n    }\n}\n","import GLTFExploder from './gltfexploder.js';\nimport EventListener from '../../node_modules/macgyvr/src/utils/eventlistener.js';\n\nexport default class GLTFFileLoader extends EventListener {\n    constructor() {\n        super();\n        this.bufferDictionary = {};\n        this.bufferCount = 0;\n    }\n\n    loadLocal(filerefs) {\n        for (let c = 0; c < filerefs.length; c++) {\n            let filename = filerefs[c].name;\n            if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'bin') {\n                let reader = new FileReader();\n                this.bufferCount ++;\n                reader.onload = e => {\n                    this.onBinLoaded(filename, e);\n                };\n                reader.readAsArrayBuffer(filerefs[c]);\n            } else if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'gltf') {\n                let reader = new FileReader();\n                reader.onload = e => {\n                    this.onGLTFLoaded(filename, e)\n                };\n                reader.readAsText(filerefs[c]);\n            }\n        }\n    }\n\n    loadRemote(path) {\n        this._filename = path.split('/')[path.split('/').length-1];\n        this._basepath = path.substr(0, path.indexOf(this._filename));\n        let loader = new XMLHttpRequest();\n        loader.open('GET', path, true);\n        loader.onload = data => {\n            this.gltf = JSON.parse(loader.response);\n            this.buffers = this.gltf.buffers;\n            for (let c = 0; c < this.buffers.length; c++) {\n                this.bufferCount ++;\n                let loader = new XMLHttpRequest();\n                loader.responseType = 'arraybuffer';\n                loader.open('GET', this._basepath + this.buffers[c].uri, true);\n                loader.onload = e => {\n                    this.onBinLoaded(this.buffers[c].uri, e);\n                };\n                loader.send();\n            }\n        };\n        loader.send();\n    }\n\n    onGLTFLoaded(filename, e) {\n        this.gltf = JSON.parse(e.target.result);\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onBinLoaded(filename, e) {\n        if (e.target.result) {\n            this.bufferDictionary[filename] = e.target.result;\n        } else if (e.target.response) {\n            this.bufferDictionary[filename] = e.target.response;\n        } else {\n            throw new Error(filename + ' cannot be loaded', e.target);\n        }\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onLoadComplete() {\n        for (let c = 0; c < this.gltf.buffers.length; c++) {\n            this.gltf.buffers[c].data = this.bufferDictionary[this.gltf.buffers[c].uri];\n        }\n\n        this.gltf = GLTFExploder.explode(this.gltf);\n        this.triggerEvent(GLTFFileLoader.LOADED, { gltf: this.gltf });\n    }\n\n    checkLoadedFiles() {\n        if (this.gltf && this.bufferCount === Object.keys(this.bufferDictionary).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nGLTFFileLoader.LOADED = 'onGLTFLoaded';\n","import BaseGroup from '../../node_modules/macgyvr/src/basegroup.js';\n\nexport default class GLTFObject extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param sceneinfo\n     */\n    onCreate(scene, sceneinfo) {\n        this._duration = 0;\n        this._currentTime = 0;\n        BABYLON.SceneLoader.ShowLoadingScreen = false;\n        this._useRightHandedCoordinates = false;\n        this.filesInput = new BABYLON.FilesInput(this.engine, this.scene, this.canvas, (scenefile, scene) => this.onSceneLoaded(scenefile, scene));\n    }\n\n    set useRightHandedSystem(val) {\n        this._useRightHandedCoordinates = val;\n        this.scene.useRightHandedSystem = val;\n    }\n\n    load(value) {\n        if (typeof value === 'string') {\n            let uri = value;\n            let filename = uri.split('/')[uri.split('/').length-1];\n            let basepath = uri.substr(0, uri.indexOf(filename));\n            let loader = new BABYLON.AssetsManager(this.scene);\n            loader.useDefaultLoadingScreen = false;\n            let task = loader.addMeshTask('task', '', basepath, filename);\n            task.onSuccess = asset => this.onMeshesLoaded(asset);\n            loader.load();\n        } else {\n            let event = value;\n            this.filesInput.loadFiles(event);\n        }\n    }\n\n    onMeshesLoaded(asset) {\n        this.add(asset.loadedMeshes);\n        if (this._useRightHandedCoordinates) {\n            this.group.rotation.x = Math.PI/2;\n        } else {\n            this.group.rotation.x = -Math.PI/2;\n        }\n        this.prepareScene(this.scene);\n    }\n\n    onSceneLoaded(scenefile, scene) {\n        this.application.replaceAllScenes(scene);\n        this.prepareScene(scene);\n    }\n\n    prepareScene(scene) {\n        // remove camera from scene to add our own\n        if (scene.activeCamera) {\n            scene.activeCamera.dispose();\n            scene.activeCamera = null;\n        }\n\n        scene.createDefaultCameraOrLight(true);\n        scene.activeCamera.attachControl(this.canvas);\n\n        if (scene.lights.length === 0) {\n            this.application.addLights();\n        }\n\n        // pause all to start - if synchronous, the scene doesn't seem to show up\n        setTimeout( function() {\n            for (let c = 0; c < scene.Animatables.length; c++) {\n                scene.Animatables[c].goToFrame(0);\n                scene.Animatables[c].pause();\n            }\n        }, 50);\n\n        let worldExtends = scene.getWorldExtends();\n        let sceneMidPoint;\n        if (this._useRightHandedCoordinates) {\n            sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, (worldExtends.max.y + worldExtends.min.y)/2, (worldExtends.max.z + worldExtends.min.z)/2);\n        } else {\n            let sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, (worldExtends.max.y + worldExtends.min.y)/2, (worldExtends.max.z + worldExtends.min.z)/2);\n        }\n        scene.activeCamera.setTarget( sceneMidPoint );\n    }\n\n    set duration(dur) {\n        this._duration = dur;\n    }\n\n    get duration() {\n        return this._duration;\n    }\n\n    set time(t) {\n        t = t % this.duration;\n        this._currentTime = t;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            this.scene.Animatables[c].goToFrame(t);\n        }\n    }\n\n    toggleVisibility(visible, name) {\n        let milliseconds = this.scene._animationTime;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            //let frameRate = this.scene.Animatables[c]._animations[0].framePerSecond;\n            if (this.scene.Animatables[c].target.name === name) {\n                if (visible) {\n                    this.scene.Animatables[c].restart();\n                    this.scene.Animatables[c].goToFrame(10)\n                } else {\n                    this.scene.Animatables[c].pause();\n                }\n            }\n        }\n    }\n\n    onRender(deltatime) {}\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvbWFjZ3l2ci9zcmMvYmFzZWFwcGxpY2F0aW9uLmpzIiwibm9kZV9tb2R1bGVzL21hY2d5dnIvc3JjL2Jhc2Vjb25maWcuanMiLCJub2RlX21vZHVsZXMvbWFjZ3l2ci9zcmMvYmFzZWdyb3VwLmpzIiwibm9kZV9tb2R1bGVzL21hY2d5dnIvc3JjL3V0aWxzL2V2ZW50bGlzdGVuZXIuanMiLCJzcmMvYXBwLmpzIiwic3JjL2NvbXBvbmVudHMvYXZpei1ub2Rlcy1saXN0L2F2aXotbm9kZXMtbGlzdC5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotbm9kZXMtbGlzdC90ZW1wbGF0ZS5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotcGxheWJhY2stY29udHJvbHMvYXZpei1wbGF5YmFjay1jb250cm9scy5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotcGxheWJhY2stY29udHJvbHMvdGVtcGxhdGUuanMiLCJzcmMvY29tcG9uZW50cy9hdml6LXNhbXBsZS1nbHRmcy9hdml6LXNhbXBsZS1nbHRmcy5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotc2FtcGxlLWdsdGZzL3RlbXBsYXRlLmpzIiwic3JjL2NvbXBvbmVudHMvYXZpei1zY2VuZS1pbmZvL2F2aXotc2NlbmUtaW5mby5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotc2NlbmUtaW5mby90ZW1wbGF0ZS5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotdGltZWxpbmUvYXZpei10aW1lbGluZS5qcyIsInNyYy9jb21wb25lbnRzL2F2aXotdGltZWxpbmUvdGVtcGxhdGUuanMiLCJzcmMvaW8vZ2x0ZmV4cGxvZGVyLmpzIiwic3JjL2lvL2dsdGZmaWxlbG9hZGVyLmpzIiwic3JjL29iamVjdHMvZ2x0Zm9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FDQUE7Ozs7QUFDQTs7Ozs7Ozs7SUFF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LFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsWUFBbkIsQUFBK0IsRUFBL0IsQUFBaUMsUUFBdEUsQUFBcUMsQUFBeUMsQUFDOUU7NkJBQUEsQUFBSyxJQUFMLEFBQVMsS0FBVCxBQUFjLFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsWUFBbkIsQUFBK0IsRUFBL0IsQUFBaUMsUUFBdEUsQUFBcUMsQUFBeUMsQUFDOUU7NkJBQUEsQUFBSyxJQUFMLEFBQVMsS0FBVCxBQUFjLFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsT0FBbkIsQUFBMEIsU0FBMUIsQUFBbUMsUUFBeEUsQUFBcUMsQUFBMkMsQUFDbkY7QUFMRCwyQkFLTyxBQUNIOzZCQUFBLEFBQUssaUJBQUwsQUFBc0IsQUFDekI7QUFFRDs7d0JBQUksTUFBQSxBQUFNLEdBQU4sQUFBUyxVQUFiLEFBQXVCLFVBQVUsQUFDN0I7NkJBQUEsQUFBSyxJQUFMLEFBQVMsS0FBVCxBQUFjLFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsU0FBbkIsQUFBNEIsRUFBNUIsQUFBOEIsUUFBbkUsQUFBcUMsQUFBc0MsQUFDM0U7NkJBQUEsQUFBSyxJQUFMLEFBQVMsS0FBVCxBQUFjLFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsU0FBbkIsQUFBNEIsRUFBNUIsQUFBOEIsUUFBbkUsQUFBcUMsQUFBc0MsQUFDM0U7NkJBQUEsQUFBSyxJQUFMLEFBQVMsS0FBVCxBQUFjLFNBQWQsQUFBdUIsRUFBdkIsQUFBeUIsWUFBWSxNQUFBLEFBQU0sR0FBTixBQUFTLFVBQVQsQUFBbUIsU0FBbkIsQUFBNEIsRUFBNUIsQUFBOEIsUUFBbkUsQUFBcUMsQUFBc0MsQUFDM0U7NkJB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QyxRQUEzQyxBQUFtRCxLQUFLLEFBQ3BEO0FBQ0E7b0JBQUksS0FBQSxBQUFLLE1BQUwsQUFBVyxZQUFYLEFBQXVCLEdBQXZCLEFBQTBCLE9BQTFCLEFBQWlDLFNBQXJDLEFBQThDLE1BQU0sQUFDaEQ7d0JBQUEsQUFBSSxTQUFTLEFBQ1Q7NkJBQUEsQUFBSyxNQUFMLEFBQVcsWUFBWCxBQUF1QixHQUF2QixBQUEwQixBQUMxQjs2QkFBQSxBQUFLLE1BQUwsQUFBVyxZQUFYLEFBQXVCLEdBQXZCLEFBQTBCLFVBQTFCLEFBQW9DLEFBQ3ZDO0FBSEQsMkJBR08sQUFDSDs2QkFBQSxBQUFLLE1BQUwsQUFBVyxZQUFYLEFBQXVCLEdBQXZCLEFBQTBCLEFBQzdCO0FBQ0o7QUFDSjtBQUNKOzs7O2lDLEFBRVEsV0FBVyxBQUFFOzs7MEIsQUFuR0csS0FBSyxBQUMxQjtpQkFBQSxBQUFLLDZCQUFMLEFBQWtDLEFBQ2xDO2lCQUFBLEFBQUssTUFBTCxBQUFXLHVCQUFYLEFBQWtDLEFBQ3JDOzs7OzBCLEFBaUVZLEtBQUssQUFDZDtpQkFBQSxBQUFLLFlBQUwsQUFBaUIsQUFDcEI7QTs0QkFFYyxBQUNYO21CQUFPLEtBQVAsQUFBWSxBQUNmOzs7OzBCLEFBRVEsR0FBRyxBQUNSO2dCQUFJLElBQUksS0FBUixBQUFhLEFBQ2I7aUJBQUEsQUFBSyxlQUFMLEFBQW9CLEFBQ3BCO2lCQUFLLElBQUksSUFBVCxBQUFhLEdBQUcsSUFBSSxLQUFBLEFBQUssTUFBTCxBQUFXLFlBQS9CLEFBQTJDLFFBQTNDLEFBQW1ELEtBQUssQUFDcEQ7cUJBQUEsQUFBSyxNQUFMLEFBQVcsWUFBWCxBQUF1QixHQUF2QixBQUEwQixVQUExQixBQUFvQyxBQUN2QztBQUNKOzs7Ozs7O2tCLEFBaEdnQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgQmFzZUNvbmZpZyBmcm9tICcuL2Jhc2Vjb25maWcuanMnO1xuaW1wb3J0IEJhc2VHcm91cCBmcm9tICcuL2Jhc2Vncm91cC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VBcHBsaWNhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZWwsIGNmZykge1xuICAgICAgICB0aGlzLmFwcENvbmZpZyA9IEJhc2VDb25maWcuYXBwbHkoY2ZnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWw7XG4gICAgICAgIHRoaXMuZW5naW5lID0gbmV3IEJBQllMT04uRW5naW5lKHRoaXMuZWxlbWVudCwgdGhpcy5hcHBDb25maWcuZW5naW5lLmFudGlhbGlhcywgdGhpcy5hcHBDb25maWcuZW5naW5lLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVuZ2luZS5lbmFibGVPZmZsaW5lU3VwcG9ydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IEJBQllMT04uU2NlbmUodGhpcy5lbmdpbmUpO1xuICAgICAgICB0aGlzLnNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gdGhpcy5hcHBDb25maWcuc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW07XG5cbiAgICAgICAgdGhpcy5pc0FwcGxpY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbmdpbmUucnVuUmVuZGVyTG9vcCggKCkgPT4gdGhpcy50aWNrKCkgKTtcblxuICAgICAgICB0aGlzLmNhbWVyYXMgPSBbXTtcbiAgICAgICAgdGhpcy5saWdodHMgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5hcHBDb25maWcuY2FtZXJhKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENhbWVyYSh0aGlzLmFwcENvbmZpZy5jYW1lcmEudHlwZSwgdGhpcy5hcHBDb25maWcuY2FtZXJhLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFwcENvbmZpZy5saWdodHMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkTGlnaHRzKHRoaXMuYXBwQ29uZmlnLmxpZ2h0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hcHBDb25maWcuaW5zcGVjdG9yKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB0aGlzLm9uS2V5RG93bihlKSApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBCYXNlR3JvdXAoKTtcbiAgICAgICAgdGhpcy5yb290LnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHRoaXMucm9vdC5pbml0aWFsaXplR3JvdXAodGhpcy5zY2VuZSwgJ2FwcGxpY2F0aW9uLXJvb3QnKTtcbiAgICAgICAgdGhpcy5yb290Lm9uUGFyZW50ZWQodGhpcy5zY2VuZSwgdGhpcywgdGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5vbkNyZWF0ZSh0aGlzLnNjZW5lKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy5vblJlc2l6ZSgpKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgY2FudmFzKCkgeyByZXR1cm4gdGhpcy5lbGVtZW50OyB9XG5cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuICdyb290JzsgfVxuXG4gICAgLyoqXG4gICAgICogY29udmVuaWVuY2UgbWV0aG9kIHRvIGFkZCBhIHR5cGljYWwgY2FtZXJhXG4gICAgICovXG4gICAgYWRkQ2FtZXJhKHR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2ZyZWVjYW1lcmEnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBvc2l0aW9uID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjYW1lcmE7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgICAgICBjYXNlICdmcmVlY2FtZXJhJzpcbiAgICAgICAgICAgICAgICBjYW1lcmEgPSBuZXcgQkFCWUxPTi5GcmVlQ2FtZXJhKCdjYW1lcmEnLCBvcHRpb25zLnBvc2l0aW9uLCB0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEuc2V0VGFyZ2V0KEJBQllMT04uVmVjdG9yMy5aZXJvKCkpO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5hdHRhY2hDb250cm9sKHRoaXMuZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2FyY3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IEJBQllMT04uQXJjUm90YXRlQ2FtZXJhKFwiQXJjUm90YXRlQ2FtZXJhXCIsIDAsIDAsIDAsIEJBQllMT04uVmVjdG9yMy5aZXJvKCksIHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5hdHRhY2hDb250cm9sKHRoaXMuZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY2FtZXJhLnNldFBvc2l0aW9uKG9wdGlvbnMucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NhbWVyYSBub3QgYWRkZWQsICcsIHR5cGUsICcgaXMgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW1lcmFzLnB1c2goY2FtZXJhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb252ZW5pZW5jZSBtZXRob2QgdG8gYWRkIGEgdHlwaWNhbCBsaWdodFxuICAgICAqL1xuICAgIGFkZExpZ2h0cygpIHtcbiAgICAgICAgbGV0IGxpZ2h0ID0gbmV3IEJBQllMT04uSGVtaXNwaGVyaWNMaWdodChcImxpZ2h0MVwiLCBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDEsIDApLCB0aGlzLnNjZW5lKTtcbiAgICAgICAgbGlnaHQuaW50ZW5zaXR5ID0gMC43O1xuXG4gICAgfVxuXG4gICAgZ2V0IGNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbmRlciBlbmdpbmUgdGlja1xuICAgICAqL1xuICAgIHRpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIHRoaXMuY2FtZXJhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnJlbmRlcigpO1xuICAgICAgICAgICAgdGhpcy5vblJlbmRlcih0aGlzLmVuZ2luZS5nZXREZWx0YVRpbWUoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXBsYWNlIGFsbCBzY2VuZXMgc3RhcnRpbmcgd2l0aCBhcHBsaWNhdGlvbiBhbmQgc3BpZGVyaW5nIHRocm91Z2ggY2hpbGRyZW4sIHJlc3RhcnRpbmcgYWxsIHJlbmRlciBsb29wc1xuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjaGlsZHJlblxuICAgICAqL1xuICAgIHJlcGxhY2VBbGxTY2VuZXMoc2NlbmUsIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLnN0b3BSZW5kZXJMb29wKCk7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5ydW5SZW5kZXJMb29wKCAoKSA9PiB0aGlzLnRpY2soKSApO1xuXG4gICAgICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltjXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bY10uc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2NdLmNoaWxkcmVuICYmIGNoaWxkcmVuW2NdLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VBbGxTY2VuZXMoc2NlbmUsIGNoaWxkcmVuW2NdLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZChvYmplY3RzKSB7IHJldHVybiB0aGlzLnJvb3QuYWRkKG9iamVjdHMpOyB9XG4gICAgcmVtb3ZlKG9iamVjdHMpIHsgcmV0dXJuIHRoaXMucm9vdC5yZW1vdmUob2JqZWN0cyk7IH1cbiAgICByZW1vdmVBbGwob2JqZWN0cykgeyB0aGlzLnJvb3QucmVtb3ZlQWxsKG9iamVjdHMpOyB9XG4gICAgZmluZChuYW1lKSB7IHJldHVybiB0aGlzLnJvb3QuZmluZChuYW1lKTsgfVxuXG4gICAgb25LZXlEb3duKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmluc3BlY3Rvcikge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gdGhpcy5jb25maWcuaW5zcGVjdG9yIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKS50b0xvd2VyQ2FzZSgpID09PSB0aGlzLmNvbmZpZy5pbnNwZWN0b3IgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUuZGVidWdMYXllci5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmRlYnVnTGF5ZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuZGVidWdMYXllci5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLnJlc2l6ZSgpO1xuICAgIH1cblxuICAgIG9uQ3JlYXRlKHNjZW5lRWwpIHt9XG4gICAgb25SZW5kZXIodGltZSkge31cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBkZWZhdWx0OiB7XG4gICAgICAgIHNjZW5lOiB7XG4gICAgICAgICAgIHVzZVJpZ2h0SGFuZGVkU3lzdGVtOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgZW5naW5lOiB7XG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBvcHRpb25zOiB7fVxuICAgICAgICB9LFxuICAgICAgICBjYW1lcmE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdmcmVlY2FtZXJhJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIHo6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5zcGVjdG9yOiAnaSdcbiAgICB9LFxuXG4gICAgYXBwbHkoY2ZnLCBub2RlKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjIGluIG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghY2ZnW2NdKSB7XG4gICAgICAgICAgICAgICAgY2ZnW2NdID0gbm9kZVtjXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjZmdbY10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNmZ1tjXSA9IHRoaXMuYXBwbHkoY2ZnW2NdLCBub2RlW2NdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2ZnO1xuICAgIH1cbn1cbiIsImltcG9ydCBFdmVudExpc3RlbmVyIGZyb20gJy4vdXRpbHMvZXZlbnRsaXN0ZW5lci5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlR3JvdXAgZXh0ZW5kcyBFdmVudExpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gcGFyYW1zO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmlzR3JvdXAgPSB0cnVlO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMub25DcmVhdGUodGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBuYW1lIG9mIGdyb3VwXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFwcCBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXQgYXBwQ29uZmlnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbi5hcHBDb25maWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldCBjb25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUdyb3VwKHNjZW5lLCBuYW1lKSB7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZSArICctZ3JvdXAnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dyb3VwID0gbmV3IEJBQllMT04uTWVzaChuYW1lLCBzY2VuZSk7XG4gICAgfVxuXG4gICAgb25QYXJlbnRlZChzY2VuZSwgcGFyZW50LCBjYW52YXMpIHtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgICAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMub25DcmVhdGUoc2NlbmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG92ZXJyaWRhYmxlIG1ldGhvZHNcbiAgICAgKiBsZWF2ZSBlbXB0eSB0byBiZSBhIHNpbXBsZSBhYnN0cmFjdGlvbiB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgc3VwZXIgb25cbiAgICAgKiBAcGFyYW0gc2NlbmVcbiAgICAgKi9cbiAgICBvblJlbmRlcihzY2VuZSwgdGltZSkge307XG4gICAgb25DcmVhdGUocGFyYW1zKSB7fTtcblxuICAgIC8qKlxuICAgICAqIGFkZCBvYmplY3QgdG8gcGFyZW50XG4gICAgICogQHBhcmFtIG9iamVjdFxuICAgICAqL1xuICAgIGFkZChvYmplY3RzKSB7XG4gICAgICAgIGxldCBhc0FycmF5ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9iamVjdHMubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9iamVjdHMgPSBbb2JqZWN0c107XG4gICAgICAgICAgICBhc0FycmF5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBvYmplY3RzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAob2JqZWN0c1tjXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzW2NdLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHNbY10uaW5pdGlhbGl6ZUdyb3VwKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RzW2NdLnBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5ncm91cC5wYXJlbnQgPSB0aGlzLl9ncm91cDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5wYXJlbnQgPSB0aGlzLl9ncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2gob2JqZWN0c1tjXSk7XG4gICAgICAgICAgICBpZiAob2JqZWN0c1tjXS5vblBhcmVudGVkKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5vblBhcmVudGVkKHRoaXMuX3NjZW5lLCB0aGlzLl9ncm91cCwgdGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RzWzBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKG9iamVjdHMpIHtcbiAgICAgICAgbGV0IGFzQXJyYXkgPSB0cnVlO1xuICAgICAgICBpZiAob2JqZWN0cy5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqZWN0cyA9IFtvYmplY3RzXTtcbiAgICAgICAgICAgIGFzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIodmFsID0+ICFvYmplY3RzLmluY2x1ZGVzKHZhbCkpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG9iamVjdHMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlTWVzaChvYmplY3RzW2NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RzWzBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQWxsKCkge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbltjXS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICBmaW5kKG5hbWUpIHtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoaWxkcmVuW2NdLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5bY107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGFwcGxpY2F0aW9uKCkge1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuaXNBcHBsaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHBhcmVudCBncm91cCBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7VEhSRUUuT2JqZWN0M0R9XG4gICAgICovXG4gICAgZ2V0IGdyb3VwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXA7XG4gICAgfVxuXG4gICAgZ2V0IGNhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZW5naW5lXG4gICAgICovXG4gICAgZ2V0IGVuZ2luZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lLl9lbmdpbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGJhYnlsb24gc2NlbmVcbiAgICAgKi9cbiAgICBnZXQgc2NlbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY2VuZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgc2NlbmUgYW5kIHJld2lyZSByZW5kZXIgbG9vcCBmb3Igc2NlbmVcbiAgICAgKiBAcGFyYW0gdmFsXG4gICAgICovXG4gICAgc2V0IHNjZW5lKHZhbCkge1xuICAgICAgICBpZiAodGhpcy5zY2VuZSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLmVuZ2luZSwgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc2NlbmUgJiYgdGhpcy5fc2NlbmUuX2VuZ2luZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NlbmUuX2VuZ2luZS5zdG9wUmVuZGVyTG9vcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NjZW5lID0gdmFsO1xuICAgICAgICB0aGlzLl9zY2VuZS5fZW5naW5lLnJ1blJlbmRlckxvb3AoICgpID0+IHRoaXMudGljaygpICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNoaWxkcmVuIG9mIHRoaXMgZ3JvdXBcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVuZGVyIGxvb3BcbiAgICAgKi9cbiAgICB0aWNrKCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCd0aWNrJywgdGhpcy5uYW1lKVxuICAgICAgICB0aGlzLm9uUmVuZGVyKHRoaXMuc2NlbmUuX2VuZ2luZS5nZXREZWx0YVRpbWUoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGV2ZW50IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcGFyYW0gY2JcbiAgICAgKiBAcmV0dXJucyB7e3R5cGU6ICosIGNhbGxiYWNrOiAqfX1cbiAgICAgKi9cbiAgICBhZGRMaXN0ZW5lcih0eXBlLCBjYikge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSB7IHR5cGU6IHR5cGUsIGNhbGxiYWNrOiBjYiB9O1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSB0aGlzLl9saXN0ZW5lcnNbY10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGMsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyaWdnZXIgZXZlbnRcbiAgICAgKiBAcGFyYW0gdHlwZVxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKi9cbiAgICB0cmlnZ2VyRXZlbnQodHlwZSwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKCBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBsLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBsLmNhbGxiYWNrLmFwcGx5KHRoaXMsIFt0eXBlLCBwYXJhbXNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEdMVEZGaWxlTG9hZGVyIGZyb20gJy4vaW8vZ2x0ZmZpbGVsb2FkZXIuanMnO1xuaW1wb3J0IEdMVEZFeHBsb2RlciBmcm9tICcuL2lvL2dsdGZleHBsb2Rlci5qcyc7XG5pbXBvcnQgQmFzZUFwcGxpY2F0aW9uIGZyb20gJy4uL25vZGVfbW9kdWxlcy9tYWNneXZyL3NyYy9iYXNlYXBwbGljYXRpb24uanMnO1xuaW1wb3J0IEdMVEZPYmplY3QgZnJvbSAnLi9vYmplY3RzL2dsdGZvYmplY3QuanMnO1xuaW1wb3J0IEFuaW1hdGlvblRpbWVsaW5lIGZyb20gJy4vY29tcG9uZW50cy9hdml6LXRpbWVsaW5lL2F2aXotdGltZWxpbmUuanMnO1xuaW1wb3J0IEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMgZnJvbSAnLi9jb21wb25lbnRzL2F2aXotcGxheWJhY2stY29udHJvbHMvYXZpei1wbGF5YmFjay1jb250cm9scy5qcyc7XG5pbXBvcnQgQW5pbWF0aW9uU2FtcGxlR0xURnMgZnJvbSAnLi9jb21wb25lbnRzL2F2aXotc2FtcGxlLWdsdGZzL2F2aXotc2FtcGxlLWdsdGZzLmpzJztcbmltcG9ydCBBbmltYXRpb25TY2VuZUluZm8gZnJvbSAnLi9jb21wb25lbnRzL2F2aXotc2NlbmUtaW5mby9hdml6LXNjZW5lLWluZm8uanMnO1xuaW1wb3J0IEFuaW1hdGlvbk5vZGVzTGlzdCBmcm9tICcuL2NvbXBvbmVudHMvYXZpei1ub2Rlcy1saXN0L2F2aXotbm9kZXMtbGlzdC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcGxpY2F0aW9uIGV4dGVuZHMgQmFzZUFwcGxpY2F0aW9uIHtcblxuICAgIHNldCB0aW1lKHQpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSB0O1xuXG4gICAgICAgIGlmICh0aGlzLmdsdGYpIHtcbiAgICAgICAgICAgIHRoaXMuZ2x0Zi50aW1lID0gdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5jb21wb25lbnRzLnRpbWVsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLnRpbWVsaW5lLmN1cnJlbnRUaW1lID0gdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5jb21wb25lbnRzLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmNvbnRyb2xzLnRpbWUgPSB0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZTtcbiAgICB9XG5cbiAgICBvbkNyZWF0ZShzY2VuZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLnRpbWVsaW5lLmFkZEV2ZW50TGlzdGVuZXIoQW5pbWF0aW9uVGltZWxpbmUuVFJBQ0tfU0VMRUNURUQsIGUgPT4gdGhpcy5vblRyYWNrU2VsZWN0aW9uKGUpKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZS5hZGRFdmVudExpc3RlbmVyKEFuaW1hdGlvblRpbWVsaW5lLlNDUlVCX1RJTUVMSU5FLCBlID0+IHRoaXMub25TY3J1YlRpbWVsaW5lKGUpKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZS5hZGRFdmVudExpc3RlbmVyKEFuaW1hdGlvblRpbWVsaW5lLlRSQUNLX1ZJU0lCSUxJVFlfQ0hBTkdFRCwgZSA9PiB0aGlzLm9uVHJhY2tWaXNpYmlsaXR5Q2hhbmdlZChlKSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLkNPTlRST0xfQ0xJQ0tFRCwgZSA9PiB0aGlzLm9uUGxheWJhY2tDb250cm9sQ2xpY2tlZChlKSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLkxPQURfR0xURiwgZSA9PiB0aGlzLmxvYWRGaWxlKGUpKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5zYW1wbGVzLmFkZEV2ZW50TGlzdGVuZXIoQW5pbWF0aW9uU2FtcGxlR0xURnMuU0VMRUNUX1JFTU9URV9GSUxFLCBlID0+IHRoaXMubG9hZEZpbGUoZSkpO1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmluZm8uYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25TY2VuZUluZm8uU1dJVENIX0NPT1JESU5BVEVfU1lTVEVNLCBlID0+IHRoaXMuc3dpdGNoQ29vcmRpbmF0ZVN5c3RlbShlKSk7XG4gICAgICAgIHRoaXMudGltZSA9IDA7XG4gICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdsdGYgPSB0aGlzLmFkZCggbmV3IEdMVEZPYmplY3QoKSApO1xuICAgIH1cblxuICAgIGxvYWRGaWxlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuc2FtcGxlcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIGxldCBsb2FkZXIgPSBuZXcgR0xURkZpbGVMb2FkZXIoKTtcbiAgICAgICAgbG9hZGVyLmFkZExpc3RlbmVyKEdMVEZGaWxlTG9hZGVyLkxPQURFRCwgKGV2ZW50dHlwZSwgZXZlbnQpID0+IHRoaXMub25HTFRGRGF0YShldmVudCkpO1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IHVyaSA9IGV2ZW50O1xuICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5pbmZvLnNldEF0dHJpYnV0ZSgnZmlsZW5hbWUnLCB1cmkpO1xuICAgICAgICAgICAgbG9hZGVyLmxvYWRSZW1vdGUodXJpKTtcbiAgICAgICAgICAgIHRoaXMuZ2x0Zi5sb2FkKHVyaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGV0YWlsLnVyaSkge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5pbmZvLnNldEF0dHJpYnV0ZSgnZmlsZW5hbWUnLCBldmVudC5kZXRhaWwudXJpKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkUmVtb3RlKGV2ZW50LmRldGFpbC51cmkpO1xuICAgICAgICAgICAgdGhpcy5nbHRmLmxvYWQoZXZlbnQuZGV0YWlsLnVyaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmluZm8uc2V0QXR0cmlidXRlKCdmaWxlbmFtZScsIGV2ZW50LmRldGFpbC5maWxlc1swXS5uYW1lKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkTG9jYWwoZXZlbnQuZGV0YWlsLmZpbGVzKTtcbiAgICAgICAgICAgIHRoaXMuZ2x0Zi5sb2FkKGV2ZW50LmRldGFpbC5pbnB1dGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2x0Zi50aW1lID0gdGhpcy50aW1lO1xuICAgIH1cblxuICAgIG9uR0xURkRhdGEoZXZlbnQpIHtcbiAgICAgICAgbGV0IHRpbWVsaW5lID0gR0xURkV4cGxvZGVyLmdlbmVyYXRlVGltZWxpbmUoZXZlbnQuZ2x0Zi5hbmltYXRpb25zKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZS5kYXRhID0gdGltZWxpbmU7XG4gICAgICAgIHRoaXMuZ2x0Zi5kdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uO1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmNvbnRyb2xzLmR1cmF0aW9uID0gdGltZWxpbmUuZHVyYXRpb247XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMubm9kZXMuZGF0YSA9IGV2ZW50LmdsdGYubm9kZXM7XG4gICAgfVxuXG4gICAgc3dpdGNoQ29vcmRpbmF0ZVN5c3RlbShldmVudCkge1xuICAgICAgICB0aGlzLmdsdGYudXNlUmlnaHRIYW5kZWRTeXN0ZW0gPSBldmVudC5kZXRhaWwucmlnaHRIYW5kZWQ7XG4gICAgfVxuXG4gICAgb25TY3J1YlRpbWVsaW5lKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQuZGV0YWlsLnJlc3VtZXBsYXliYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGltZSA9IGV2ZW50LmRldGFpbC5wbGF5YmFja3RpbWU7XG4gICAgfVxuXG4gICAgb25UcmFja1NlbGVjdGlvbihldmVudCkge1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLm5vZGVzLnNlbGVjdE5vZGVCeU5hbWUoZXZlbnQuZGV0YWlsLm5hbWUpO1xuICAgIH1cblxuICAgIG9uVHJhY2tWaXNpYmlsaXR5Q2hhbmdlZChldmVudCkge1xuICAgICAgICB0aGlzLmdsdGYudG9nZ2xlVmlzaWJpbGl0eShldmVudC5kZXRhaWwudmlzaWJsZSwgZXZlbnQuZGV0YWlsLm5hbWUsIGV2ZW50LmRldGFpbC5wbGF5YmFja3RpbWUpO1xuICAgIH1cblxuICAgIG9uUGxheWJhY2tDb250cm9sQ2xpY2tlZChldmVudCkge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBldmVudC5kZXRhaWwuaXNQbGF5aW5nO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGV0YWlsLmFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLlNURVBfRk9SV0FSRDpcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgKz0gLjAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuU1RFUF9CQUNLV0FSRDpcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgLT0gLjAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuRkFTVF9GT1JXQVJEOlxuICAgICAgICAgICAgICAgIHRoaXMudGltZSArPSAuMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLkZBU1RfQkFDS1dBUkQ6XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lIC09IC4xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZW5kZXIoZGVsdGF0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudGltZSArPSBkZWx0YXRpbWUgLyAxMDAwO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbk5vZGVzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgeyByZXR1cm4gW119XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAvLyB0d28gd2F5cyB0byByZXByZXNlbnQgdGhlIG5vZGUgbGlzdCAoc2FtZSBub2RlcylcbiAgICAgICAgdGhpcy5fdHJlZSA9IHsgbmFtZTogXCJTY2VuZSBSb290XCIsIGluZGV4OiAtMSwgY2hpbGRyZW46IFtdIH07XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fYnJlYWRjcnVtYlRyYWlsID0gW107XG4gICAgICAgIHRoaXMuZG9tID0ge307XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gVGVtcGxhdGUuZ2V0KCk7XG4gICAgICAgIHRoaXMuZG9tLmxpc3QgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XG4gICAgICAgIHRoaXMuZG9tLmhlYWRlciA9IHRoaXMucXVlcnlTZWxlY3RvcignLm5vZGUtaGVhZGVyJyk7XG4gICAgICAgIHRoaXMuZG9tLmJyZWFkY3J1bWJzID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuYnJlYWRjcnVtYnMnKTtcblxuICAgICAgICB0aGlzLmFkZEJyZWFkY3J1bWIodGhpcy5fdHJlZSk7XG4gICAgfVxuXG4gICAgc2VsZWN0Tm9kZUJ5TmFtZShuYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5fbGlzdC5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RbY10ubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGUgPSB0aGlzLl9saXN0W2NdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JyZWFkY3J1bWJUcmFpbCA9IFtdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9icmVhZGNydW1iVHJhaWwucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2JyZWFkY3J1bWJUcmFpbC5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJCcmVhZGNydW1icygpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTm9kZSh0aGlzLl9saXN0W2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlck5vZGUobm9kZSkge1xuICAgICAgICB0aGlzLmRvbS5saXN0LmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0aGlzLmRvbS5oZWFkZXIuaW5uZXJIVE1MID0gbm9kZS5uYW1lO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSB0aGlzLm5vZGVUZW1wbGF0ZShub2RlLmNoaWxkcmVuW2NdLmluZGV4LCBub2RlLmNoaWxkcmVuW2NdLm5hbWUsIG5vZGUuY2hpbGRyZW5bY10udHJhbnNmb3JtLCBub2RlLmNoaWxkcmVuW2NdLmNoaWxkcmVuLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGxldCBleHBhbmQgPSBlbC5xdWVyeVNlbGVjdG9yKCcuZXhwYW5kJyk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgZXhwYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLm9uRXhwYW5kQ2xpY2soZSkgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kb20ubGlzdC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJCcmVhZGNydW1icygpIHtcbiAgICAgICAgdGhpcy5kb20uYnJlYWRjcnVtYnMuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5fYnJlYWRjcnVtYlRyYWlsLmxlbmd0aC0xOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2NpcmNsZScpO1xuICAgICAgICAgICAgZWwuZGF0YXNldC5pbmRleCA9IHRoaXMuX2JyZWFkY3J1bWJUcmFpbFtjXS5pbmRleDtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLm9uQnJlYWRjcnVtYkNsaWNrZWQoZSkpO1xuICAgICAgICAgICAgdGhpcy5kb20uYnJlYWRjcnVtYnMuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQnJlYWRjcnVtYihub2RlKSB7XG4gICAgICAgIHRoaXMuX2JyZWFkY3J1bWJUcmFpbC5wdXNoKG5vZGUpO1xuICAgICAgICB0aGlzLnJlbmRlckJyZWFkY3J1bWJzKCk7XG4gICAgfVxuXG4gICAgbm9kZVRlbXBsYXRlKGluZGV4LCBuYW1lLCB0cmFuc2Zvcm0sIG51bUNoaWxkcmVuKSB7XG4gICAgICAgIGxldCB0UG9zLCB0Um90LCB0U2NhbGU7XG4gICAgICAgIGlmICghdHJhbnNmb3JtLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICB0UG9zID0gWyctJywgJy0nLCAnLSddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdFBvcyA9IFt0cmFuc2Zvcm0ucG9zaXRpb25bMF0udG9GaXhlZCgyKSwgdHJhbnNmb3JtLnBvc2l0aW9uWzFdLnRvRml4ZWQoMiksIHRyYW5zZm9ybS5wb3NpdGlvblsyXS50b0ZpeGVkKDIpIF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRyYW5zZm9ybS5yb3RhdGlvbikge1xuICAgICAgICAgICAgdFJvdCA9IFsnLScsICctJywgJy0nLCAnLSddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdFJvdCA9IFt0cmFuc2Zvcm0ucm90YXRpb25bMF0udG9GaXhlZCgyKSwgdHJhbnNmb3JtLnJvdGF0aW9uWzFdLnRvRml4ZWQoMiksIHRyYW5zZm9ybS5yb3RhdGlvblsyXS50b0ZpeGVkKDIpLCB0cmFuc2Zvcm0ucm90YXRpb25bM10udG9GaXhlZCgyKSBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0cmFuc2Zvcm0uc2NhbGUpIHtcbiAgICAgICAgICAgIHRTY2FsZSA9IFsnLScsICctJywgJy0nXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRTY2FsZSA9IFt0cmFuc2Zvcm0uc2NhbGVbMF0udG9GaXhlZCgyKSwgdHJhbnNmb3JtLnNjYWxlWzFdLnRvRml4ZWQoMiksIHRyYW5zZm9ybS5zY2FsZVsyXS50b0ZpeGVkKDIpIF07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZXhwYW5kID0gJyc7XG4gICAgICAgIGlmIChudW1DaGlsZHJlbiA9PT0gMSkge1xuICAgICAgICAgICAgZXhwYW5kID0gYDxhIGRhdGEtaW5kZXg9XCIke2luZGV4fVwiPiArICgke251bUNoaWxkcmVufSBjaGlsZCk8L2E+YDtcbiAgICAgICAgfSBlbHNlIGlmIChudW1DaGlsZHJlbiA+IDEpIHtcbiAgICAgICAgICAgIGV4cGFuZCA9IGA8YSBkYXRhLWluZGV4PVwiJHtpbmRleH1cIj4gKyAoJHtudW1DaGlsZHJlbn0gY2hpbGRyZW4pPC9hPmBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgPGRpdj48cCBjbGFzcz1cIm5hbWVcIj4ke25hbWV9PC9wPjxwIGNsYXNzPVwiZXhwYW5kXCI+JHtleHBhbmR9PC9wPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmFuc2Zvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc2l0aW9uXCI+PGRpdiBjbGFzcz1cInRyYW5zZm9ybS1sYWJlbFwiPlQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2YWx1ZVwiPiR7dFBvc1swXX08L2Rpdj4gXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj4ke3RQb3NbMV19PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj4ke3RQb3NbMl19PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm90YXRpb25cIj48ZGl2IGNsYXNzPVwidHJhbnNmb3JtLWxhYmVsXCI+UjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+JHt0Um90WzBdfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+JHt0Um90WzFdfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+JHt0Um90WzJdfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+JHt0Um90WzNdfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNjYWxlXCI+PGRpdiBjbGFzcz1cInRyYW5zZm9ybS1sYWJlbFwiPlM8L2Rpdj4gXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmFsdWVcIj4ke3RTY2FsZVswXX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2YWx1ZVwiPiR7dFNjYWxlWzFdfTwvZGl2PiBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2YWx1ZVwiPiR7dFNjYWxlWzJdfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuICAgIH1cblxuICAgIHNldCBkYXRhKG5vZGVzKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgbm9kZXMubGVuZ3RoOyBjKyspIHtcblxuICAgICAgICAgICAgbGV0IHRyYW5zZm9ybSA9IHt9O1xuICAgICAgICAgICAgaWYgKG5vZGVzW2NdLnRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLnRyYW5zbGF0aW9uID0gbm9kZXNbY10udHJhbnNsYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZXNbY10ucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSBub2Rlc1tjXS5yb3RhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2Rlc1tjXS5zY2FsZSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5zY2FsZSA9IG5vZGVzW2NdLnNjYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBub2Rlc1tjXS5uYW1lLFxuICAgICAgICAgICAgICAgIGluZGV4OiBjLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBub2Rlc1tjXS5jaGlsZHJlbiA/IG5vZGVzW2NdLmNoaWxkcmVuIDogW10sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9saXN0LnB1c2gobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IHRoaXMuX2xpc3QubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXN0W2RdLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHRoaXMuX2xpc3RbZF0uY2hpbGRyZW4ubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBpbmRpY2VzIHdpdGggbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdFtkXS5jaGlsZHJlbltlXSA9IHRoaXMuX2xpc3RbdGhpcy5fbGlzdFtkXS5jaGlsZHJlbltlXV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RbZF0uY2hpbGRyZW5bZV0ucGFyZW50ID0gdGhpcy5fbGlzdFtkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IHRoaXMuX2xpc3QubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbGlzdFtmXS5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0W2ZdLnBhcmVudCA9IHRoaXMuX3RyZWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJlZS5jaGlsZHJlbi5wdXNoKHRoaXMuX2xpc3RbZl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJOb2RlKHRoaXMuX3RyZWUpO1xuICAgIH1cblxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fdHJlZSA9IHsgbmFtZTogXCJTY2VuZSBSb290XCIsIGluZGV4OiAtMSwgY2hpbGRyZW46IFtdIH07XG4gICAgICAgIHRoaXMuZG9tLmxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuZG9tLmJyZWFkY3J1bWJzLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIG9uQnJlYWRjcnVtYkNsaWNrZWQoZSkge1xuICAgICAgICBsZXQgbm9kZUluZGV4ID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgdGhpcy5fYnJlYWRjcnVtYlRyYWlsLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICBpZiAobm9kZUluZGV4ID09PSB0aGlzLl9icmVhZGNydW1iVHJhaWxbZF0uaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9icmVhZGNydW1iVHJhaWwgPSB0aGlzLl9icmVhZGNydW1iVHJhaWwuc3BsaWNlKDAsIGQrMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJCcmVhZGNydW1icygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTm9kZSh0aGlzLl90cmVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5fbGlzdC5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RbY10uaW5kZXggPT09IG5vZGVJbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTm9kZSh0aGlzLl9saXN0W2NdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkV4cGFuZENsaWNrKGUpIHtcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IGUudGFyZ2V0LmRhdGFzZXQuaW5kZXg7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5fbGlzdC5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpc3RbY10uaW5kZXggPT0gbm9kZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJOb2RlKHRoaXMuX2xpc3RbY10pO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQnJlYWRjcnVtYih0aGlzLl9saXN0W2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge31cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlLCBuYW1lc3BhY2UpIHt9XG4gICAgYWRvcHRlZENhbGxiYWNrKG9sZERvY3VtZW50LCBuZXdEb2N1bWVudCkge31cbn1cblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ2F2aXotbm9kZXMtbGlzdCcpKSB7XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhdml6LW5vZGVzLWxpc3QnLCBBbmltYXRpb25Ob2Rlcyk7XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIm5vZGUtaGVhZGVyXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnJlYWRjcnVtYnNcIj48L2Rpdj5cbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5vZGVzLWxpc3RcIj5cbiAgICAgICAgICAgIDwvdWw+YDtcbiAgICB9XG59XG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbXX1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9tID0ge307XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gMDtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBlID0+IHRoaXMub25GaWxlRHJvcHBlZChlKSwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBlID0+IHRoaXMub25GaWxlSG92ZXIoZSksIGZhbHNlKTtcbiAgICAgICAgLy9kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnbGVhdmVcIiwgZSA9PiB0aGlzLm9uRmlsZUhvdmVyKGUpLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc2V0IHRpbWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2R1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgPiB0aGlzLl9kdXJhdGlvbikge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAlIHRoaXMuX2R1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9tLnRpbWVEaXNwbGF5LmlubmVyVGV4dCA9IHZhbHVlLnRvRml4ZWQoMykgKyAnIC8gJyArIHRoaXMuX2R1cmF0aW9uLnRvRml4ZWQoMyk7XG4gICAgfVxuXG4gICAgc2V0IGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gVGVtcGxhdGUuZ2V0KCk7XG4gICAgICAgIHRoaXMuZG9tLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5kb20uYnV0dG9ucy5mYXN0Rm9yd2FyZEJ0biA9IHRoaXMucXVlcnlTZWxlY3RvcignLmZhc3QtZm9yd2FyZCcpO1xuICAgICAgICB0aGlzLmRvbS5idXR0b25zLmZhc3RCYWNrd2FyZEJ0biA9IHRoaXMucXVlcnlTZWxlY3RvcignLmZhc3QtYmFja3dhcmQnKTtcbiAgICAgICAgdGhpcy5kb20uYnV0dG9ucy5zdGVwRm9yd2FyZEJ0biA9IHRoaXMucXVlcnlTZWxlY3RvcignLnN0ZXAtZm9yd2FyZCcpO1xuICAgICAgICB0aGlzLmRvbS5idXR0b25zLnN0ZXBCYWNrd2FyZEJ0biA9IHRoaXMucXVlcnlTZWxlY3RvcignLnN0ZXAtYmFja3dhcmQnKTtcbiAgICAgICAgdGhpcy5kb20uYnV0dG9ucy5wbGF5cGF1c2VCdG4gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5wbGF5cGF1c2UnKTtcbiAgICAgICAgdGhpcy5kb20uYnV0dG9uQ29udGFpbmVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWNvbnRhaW5lcicpO1xuICAgICAgICB0aGlzLmRvbS5sb2FkR0xURkJ1dHRvbiA9IHRoaXMucXVlcnlTZWxlY3RvcignLmxvYWQtYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuZG9tLnRpbWVEaXNwbGF5ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcudGltZS1kaXNwbGF5Jyk7XG4gICAgICAgIHRoaXMuZG9tLmZpbGVJbnB1dCA9IHRoaXMucXVlcnlTZWxlY3RvcignLmZpbGUtaW5wdXQnKTtcbiAgICAgICAgdGhpcy5kb20uYnV0dG9uQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLm9uQnV0dG9uQ2xpY2soZSkpO1xuICAgICAgICB0aGlzLmRvbS5maWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZSA9PiB0aGlzLm9uRmlsZUlucHV0Q2hhbmdlKGUpKTtcbiAgICAgICAgdGhpcy50b2dnbGVQbGF5KGZhbHNlKTtcbiAgICB9XG5cbiAgICBvbkZpbGVEcm9wcGVkKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIWV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuTE9BRF9HTFRGLCB7ICdkZXRhaWwnOiB7IGZpbGVzOiBldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMsIGlucHV0ZXZlbnQ6IGV2ZW50IH0gfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG5cbiAgICBvbkZpbGVIb3ZlcihldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBvbkZpbGVJbnB1dENoYW5nZShldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50LnRhcmdldC5maWxlc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuTE9BRF9HTFRGLCB7ICdkZXRhaWwnOiB7IGZpbGVzOiBldmVudC50YXJnZXQuZmlsZXMsIGlucHV0ZXZlbnQ6IGV2ZW50IH0gfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG5cbiAgICBvbkJ1dHRvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGxldCBhY3Rpb24gPSAnJztcbiAgICAgICAgc3dpdGNoIChldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5kb20uYnV0dG9ucy5mYXN0QmFja3dhcmRCdG46XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5GQVNUX0JBQ0tXQVJEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIHRoaXMuZG9tLmJ1dHRvbnMuZmFzdEZvcndhcmRCdG46XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5GQVNUX0ZPUldBUkQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgdGhpcy5kb20uYnV0dG9ucy5zdGVwQmFja3dhcmRCdG46XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5TVEVQX0JBQ0tXQVJEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIHRoaXMuZG9tLmJ1dHRvbnMuc3RlcEZvcndhcmRCdG46XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5TVEVQX0ZPUldBUkQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgdGhpcy5kb20uYnV0dG9ucy5wbGF5cGF1c2VCdG46XG4gICAgICAgICAgICAgICAgdGhpcy5fcGxheWluZyA9ICF0aGlzLl9wbGF5aW5nO1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlUGxheSh0aGlzLl9wbGF5aW5nKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuUExBWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLlBBVVNFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxhc3RseSwgdHVybiBvZmYgcGxheWJhY2sgaWYgd2UncmUgc3RlcHBpbmcgdGhyb3VnaFxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmRvbS5idXR0b25zLnBsYXlwYXVzZUJ0bikge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQbGF5KGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX3BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KEFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuQ09OVFJPTF9DTElDS0VELCB7XG4gICAgICAgICAgICAnZGV0YWlsJzogeyBhY3Rpb246IGFjdGlvbiwgaXNQbGF5aW5nOiB0aGlzLl9wbGF5aW5nIH0gfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG5cbiAgICB0b2dnbGVQbGF5KHBsYXlpbmcpIHtcbiAgICAgICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tLmJ1dHRvbnMucGxheXBhdXNlQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXknKTtcbiAgICAgICAgICAgIHRoaXMuZG9tLmJ1dHRvbnMucGxheXBhdXNlQnRuLmNsYXNzTGlzdC5hZGQoJ3BhdXNlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRvbS5idXR0b25zLnBsYXlwYXVzZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdwYXVzZScpO1xuICAgICAgICAgICAgdGhpcy5kb20uYnV0dG9ucy5wbGF5cGF1c2VCdG4uY2xhc3NMaXN0LmFkZCgncGxheScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7fVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSkge31cbiAgICBhZG9wdGVkQ2FsbGJhY2sob2xkRG9jdW1lbnQsIG5ld0RvY3VtZW50KSB7fVxufVxuXG5BbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLkNPTlRST0xfQ0xJQ0tFRCA9ICdvbkNvbnRyb2xDbGlja2VkJztcbkFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuTE9BRF9HTFRGID0gJ29uTG9hZEdMVEYnO1xuQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5BTklNQVRJT05fU0VMRUNURUQgPSAnb25BbmltYXRpb25TZWxlY3RlZCc7XG5BbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLlBMQVkgPSAncGxheSc7XG5BbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLlBBVVNFID0gJ3BhdXNlJztcbkFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuRkFTVF9GT1JXQVJEID0gJ2Zhc3Rmb3J3YXJkJztcbkFuaW1hdGlvblBsYXliYWNrQ29udHJvbHMuRkFTVF9CQUNLV0FSRCA9ICdmYXN0YmFja3dhcmQnO1xuQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5TVEVQX0ZPUldBUkQgPSAnc3RlcGZvcndhcmQnO1xuQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5TVEVQX0JBQ0tXQVJEID0gJ3N0ZXBiYWNrd2FyZCc7XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdhdml6LXBsYXliYWNrLWNvbnRyb2xzJykpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2F2aXotcGxheWJhY2stY29udHJvbHMnLCBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzKTtcbn1cblxuXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmYXN0LWJhY2t3YXJkIGJ0blwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1iYWNrd2FyZCBidG5cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBsYXlwYXVzZSBidG5cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtZm9yd2FyZCBidG5cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZhc3QtZm9yd2FyZCBidG5cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZS1kaXNwbGF5XCI+LSAvIC08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZC1idXR0b25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5Mb2FkIGdsVEYuLi48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCJmaWxlLWlucHV0XCIgaWQ9XCJmaWxlc1wiIG5hbWU9XCJmaWxlc1tdXCIgYWNjZXB0PVwiLmdsdGYsIC5iaW4sIC5wbmcsIC5qcGcsIC5qcGVnLCAuZ2lmXCIgbXVsdGlwbGUgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuICAgIH1cbn1cbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uU2FtcGxlR0xURnMgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbXX1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRvbSA9IHt9O1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IFRlbXBsYXRlLmdldCgpO1xuICAgICAgICB0aGlzLmRvbS5saXN0ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJyk7XG4gICAgICAgIHRoaXMuZG9tLmxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHRoaXMub25GaWxlQ2xpY2tlZChlKSk7XG5cbiAgICAgICAgbGV0IGxvYWRlciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICBsb2FkZXIub3BlbignR0VUJywgdGhpcy5nZXRBdHRyaWJ1dGUoJ21hbmlmZXN0JyksIHRydWUpO1xuICAgICAgICBsb2FkZXIub25sb2FkID0gZSA9PiB0aGlzLm9uRmlsZU1hbmlmZXN0TG9hZGVkKGUpO1xuICAgICAgICBsb2FkZXIuc2VuZCgpO1xuICAgIH1cblxuICAgIG9uRmlsZU1hbmlmZXN0TG9hZGVkKGxvYWRlcikge1xuICAgICAgICBsZXQgZmlsZXMgPSBKU09OLnBhcnNlKGxvYWRlci50YXJnZXQucmVzcG9uc2UpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGZpbGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGl0ZW0uZGF0YXNldC51cmkgPSBmaWxlc1tjXS51cmk7XG4gICAgICAgICAgICBpdGVtLmlubmVySFRNTCA9IGA8YSBocmVmPVwiI1wiPiR7ZmlsZXNbY10ubmFtZX08L2E+YDtcbiAgICAgICAgICAgIHRoaXMuZG9tLmxpc3QuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZpbGVDbGlja2VkKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuZGF0YXNldC51cmkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZSA9IG5ldyBDdXN0b21FdmVudChBbmltYXRpb25TYW1wbGVHTFRGcy5TRUxFQ1RfUkVNT1RFX0ZJTEUsIHsgJ2RldGFpbCc6IHsgdXJpOiBldmVudC50YXJnZXQucGFyZW50Tm9kZS5kYXRhc2V0LnVyaSB9IH0pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7fVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSkge31cbiAgICBhZG9wdGVkQ2FsbGJhY2sob2xkRG9jdW1lbnQsIG5ld0RvY3VtZW50KSB7fVxufVxuXG5BbmltYXRpb25TYW1wbGVHTFRGcy5TRUxFQ1RfUkVNT1RFX0ZJTEUgPSAnb25SZW1vdGVGaWxlU2VsZWN0ZWQnO1xuXG5pZiAoIWN1c3RvbUVsZW1lbnRzLmdldCgnYXZpei1zYW1wbGUtZ2x0ZnMnKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXZpei1zYW1wbGUtZ2x0ZnMnLCBBbmltYXRpb25TYW1wbGVHTFRGcyk7XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBgPGgzPlNhbXBsZSBnbFRGIGZpbGVzPC9oMz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPHA+QWx0ZXJuYXRlbHksIGRyYWcgJiBkcm9wIG9yIGxvYWQgeW91ciBnbFRGIDIuMCBmaWxlcy4gU29ycnksIC5nbGIgZmlsZXMgYXJlIG5vdCBzdXBwb3J0ZWQgYXQgdGhpcyB0aW1lPC9wPlxuICAgICAgICAgICAgICAgIDxwPldoZW4gbG9hZGluZywgcGxlYXNlIGRyYWcvZHJvcC9tdWx0aXNlbGVjdCBhbGwgZmlsZXMgc2ltdWx0YW5lb3VzbHkgKGdsdGYsIGJpbiwgaW1hZ2VzKTwvcD5gO1xuICAgIH1cbn1cbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uU2NlbmVJbmZvIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgeyByZXR1cm4gWydmaWxlbmFtZSddIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9tID0ge307XG4gICAgICAgIHRoaXMucmlnaHRIYW5kZWRDb29yZGluYXRlcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9uU3dpdGNoQ29vcmRpbmF0ZVN5c3RlbShldmVudCkge1xuICAgICAgICB0aGlzLnJpZ2h0SGFuZGVkQ29vcmRpbmF0ZXMgPSAhdGhpcy5yaWdodEhhbmRlZENvb3JkaW5hdGVzO1xuICAgICAgICBpZiAodGhpcy5yaWdodEhhbmRlZENvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICB0aGlzLmRvbS5jb29yZGluYXRlc3lzdGVtLmlubmVyVGV4dCA9ICd1c2UgbGVmdC1oYW5kZWQgc3lzdGVtIG9uIGxvYWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kb20uY29vcmRpbmF0ZXN5c3RlbS5pbm5lclRleHQgPSAndXNlIHJpZ2h0LWhhbmRlZCBzeXN0ZW0gb24gbG9hZCc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZSA9IG5ldyBDdXN0b21FdmVudChBbmltYXRpb25TY2VuZUluZm8uU1dJVENIX0NPT1JESU5BVEVfU1lTVEVNLCB7ICdkZXRhaWwnOiB7IHJpZ2h0SGFuZGVkOiB0aGlzLnJpZ2h0SGFuZGVkQ29vcmRpbmF0ZXMgfSB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGUpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IFRlbXBsYXRlLmdldCgpO1xuICAgICAgICB0aGlzLmRvbS5maWxlbmFtZSA9IHRoaXMucXVlcnlTZWxlY3RvcignLmZpbGVuYW1lJyk7XG4gICAgICAgIHRoaXMuZG9tLmNvb3JkaW5hdGVzeXN0ZW0gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5jb29yZGluYXRlLXN5c3RlbScpO1xuICAgICAgICB0aGlzLmRvbS5jb29yZGluYXRlc3lzdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLm9uU3dpdGNoQ29vcmRpbmF0ZVN5c3RlbShlKSk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7fVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ZpbGVuYW1lJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5maWxlbmFtZS5pbm5lclRleHQgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZG9wdGVkQ2FsbGJhY2sob2xkRG9jdW1lbnQsIG5ld0RvY3VtZW50KSB7fVxufVxuXG5BbmltYXRpb25TY2VuZUluZm8uU1dJVENIX0NPT1JESU5BVEVfU1lTVEVNID0gJ29uU3dpdGNoQ29vcmRpbmF0ZVN5c3RlbSc7XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdhdml6LXNjZW5lLWluZm8nKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXZpei1zY2VuZS1pbmZvJywgQW5pbWF0aW9uU2NlbmVJbmZvKTtcbn1cblxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImZpbGVuYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiY29vcmRpbmF0ZS1zeXN0ZW1cIiBocmVmPVwiI1wiPnVzZSByaWdodC1oYW5kZWQgc3lzdGVtIG9uIGxvYWQ8L2E+YDtcbiAgICB9XG59XG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvblRpbWVsaW5lIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkgeyByZXR1cm4gW119XG5cbiAgICBzZXQgZGF0YSh0aW1lbGluZSkge1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLnRpbWVsaW5lV2lkdGggPSAwO1xuICAgICAgICB0aGlzLmNyZWF0ZVBsYXliYWNrTGluZSgpO1xuICAgICAgICB0aGlzLnRpbWVsaW5lID0gdGltZWxpbmU7XG4gICAgICAgIHRoaXMuX3BvcHVsYXRlRGVsdGFzKHRoaXMudGltZWxpbmUpO1xuICAgICAgICB0aGlzLl9kcmF3VGltZWxpbmVMYWJlbCgpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMudGltZWxpbmUuYW5pbWF0aW9ucy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQW5pbWF0aW9uSGVhZGVyKGMpO1xuICAgICAgICAgICAgZm9yIChsZXQgdHJhY2sgaW4gdGhpcy50aW1lbGluZS5hbmltYXRpb25zW2NdLmFuaW1hdGlvbi50cmFja3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVUcmFjayhjLCB0cmFjaywgdGhpcy50aW1lbGluZS5hbmltYXRpb25zW2NdLmFuaW1hdGlvbi50cmFja3NbdHJhY2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgdGhpcy5kb20ucGxheWJhY2tMaW5lLnN0eWxlLmhlaWdodCA9IHRoaXMuZG9tLmNvbnRhaW5lci5zY3JvbGxIZWlnaHQgKyAncHgnO1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5fb25UaW1lbGluZVNjcm9sbCgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZG9tLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBjcmVhdGVQbGF5YmFja0xpbmUoKSB7XG4gICAgICAgIHRoaXMuZG9tLnBsYXliYWNrTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmRvbS5wbGF5YmFja0xpbmUuY2xhc3NMaXN0LmFkZCgncGxheWJhY2stbGluZScpO1xuICAgICAgICB0aGlzLmRvbS5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5kb20ucGxheWJhY2tMaW5lKTtcbiAgICB9XG5cbiAgICBzZXQgY3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgICAgICBpZiAodGhpcy50aW1lbGluZSAmJiAhdGhpcy5fZHJhZ2dpbmdQbGF5aGVhZCkge1xuICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZVRpbWUgPSBzZWNvbmRzICUgdGhpcy50aW1lbGluZS5kdXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuZG9tLnBsYXliYWNrTGluZS5zdHlsZS5sZWZ0ID0gdGhpcy5yZWxhdGl2ZVRpbWUgKiB0aGlzLnBpeGVsc1BlclNlY29uZCArICdweCc7XG4gICAgICAgICAgICB0aGlzLmRvbS5wbGF5YmFja0hlYWQuc3R5bGUubGVmdCA9IHRoaXMucmVsYXRpdmVUaW1lICogdGhpcy5waXhlbHNQZXJTZWNvbmQgLSA3ICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRvbSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2RyYWdnaW5nUGxheWhlYWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRyYWNrO1xuICAgICAgICB0aGlzLnRpY2tzID0gLjE7IC8vIG9mIGEgc2Vjb25kXG4gICAgICAgIHRoaXMucGl4ZWxzUGVyU2Vjb25kID0gMjAwO1xuICAgICAgICB0aGlzLmtleWZyYW1lU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiA1LFxuICAgICAgICAgICAgaGVpZ2h0OiA1XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVsdGFSYW5nZXMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBUZW1wbGF0ZS5nZXQoKTtcbiAgICAgICAgdGhpcy5kb20uY29udGFpbmVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcudGltZWxpbmUtdmlldycpO1xuICAgICAgICB0aGlzLmRvbS5heGlzbGFiZWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS10aW1lbGFiZWxzIC50aWNrLWNvbnRhaW5lcicpO1xuICAgICAgICB0aGlzLmRvbS56b29tU2xpZGVyID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuem9vbScpO1xuICAgICAgICB0aGlzLmRvbS50aW1lbGluZVpvb21MYWJlbCA9IHRoaXMucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLXRpbWVsYWJlbHMgY2FudmFzJyk7XG4gICAgICAgIHRoaXMuZG9tLnBsYXliYWNrTGluZSA9IHRoaXMucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLXZpZXcgLnBsYXliYWNrLWxpbmUnKTtcbiAgICAgICAgdGhpcy5kb20ucGxheWJhY2tIZWFkID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcudGltZWxpbmUtdGltZWxhYmVscyAudGljay1jb250YWluZXIgLnBsYXliYWNrLWhlYWQnKTtcblxuICAgICAgICB0aGlzLmRvbS5pbmZvID0ge1xuICAgICAgICAgICAgdGltZTogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAudGltZSAudmFsJyksXG4gICAgICAgICAgICBmcmFtZTogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAuZnJhbWUgLnZhbCcpLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5rZXlmcmFtZS1pbmZvIC5wb3NpdGlvbiAueC12YWwnKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5rZXlmcmFtZS1pbmZvIC5wb3NpdGlvbiAueS12YWwnKSxcbiAgICAgICAgICAgICAgICB6OiB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5rZXlmcmFtZS1pbmZvIC5wb3NpdGlvbiAuei12YWwnKSxcbiAgICAgICAgICAgICAgICBkOiB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5rZXlmcmFtZS1pbmZvIC5wb3NpdGlvbiAuZC12YWwnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAucm90YXRpb24gLngtdmFsJyksXG4gICAgICAgICAgICAgICAgeTogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAucm90YXRpb24gLnktdmFsJyksXG4gICAgICAgICAgICAgICAgejogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAucm90YXRpb24gLnotdmFsJyksXG4gICAgICAgICAgICAgICAgZDogdGhpcy5xdWVyeVNlbGVjdG9yKCcua2V5ZnJhbWUtaW5mbyAucm90YXRpb24gLmQtdmFsJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMucXVlcnlTZWxlY3RvcignLmtleWZyYW1lLWluZm8gLnNjYWxlIC54LXZhbCcpLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMucXVlcnlTZWxlY3RvcignLmtleWZyYW1lLWluZm8gLnNjYWxlIC55LXZhbCcpLFxuICAgICAgICAgICAgICAgIHo6IHRoaXMucXVlcnlTZWxlY3RvcignLmtleWZyYW1lLWluZm8gLnNjYWxlIC56LXZhbCcpLFxuICAgICAgICAgICAgICAgIGQ6IHRoaXMucXVlcnlTZWxlY3RvcignLmtleWZyYW1lLWluZm8gLnNjYWxlIC5kLXZhbCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kb20uY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGUgPT4gdGhpcy5fb25UaW1lbGluZVNjcm9sbChlKSk7XG4gICAgICAgIHRoaXMuZG9tLnpvb21TbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBlID0+IHRoaXMuX29uWm9vbShlKSk7XG4gICAgICAgIHRoaXMuZG9tLmF4aXNsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBlID0+IHRoaXMuX29uTGFiZWxUcmFja01vdXNlRG93bihlKSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGUgPT4gdGhpcy5fb25MYWJlbFRyYWNrTW91c2VVcChlKSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZSA9PiB0aGlzLl9vbkxhYmVsVHJhY2tNb3VzZU1vdmUoZSkpO1xuICAgIH1cblxuICAgIF9jcmVhdGVBbmltYXRpb25IZWFkZXIoYW5pbWF0aW9uSW5kZXgpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnYW5pbWF0aW9uLWhlYWRlcicpO1xuICAgICAgICBoZWFkZXIuaW5uZXJIVE1MID0gJzxzcGFuPkFuaW1hdGlvbiAnICsgYW5pbWF0aW9uSW5kZXggKyAnPC9zcGFuPic7XG4gICAgICAgIHRoaXMuZG9tLmNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgIH1cblxuICAgIF9jcmVhdGVUcmFjayhhbmltYXRpb25JbmRleCwgbmFtZSwgZGF0YSkge1xuICAgICAgICBsZXQgdHJhY2tjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICAgICAgdHJhY2tjb250YWluZXIuZGF0YXNldC5uYW1lID0gbmFtZTtcbiAgICAgICAgdHJhY2tjb250YWluZXIuZGF0YXNldC5hbmltYXRpb24gPSBhbmltYXRpb25JbmRleDtcbiAgICAgICAgdHJhY2tjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHRoaXMuX29uVHJhY2tDbGljayhlKSk7XG4gICAgICAgIHRyYWNrY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGUgPT4gdGhpcy5fb25UcmFja0hvdmVyKGUpKTtcbiAgICAgICAgdHJhY2tjb250YWluZXIuY2xhc3NOYW1lID0gJ3RpbWVsaW5lLXRyYWNrJztcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0NBTlZBUycpO1xuICAgICAgICBsZXQgdHJhY2tsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICAgICAgICB0cmFja2xhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyYWNrLWxhYmVsJyk7XG5cbiAgICAgICAgLypsZXQgdHJhY2tWaXNpYmlsaXR5VG9nZ2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRyYWNrVmlzaWJpbGl0eVRvZ2dsZS5jbGFzc0xpc3QuYWRkKCdpY29uLWV5ZScpO1xuICAgICAgICB0cmFja1Zpc2liaWxpdHlUb2dnbGUuY2xhc3NMaXN0LmFkZCgnb24nKTtcbiAgICAgICAgdHJhY2tWaXNpYmlsaXR5VG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLl9vblRyYWNrVmlzaWJpbGl0eUNsaWNrKGUpKTtcbiAgICAgICAgdHJhY2tsYWJlbC5hcHBlbmRDaGlsZCh0cmFja1Zpc2liaWxpdHlUb2dnbGUpOyovXG5cbiAgICAgICAgbGV0IHRyYWNrTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgdHJhY2tOYW1lLmlubmVyVGV4dCA9IG5hbWU7XG4gICAgICAgIHRyYWNrbGFiZWwuYXBwZW5kQ2hpbGQodHJhY2tOYW1lKTtcbiAgICAgICAgdGhpcy5kb21bJ2FuaW1hdGlvbi0nICsgYW5pbWF0aW9uSW5kZXggKyAnLXRyYWNrLScgKyBuYW1lXSA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5fZHJhd1RyYWNrKGFuaW1hdGlvbkluZGV4LCBuYW1lLCBkYXRhKTtcbiAgICAgICAgdHJhY2tjb250YWluZXIuYXBwZW5kQ2hpbGQodHJhY2tsYWJlbCk7XG4gICAgICAgIHRyYWNrY29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIHRoaXMuZG9tLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmFja2NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgX2RyYXdUcmFjayhhbmltYXRpb25JbmRleCwgbmFtZSwgZGF0YSkge1xuICAgICAgICBsZXQgY2FudmFzID0gdGhpcy5kb21bJ2FuaW1hdGlvbi0nICsgYW5pbWF0aW9uSW5kZXggKyAnLXRyYWNrLScgKyBuYW1lXTtcbiAgICAgICAgdGhpcy50aW1lbGluZVdpZHRoID0gdGhpcy50aW1lbGluZS5kdXJhdGlvbiAqIHRoaXMucGl4ZWxzUGVyU2Vjb25kICsgdGhpcy5rZXlmcmFtZVNpemUud2lkdGg7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMudGltZWxpbmVXaWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IDE2O1xuICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgZGF0YS5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKGRhdGFbY10udHJhbnNmb3JtLnRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFscGhhID0gKGRhdGFbY10udHJhbnNmb3JtLmRlbHRhcy5wb3NpdGlvbiAtIHRoaXMuZGVsdGFSYW5nZXNbbmFtZV0ucG9zaXRpb24ubWluKSAvICh0aGlzLmRlbHRhUmFuZ2VzW25hbWVdLnBvc2l0aW9uLm1heCAtIHRoaXMuZGVsdGFSYW5nZXNbbmFtZV0ucG9zaXRpb24ubWluKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYHJnYmEoMCwgMjU1LCAwLCAke2FscGhhID8gYWxwaGEgOiAwfSlgO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChkYXRhW2NdLnRpbWUgKiB0aGlzLnBpeGVsc1BlclNlY29uZCwgMCwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgsIHRoaXMua2V5ZnJhbWVTaXplLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMCwgMjU1LCAwLCAxKSc7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IC4yNTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChkYXRhW2NdLnRpbWUgKiB0aGlzLnBpeGVsc1BlclNlY29uZCwgMCwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgsIHRoaXMua2V5ZnJhbWVTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YVtjXS50cmFuc2Zvcm0ucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxwaGEgPSAoZGF0YVtjXS50cmFuc2Zvcm0uZGVsdGFzLnJvdGF0aW9uIC0gdGhpcy5kZWx0YVJhbmdlc1tuYW1lXS5yb3RhdGlvbi5taW4pIC8gKHRoaXMuZGVsdGFSYW5nZXNbbmFtZV0ucm90YXRpb24ubWF4IC0gdGhpcy5kZWx0YVJhbmdlc1tuYW1lXS5yb3RhdGlvbi5taW4pO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBgcmdiYSgyNTUsIDE2NSwgMCwgJHthbHBoYSA/IGFscGhhIDogMH0pYDtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoZGF0YVtjXS50aW1lICogdGhpcy5waXhlbHNQZXJTZWNvbmQsIHRoaXMua2V5ZnJhbWVTaXplLndpZHRoKzEsIHRoaXMua2V5ZnJhbWVTaXplLndpZHRoLCB0aGlzLmtleWZyYW1lU2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwgMTY1LCAwLCAxKSc7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IC4yNTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChkYXRhW2NdLnRpbWUgKiB0aGlzLnBpeGVsc1BlclNlY29uZCwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgrMSwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgsIHRoaXMua2V5ZnJhbWVTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YVtjXS50cmFuc2Zvcm0uc2NhbGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxwaGEgPSAoZGF0YVtjXS50cmFuc2Zvcm0uZGVsdGFzLnNjYWxpbmcgLSB0aGlzLmRlbHRhUmFuZ2VzW25hbWVdLnNjYWxpbmcubWluKSAvICh0aGlzLmRlbHRhUmFuZ2VzW25hbWVdLnNjYWxpbmcubWF4IC0gdGhpcy5kZWx0YVJhbmdlc1tuYW1lXS5zY2FsaW5nLm1pbik7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGByZ2JhKDI1NSwgMjU1LCAwLCAke2FscGhhID8gYWxwaGEgOiAwfSlgO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChkYXRhW2NdLnRpbWUgKiB0aGlzLnBpeGVsc1BlclNlY29uZCwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgqMisxLCB0aGlzLmtleWZyYW1lU2l6ZS53aWR0aCwgdGhpcy5rZXlmcmFtZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMCwgMSknO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAuMjU7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoZGF0YVtjXS50aW1lICogdGhpcy5waXhlbHNQZXJTZWNvbmQsIHRoaXMua2V5ZnJhbWVTaXplLndpZHRoKjIrMSwgdGhpcy5rZXlmcmFtZVNpemUud2lkdGgsIHRoaXMua2V5ZnJhbWVTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZHJhd1RpbWVsaW5lTGFiZWwoKSB7XG4gICAgICAgIGxldCBjYW52YXMgPSB0aGlzLmRvbS50aW1lbGluZVpvb21MYWJlbDtcbiAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy50aW1lbGluZS5kdXJhdGlvbiAqIHRoaXMucGl4ZWxzUGVyU2Vjb25kICsgdGhpcy5rZXlmcmFtZVNpemUud2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSAxNTtcbiAgICAgICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuXG4gICAgICAgIGZvciAobGV0IGMgPSB0aGlzLnRpY2tzOyBjIDwgdGhpcy50aW1lbGluZS5kdXJhdGlvbjsgYyArPSB0aGlzLnRpY2tzKSB7XG4gICAgICAgICAgICBsZXQgdEhlaWdodCA9IDg7XG4gICAgICAgICAgICBsZXQgdFdpZHRoID0gMTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhOdW1iZXIoTWF0aC5yb3VuZChjICsnZTInKSsnZS0yJykgPT09IE1hdGgucm91bmQoYykpKSB7IC8vIGp1c3QgdHJ5aW5nIHRvIHRlc3QgaWYgYW4gaW50ZWdlciwgc3R1cGlkIHByZWNpc2lvbiBsb3NzXG4gICAgICAgICAgICAgICAgdEhlaWdodCA9IDE1O1xuICAgICAgICAgICAgICAgIHRXaWR0aCA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoYyAqIHRoaXMucGl4ZWxzUGVyU2Vjb25kLCAwLCB0V2lkdGgsIHRIZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3BvcHVsYXRlRGVsdGFzKHRpbWVsaW5lKSB7XG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgdGltZWxpbmUuYW5pbWF0aW9ucy5sZW5ndGg7IGQrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgdHJhY2sgaW4gdGltZWxpbmUuYW5pbWF0aW9uc1tkXS5hbmltYXRpb24udHJhY2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAxOyBjIDwgdGltZWxpbmUuYW5pbWF0aW9uc1tkXS5hbmltYXRpb24udHJhY2tzW3RyYWNrXS5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdDEgPSB0aW1lbGluZS5hbmltYXRpb25zW2RdLmFuaW1hdGlvbi50cmFja3NbdHJhY2tdW2NdLnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQwID0gdGltZWxpbmUuYW5pbWF0aW9uc1tkXS5hbmltYXRpb24udHJhY2tzW3RyYWNrXVtjLTFdLnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0MS50cmFuc2xhdGlvbiAmJiB0MC50cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZFBvcyA9IE1hdGguc3FydChNYXRoLnBvdyh0MS50cmFuc2xhdGlvbi54IC0gdDAudHJhbnNsYXRpb24ueCwgMikgKyBNYXRoLnBvdyh0MS50cmFuc2xhdGlvbi55IC0gdDAudHJhbnNsYXRpb24ueSwgMikgKyBNYXRoLnBvdyh0MS50cmFuc2xhdGlvbi56IC0gdDAudHJhbnNsYXRpb24ueiwgMikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGRSb3QgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodDEucm90YXRpb24gJiYgdDAucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRSb3QgPSBNYXRoLnNxcnQoTWF0aC5wb3codDEucm90YXRpb24ueCAtIHQwLnJvdGF0aW9uLngsIDIpICsgTWF0aC5wb3codDEucm90YXRpb24ueSAtIHQwLnJvdGF0aW9uLnksIDIpICsgTWF0aC5wb3codDEucm90YXRpb24ueiAtIHQwLnJvdGF0aW9uLnosIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBkU2NhbGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodDEuc2NhbGUgJiYgdDAuc2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRTY2FsZSA9IE1hdGguc3FydChNYXRoLnBvdyh0MS5zY2FsZS54IC0gdDAuc2NhbGUueCwgMikgKyBNYXRoLnBvdyh0MS5zY2FsZS55IC0gdDAuc2NhbGUueSwgMikgKyBNYXRoLnBvdyh0MS5zY2FsZS56IC0gdDAuc2NhbGUueiwgMikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuYW5pbWF0aW9uc1tkXS5hbmltYXRpb24udHJhY2tzW3RyYWNrXVtjXS50cmFuc2Zvcm0uZGVsdGFzID0geyBwb3NpdGlvbjogZFBvcywgcm90YXRpb246IGRSb3QsIHNjYWxpbmc6IGRTY2FsZSB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnJvdGF0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5yb3RhdGlvbi5taW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucm90YXRpb24ubWF4ID0gZFJvdDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5yb3RhdGlvbi5taW4gPiBkUm90KSB7IHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnJvdGF0aW9uLm1pbiA9IGRSb3Q7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5yb3RhdGlvbi5tYXggPCBkUm90KSB7IHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnJvdGF0aW9uLm1heCA9IGRSb3Q7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnBvc2l0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5wb3NpdGlvbi5taW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucG9zaXRpb24ubWF4ID0gZFBvcztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5wb3NpdGlvbi5taW4gPiBkUG9zKSB7IHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnBvc2l0aW9uLm1pbiA9IGRQb3M7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5wb3NpdGlvbi5tYXggPCBkUG9zKSB7IHRoaXMuZGVsdGFSYW5nZXNbdHJhY2tdLnBvc2l0aW9uLm1heCA9IGRQb3M7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZy5taW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZy5tYXggPSBkU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZy5taW4gPiBkU2NhbGUpIHsgdGhpcy5kZWx0YVJhbmdlc1t0cmFja10uc2NhbGluZy5taW4gPSBkU2NhbGU7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5zY2FsaW5nLm1heCA8IGRTY2FsZSkgeyB0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5zY2FsaW5nLm1heCA9IGRTY2FsZTsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGZpcnN0IHRyYWNrIGhhcyBubyBkZWx0YSwgc28gZ2l2ZSBpdCBtYXhpbXVtIGRlbHRhXG4gICAgICAgICAgICAgICAgdGltZWxpbmUuYW5pbWF0aW9uc1tkXS5hbmltYXRpb24udHJhY2tzW3RyYWNrXVswXS50cmFuc2Zvcm0uZGVsdGFzID0ge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucG9zaXRpb24ubWF4LFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogdGhpcy5kZWx0YVJhbmdlc1t0cmFja10ucm90YXRpb24ubWF4LFxuICAgICAgICAgICAgICAgICAgICBzY2FsaW5nOiB0aGlzLmRlbHRhUmFuZ2VzW3RyYWNrXS5zY2FsaW5nLm1heFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25UaW1lbGluZVNjcm9sbChldmVudCkge1xuICAgICAgICB0aGlzLmRvbS5heGlzbGFiZWwuc2Nyb2xsTGVmdCA9IHRoaXMuZG9tLmNvbnRhaW5lci5zY3JvbGxMZWZ0O1xuXG4gICAgICAgIGxldCBsYWJlbHMgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJy50cmFjay1sYWJlbCcpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGxhYmVscy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGFiZWxzW2NdLnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5kb20uY29udGFpbmVyLnNjcm9sbExlZnQgKyB0aGlzLmtleWZyYW1lU2l6ZS53aWR0aCArIDE1ICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhbmltaGVhZGVycyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1hdGlvbi1oZWFkZXIgc3BhbicpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGFuaW1oZWFkZXJzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBhbmltaGVhZGVyc1tjXS5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMuZG9tLmNvbnRhaW5lci5zY3JvbGxMZWZ0ICsgNSArICdweCc7XG4gICAgICAgICAgICBhbmltaGVhZGVyc1tjXS5wYXJlbnROb2RlLnN0eWxlLndpZHRoID0gdGhpcy50aW1lbGluZS5kdXJhdGlvbiAqIHRoaXMucGl4ZWxzUGVyU2Vjb25kICsgdGhpcy5rZXlmcmFtZVNpemUud2lkdGggLSAxNSArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHJhY2tzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcudGltZWxpbmUtdHJhY2snKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0cmFja3MubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRyYWNrc1tjXS5zdHlsZS53aWR0aCA9IHRoaXMudGltZWxpbmUuZHVyYXRpb24gKiB0aGlzLnBpeGVsc1BlclNlY29uZCArIHRoaXMua2V5ZnJhbWVTaXplLndpZHRoICsgNSArICdweCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25ab29tKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucGl4ZWxzUGVyU2Vjb25kID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLl9kcmF3VGltZWxpbmVMYWJlbCgpO1xuXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy50aW1lbGluZS5hbmltYXRpb25zLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB0cmFjayBpbiB0aGlzLnRpbWVsaW5lLmFuaW1hdGlvbnNbY10uYW5pbWF0aW9uLnRyYWNrcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdUcmFjayhjLCB0cmFjaywgdGhpcy50aW1lbGluZS5hbmltYXRpb25zW2NdLmFuaW1hdGlvbi50cmFja3NbdHJhY2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vblRpbWVsaW5lU2Nyb2xsKCk7IC8vIG5lZWQgdHJhY2sgcmVzaXppbmdcbiAgICB9XG5cbiAgICBfb25UcmFja0NsaWNrKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVHJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUcmFjay5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUcmFjayA9PT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRyYWNrID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkVHJhY2sgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICB0aGlzLnNlbGVjdGVkVHJhY2suY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcblxuICAgICAgICBsZXQgZSA9IG5ldyBDdXN0b21FdmVudChBbmltYXRpb25UaW1lbGluZS5UUkFDS19TRUxFQ1RFRCwgeyAnZGV0YWlsJzogeyBuYW1lOiBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubmFtZSB9IH0pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgfVxuXG4gICAgX29uVHJhY2tWaXNpYmlsaXR5Q2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGxldCB2aXNpYmxlO1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnb24nKSkge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ29uJyk7XG4gICAgICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnb2ZmJyk7XG4gICAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnb2ZmJyk7XG4gICAgICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnb24nKTtcbiAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGUgPSBuZXcgQ3VzdG9tRXZlbnQoQW5pbWF0aW9uVGltZWxpbmUuVFJBQ0tfUExBWUJBQ0tfQ0hBTkdFRCwge1xuICAgICAgICAgICAgJ2RldGFpbCc6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmRhdGFzZXQubmFtZSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICAgICAgICAgIHBsYXliYWNrdGltZTogdGhpcy5yZWxhdGl2ZVRpbWUgLyB0aGlzLnRpbWVsaW5lLmR1cmF0aW9uXG4gICAgICAgICAgICB9fSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG5cbiAgICBfb25UcmFja0hvdmVyKGV2ZW50KSB7XG4gICAgICAgIGxldCB0aW1lID0gKGV2ZW50Lm9mZnNldFggLSB0aGlzLmtleWZyYW1lU2l6ZS53aWR0aCkgLyB0aGlzLnBpeGVsc1BlclNlY29uZDtcbiAgICAgICAgbGV0IHRyYWNrID0gdGhpcy50aW1lbGluZS5hbmltYXRpb25zW3BhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hbmltYXRpb24pXS5hbmltYXRpb24udHJhY2tzW2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5uYW1lXTtcbiAgICAgICAgbGV0IHRpbWVJbmRleDtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0cmFjay5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRyYWNrW2NdLnRpbWUgPj0gdGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluZm8udGltZS5pbm5lclRleHQgPSB0cmFja1tjXS50aW1lLnRvRml4ZWQoMyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kb20uaW5mby5mcmFtZS5pbm5lclRleHQgPSAoYysxKSArICcgLyAnICsgdHJhY2subGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrW2NdLnRyYW5zZm9ybS50cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5pbmZvLnBvc2l0aW9uLnguaW5uZXJUZXh0ID0gdHJhY2tbY10udHJhbnNmb3JtLnRyYW5zbGF0aW9uLngudG9GaXhlZCgzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uaW5mby5wb3NpdGlvbi55LmlubmVyVGV4dCA9IHRyYWNrW2NdLnRyYW5zZm9ybS50cmFuc2xhdGlvbi55LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluZm8ucG9zaXRpb24uei5pbm5lclRleHQgPSB0cmFja1tjXS50cmFuc2Zvcm0udHJhbnNsYXRpb24uei50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5pbmZvLnBvc2l0aW9uLmQuaW5uZXJUZXh0ID0gdHJhY2tbY10udHJhbnNmb3JtLmRlbHRhcy5wb3NpdGlvbi50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFySW5mb1ZhbHVlcygncG9zaXRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHJhY2tbY10udHJhbnNmb3JtLnJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluZm8ucm90YXRpb24ueC5pbm5lclRleHQgPSB0cmFja1tjXS50cmFuc2Zvcm0ucm90YXRpb24ueC50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5pbmZvLnJvdGF0aW9uLnkuaW5uZXJUZXh0ID0gdHJhY2tbY10udHJhbnNmb3JtLnJvdGF0aW9uLnkudG9GaXhlZCgzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uaW5mby5yb3RhdGlvbi56LmlubmVyVGV4dCA9IHRyYWNrW2NdLnRyYW5zZm9ybS5yb3RhdGlvbi56LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluZm8ucm90YXRpb24uZC5pbm5lclRleHQgPSB0cmFja1tjXS50cmFuc2Zvcm0uZGVsdGFzLnJvdGF0aW9uLnRvRml4ZWQoMyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJJbmZvVmFsdWVzKCdyb3RhdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0cmFja1tjXS50cmFuc2Zvcm0uc2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uaW5mby5zY2FsZS54LmlubmVyVGV4dCA9IHRyYWNrW2NdLnRyYW5zZm9ybS5zY2FsZS54LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluZm8uc2NhbGUueS5pbm5lclRleHQgPSB0cmFja1tjXS50cmFuc2Zvcm0uc2NhbGUueS50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5pbmZvLnNjYWxlLnouaW5uZXJUZXh0ID0gdHJhY2tbY10udHJhbnNmb3JtLnNjYWxlLnoudG9GaXhlZCgzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uaW5mby5zY2FsZS5kLmlubmVyVGV4dCA9IHRyYWNrW2NdLnRyYW5zZm9ybS5kZWx0YXMuc2NhbGluZy50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFySW5mb1ZhbHVlcygnc2NhbGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uTGFiZWxUcmFja01vdXNlRG93bihldmVudCkge1xuICAgICAgIHRoaXMuX2RyYWdnaW5nUGxheWhlYWQgPSB0cnVlO1xuICAgIH1cblxuICAgIF9vbkxhYmVsVHJhY2tNb3VzZVVwKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9kcmFnZ2luZ1BsYXloZWFkKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnZ2luZ1BsYXloZWFkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgYm91bmRzID0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX3NjcnViVGltZWxpbmUoZXZlbnQuY2xpZW50WCAtIGJvdW5kcy5sZWZ0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkxhYmVsVHJhY2tNb3VzZU1vdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdnaW5nUGxheWhlYWQpIHtcbiAgICAgICAgICAgIGxldCBib3VuZHMgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5fc2NydWJUaW1lbGluZShldmVudC5jbGllbnRYIC0gYm91bmRzLmxlZnQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zY3J1YlRpbWVsaW5lKHBvc1gsIGVuZHNjcnViKSB7XG4gICAgICAgIGxldCBib3VuZHMgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocG9zWCA+IHRoaXMudGltZWxpbmVXaWR0aCkge1xuICAgICAgICAgICAgcG9zWCA9IHRoaXMudGltZWxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRvbS5wbGF5YmFja0xpbmUuc3R5bGUubGVmdCA9IHBvc1ggKyAncHgnO1xuICAgICAgICB0aGlzLmRvbS5wbGF5YmFja0hlYWQuc3R5bGUubGVmdCA9IHBvc1ggLSA3ICsgJ3B4JztcblxuICAgICAgICBsZXQgdGltZSA9IChwb3NYLTEpIC8gdGhpcy5waXhlbHNQZXJTZWNvbmQ7XG4gICAgICAgIGlmICh0aW1lIDwgMCkge1xuICAgICAgICAgICAgdGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWUgPiB0aGlzLnRpbWVsaW5lLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gdGhpcy50aW1lbGluZS5kdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KEFuaW1hdGlvblRpbWVsaW5lLlNDUlVCX1RJTUVMSU5FLCB7XG4gICAgICAgICAgICAnZGV0YWlsJzoge1xuICAgICAgICAgICAgICAgIHJlc3VtZXBsYXliYWNrOiBlbmRzY3J1YixcbiAgICAgICAgICAgICAgICBwbGF5YmFja3RpbWU6IHRpbWUsXG4gICAgICAgICAgICAgICAgcGxheWJhY2tyYXRpbzogdGltZSAvIHRoaXMudGltZWxpbmUuZHVyYXRpb25cbiAgICAgICAgICAgIH19KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGUpO1xuICAgIH1cblxuICAgIF9jbGVhckluZm9WYWx1ZXModHJhbnNmb3JtVHlwZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1UeXBlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVR5cGVzID0gW3RyYW5zZm9ybVR5cGVzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdHJhbnNmb3JtVHlwZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuZG9tLmluZm9bdHJhbnNmb3JtVHlwZXNdLnguaW5uZXJUZXh0ID0gJy0nO1xuICAgICAgICAgICAgdGhpcy5kb20uaW5mb1t0cmFuc2Zvcm1UeXBlc10ueS5pbm5lclRleHQgPSAnLSc7XG4gICAgICAgICAgICB0aGlzLmRvbS5pbmZvW3RyYW5zZm9ybVR5cGVzXS56LmlubmVyVGV4dCA9ICctJztcbiAgICAgICAgICAgIHRoaXMuZG9tLmluZm9bdHJhbnNmb3JtVHlwZXNdLmQuaW5uZXJUZXh0ID0gJy0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7fVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSkge31cbiAgICBhZG9wdGVkQ2FsbGJhY2sob2xkRG9jdW1lbnQsIG5ld0RvY3VtZW50KSB7fVxufVxuQW5pbWF0aW9uVGltZWxpbmUuVFJBQ0tfU0VMRUNURUQgPSAnb25UcmFja1NlbGVjdGVkJztcbkFuaW1hdGlvblRpbWVsaW5lLlNDUlVCX1RJTUVMSU5FID0gJ29uU2NydWJUaW1lbGluZSc7XG5BbmltYXRpb25UaW1lbGluZS5UUkFDS19QTEFZQkFDS19DSEFOR0VEID0gJ29uVHJhY2tQbGF5YmFja0NoYW5nZWQnO1xuXG5pZiAoIWN1c3RvbUVsZW1lbnRzLmdldCgnYXZpei10aW1lbGluZScpKSB7XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhdml6LXRpbWVsaW5lJywgQW5pbWF0aW9uVGltZWxpbmUpO1xufVxuXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJ0aW1lbGluZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lbGluZS12aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lbGluZS10aW1lbGFiZWxzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aWNrLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcz48L2NhbnZhcz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbGF5YmFjay1oZWFkXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ6b29tXCIgbWluPVwiMjBcIiBtYXg9XCIxMDAwXCIgdmFsdWU9XCIyMDBcIiB0eXBlPVwicmFuZ2VcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImtleWZyYW1lLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJ0aW1lXCI+VGltZTogPHNwYW4gY2xhc3M9XCJ2YWxcIj4tPC9zcGFuPjwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImZyYW1lXCI+RnJhbWU6IDxzcGFuIGNsYXNzPVwidmFsXCI+LS8tPC9zcGFuPjwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0gcG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PlBvc2l0aW9uPC9oND5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImF4aXNcIj48c3BhbiBjbGFzcz1cImxhYmVsXCI+eDwvc3Bhbj48c3BhbiBjbGFzcz1cIngtdmFsXCI+LTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImF4aXNcIj48c3BhbiBjbGFzcz1cImxhYmVsXCI+eTwvc3Bhbj48c3BhbiBjbGFzcz1cInktdmFsXCI+LTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImF4aXNcIj48c3BhbiBjbGFzcz1cImxhYmVsXCI+ejwvc3Bhbj48c3BhbiBjbGFzcz1cInotdmFsXCI+LTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImF4aXNcIj48c3BhbiBjbGFzcz1cImxhYmVsXCI+XFx1MjVCMjwvc3Bhbj48c3BhbiBjbGFzcz1cImQtdmFsXCI+LTwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbSByb3RhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+Um90YXRpb248L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXhpc1wiPjxzcGFuIGNsYXNzPVwibGFiZWxcIj54PC9zcGFuPjxzcGFuIGNsYXNzPVwieC12YWxcIj4tPC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXhpc1wiPjxzcGFuIGNsYXNzPVwibGFiZWxcIj55PC9zcGFuPjxzcGFuIGNsYXNzPVwieS12YWxcIj4tPC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXhpc1wiPjxzcGFuIGNsYXNzPVwibGFiZWxcIj56PC9zcGFuPjxzcGFuIGNsYXNzPVwiei12YWxcIj4tPC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXhpc1wiPjxzcGFuIGNsYXNzPVwibGFiZWxcIj5cXHUyNUIyPC9zcGFuPjxzcGFuIGNsYXNzPVwiZC12YWxcIj4tPC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtIHNjYWxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND5TY2FsZTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+PHNwYW4gY2xhc3M9XCJsYWJlbFwiPng8L3NwYW4+PHNwYW4gY2xhc3M9XCJ4LXZhbFwiPi08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+PHNwYW4gY2xhc3M9XCJsYWJlbFwiPnk8L3NwYW4+PHNwYW4gY2xhc3M9XCJ5LXZhbFwiPi08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+PHNwYW4gY2xhc3M9XCJsYWJlbFwiPno8L3NwYW4+PHNwYW4gY2xhc3M9XCJ6LXZhbFwiPi08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+PHNwYW4gY2xhc3M9XCJsYWJlbFwiPlxcdTI1QjI8L3NwYW4+PHNwYW4gY2xhc3M9XCJkLXZhbFwiPi08L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuICAgIH1cbn1cbiIsIi8vIGxvdHMgb2YgYXBwcm9hY2ggaW4gYmluYXJ5IHByb2Nlc3NpbmcgaGVyZSBzdG9sZW4gZnJvbSBCYWJ5bG9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vQmFieWxvbkpTL0JhYnlsb24uanMvdHJlZS9tYXN0ZXIvbG9hZGVycy9zcmMvZ2xURi8yLjBcblxuLy8gT25seSBzdXBwb3J0cyBtYXNoaW5nIHRoZSBhbmltYXRpb24gYnVmZmVyIHBpZWNlcyBpbnRvIHRoZSBHTFRGIG9iamVjdCBmb3Igbm93XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZXhwbG9kZShnbHRmKSB7XG4gICAgICAgIGZvciAobGV0IGYgPSAwOyBmIDwgZ2x0Zi5ub2Rlcy5sZW5ndGg7IGYrKykge1xuICAgICAgICAgICAgaWYgKCFnbHRmLm5vZGVzW2ZdLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBnbHRmLm5vZGVzW2ZdLm5hbWUgPSAnTm9kZSAnICsgTnVtYmVyKGYrMSkgKyAnICh1bm5hbWVkKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBnbHRmLmFuaW1hdGlvbnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIC8vIHdpcmUgc2FtcGxlciByZWZlcmVuY2VzIHdpdGhpbiBjaGFubmVscyBmb3IgZWFzeSBhY2Nlc3NcbiAgICAgICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgZ2x0Zi5hbmltYXRpb25zW2NdLmNoYW5uZWxzLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgZ2x0Zi5hbmltYXRpb25zW2NdLmNoYW5uZWxzW2RdLl9zYW1wbGVyUmVmID0gZ2x0Zi5hbmltYXRpb25zW2NdLnNhbXBsZXJzW2dsdGYuYW5pbWF0aW9uc1tjXS5jaGFubmVsc1tkXS5zYW1wbGVyXTtcbiAgICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHNbZF0uX3NhbXBsZXJSZWYuX2NoYW5uZWxSZWYgPSBnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHNbZF07XG4gICAgICAgICAgICAgICAgZ2x0Zi5hbmltYXRpb25zW2NdLmNoYW5uZWxzW2RdLnRhcmdldC5fbm9kZVJlZiA9IGdsdGYubm9kZXNbZ2x0Zi5hbmltYXRpb25zW2NdLmNoYW5uZWxzW2RdLnRhcmdldC5ub2RlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZ2V0IGFjY2Vzc29yIHJlZmVyZW5jZXMgZm9yIHNhbXBsZXJzIGFuZCByZXNvbHZlIGRhdGEgZnJvbSBidWZmZXJcbiAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgZ2x0Zi5hbmltYXRpb25zW2NdLnNhbXBsZXJzLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX2lucHV0UmVmID0gZ2x0Zi5hY2Nlc3NvcnNbZ2x0Zi5hbmltYXRpb25zW2NdLnNhbXBsZXJzW2VdLmlucHV0XTtcblxuICAgICAgICAgICAgICAgLy8gZm9yIGFuaW1hdGlvbiwgaW5wdXQgcmVmZXJzIHRvIGtleWZyYW1lIHRpbWVzXG4gICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX2lucHV0VmFsdWVzID0gdGhpcy5fcmVzb2x2ZUFuaW1hdGlvblNhbXBsZXJEYXRhKCdrZXlmcmFtZXMnLCBnbHRmLCBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX2lucHV0UmVmKTtcblxuXG4gICAgICAgICAgICAgICAvLyBvdXRwdXQgcmVmZXJzIHRvIHNjYWxlLCByb3RhdGUsIG9yIHRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgZ2x0Zi5hbmltYXRpb25zW2NdLnNhbXBsZXJzW2VdLl9vdXRwdXRSZWYgPSBnbHRmLmFjY2Vzc29yc1tnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0ub3V0cHV0XTtcbiAgICAgICAgICAgICAgIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5fb3V0cHV0UmVmLl9idWZmZXJWaWV3UmVmID0gZ2x0Zi5idWZmZXJWaWV3c1tnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX291dHB1dFJlZi5idWZmZXJWaWV3XTtcblxuICAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybVR5cGUgPSBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX2NoYW5uZWxSZWYudGFyZ2V0LnBhdGg7XG4gICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX291dHB1dFZhbHVlcyA9IHRoaXMuX3Jlc29sdmVBbmltYXRpb25TYW1wbGVyRGF0YSh0cmFuc2Zvcm1UeXBlLCBnbHRmLCBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX291dHB1dFJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsdGY7XG4gICAgfSxcblxuICAgIF9yZXNvbHZlQW5pbWF0aW9uU2FtcGxlckRhdGEodHlwZSwgZ2x0Ziwgc2FtcGxlckRhdGEpIHtcbiAgICAgICAgbGV0IGJ1ZmZlclZpZXcgPSBnbHRmLmJ1ZmZlclZpZXdzW3NhbXBsZXJEYXRhLmJ1ZmZlclZpZXddO1xuICAgICAgICBsZXQgYnVmZmVyID0gZ2x0Zi5idWZmZXJzW2J1ZmZlclZpZXcuYnVmZmVyXS5kYXRhO1xuXG4gICAgICAgIC8vIG1hcCBidWZmZXJWaWV3IHRvIGFjdHVhbCBtZW0gcmVmXG4gICAgICAgIHNhbXBsZXJEYXRhLl9idWZmZXJWaWV3UmVmID0gYnVmZmVyVmlldztcblxuICAgICAgICBsZXQgYnl0ZU9mZnNldCA9IGJ1ZmZlclZpZXcuYnl0ZU9mZnNldDtcbiAgICAgICAgaWYgKHNhbXBsZXJEYXRhLmJ5dGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gc2FtcGxlckRhdGEuYnl0ZU9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYnl0ZUxlbmd0aCA9IHNhbXBsZXJEYXRhLmNvdW50ICogdGhpcy5fZ2V0Qnl0ZVN0cmlkZUZyb21UeXBlKHNhbXBsZXJEYXRhKTtcbiAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuX3BhcnNlQnVmZmVyRGF0YShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgsIHNhbXBsZXJEYXRhLmNvbXBvbmVudFR5cGUpO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1zID0gW107XG4gICAgICAgICAgICBsZXQgdmVjO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHZhbHVlcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY291bnRlcikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goe30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjID0gdHJhbnNmb3Jtc1t0cmFuc2Zvcm1zLmxlbmd0aC0xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYy54ID0gdmFsdWVzW2NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlciArKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYy55ID0gdmFsdWVzW2NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlciArKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYy56ID0gdmFsdWVzW2NdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyICsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdyb3RhdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYy53ID0gdmFsdWVzW2NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtcztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZ2V0Qnl0ZVN0cmlkZUZyb21UeXBlKGFjY2Vzc29yKSB7XG4gICAgICAgIHN3aXRjaCAoYWNjZXNzb3IudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIlNDQUxBUlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgY2FzZSBcIlZFQzJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIGNhc2UgXCJWRUMzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICBjYXNlIFwiVkVDNFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgICAgY2FzZSBcIk1BVDJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gNDtcbiAgICAgICAgICAgIGNhc2UgXCJNQVQzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgICAgICBjYXNlIFwiTUFUNFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAxNjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiSW52YWxpZCBhY2Nlc3NvciB0eXBlIChcIiArIGFjY2Vzc29yLnR5cGUgKyBcIilcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3BhcnNlQnVmZmVyRGF0YShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgsIGNvbXBvbmVudFR5cGUpIHtcbiAgICAgICAgbGV0IGJ1ZmZlclZpZXdEYXRhO1xuICAgICAgICBzd2l0Y2ggKGNvbXBvbmVudFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5FQ29tcG9uZW50VHlwZS5CWVRFOlxuICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXdEYXRhID0gbmV3IEludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLlVOU0lHTkVEX0JZVEU6XG4gICAgICAgICAgICAgICAgYnVmZmVyVmlld0RhdGEgPSBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLlNIT1JUOlxuICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXdEYXRhID0gbmV3IEludDE2QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5FQ29tcG9uZW50VHlwZS5VTlNJR05FRF9TSE9SVDpcbiAgICAgICAgICAgICAgICBidWZmZXJWaWV3RGF0YSA9IG5ldyBVaW50MTZBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLlVOU0lHTkVEX0lOVDpcbiAgICAgICAgICAgICAgICBidWZmZXJWaWV3RGF0YSA9IG5ldyBVaW50MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLkZMT0FUOlxuICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXdEYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNvbXBvbmVudCB0eXBlIChcIiArIGNvbXBvbmVudFR5cGUgKyBcIilcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXJWaWV3RGF0YTtcbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVUaW1lbGluZShnbHRmQW5pbXMpIHtcbiAgICAgICAgbGV0IHN0YXJ0O1xuICAgICAgICBsZXQgZW5kO1xuICAgICAgICBsZXQgdGltZWxpbmUgPSB7IGFuaW1hdGlvbnM6IFtdIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgZ2x0ZkFuaW1zLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgdHJhY2tzID0gdGhpcy5fZ2VuZXJhdGVUcmFja3NGb3JBbmltYXRpb24oZ2x0ZkFuaW1zW2NdKTtcbiAgICAgICAgICAgIGlmICghc3RhcnQgfHwgc3RhcnQgPiB0cmFja3Muc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRyYWNrcy5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZW5kIHx8IGVuZCA8IHRyYWNrcy5lbmQpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSB0cmFja3MuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGltZWxpbmUuYW5pbWF0aW9ucy5wdXNoKHsgYW5pbWF0aW9uOiB0cmFja3MgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lbGluZS5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aW1lbGluZS5lbmQgPSBlbmQ7XG4gICAgICAgIHRpbWVsaW5lLmR1cmF0aW9uID0gZW5kIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiB0aW1lbGluZTtcbiAgICB9LFxuXG4gICAgX2dlbmVyYXRlVHJhY2tzRm9yQW5pbWF0aW9uKGFuaW1hdGlvbikge1xuICAgICAgICBsZXQgdHJhY2tzID0ge307XG4gICAgICAgIGxldCBzdGFydFRpbWUgPSAtMTtcbiAgICAgICAgbGV0IGVuZFRpbWUgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBhbmltYXRpb24uY2hhbm5lbHMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGlmICghdHJhY2tzW2FuaW1hdGlvbi5jaGFubmVsc1tjXS50YXJnZXQuX25vZGVSZWYubmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0cmFja3NbYW5pbWF0aW9uLmNoYW5uZWxzW2NdLnRhcmdldC5fbm9kZVJlZi5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY3VycmVudENoYW5uZWwgPSB0cmFja3NbYW5pbWF0aW9uLmNoYW5uZWxzW2NdLnRhcmdldC5fbm9kZVJlZi5uYW1lXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBhbmltYXRpb24uY2hhbm5lbHNbY10uX3NhbXBsZXJSZWYuX2lucHV0VmFsdWVzLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRpbWUgPSBhbmltYXRpb24uY2hhbm5lbHNbY10uX3NhbXBsZXJSZWYuX2lucHV0VmFsdWVzW2RdO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydFRpbWUgPT09IC0xIHx8IHRpbWUgPCBzdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVuZFRpbWUgPT09IC0xIHx8IHRpbWUgPiBlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBrZXlmcmFtZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGN1cnJlbnRDaGFubmVsLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2hhbm5lbFtlXS50aW1lID09PSB0aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZSA9IGN1cnJlbnRDaGFubmVsW2VdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgha2V5ZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWUgPSB7IHRpbWU6IHRpbWUsIHRyYW5zZm9ybToge30sIG5hbWU6IGFuaW1hdGlvbi5jaGFubmVsc1tjXS50YXJnZXQuX25vZGVSZWYubmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhbm5lbC5wdXNoKGtleWZyYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtVHlwZSA9IGFuaW1hdGlvbi5jaGFubmVsc1tjXS50YXJnZXQucGF0aDtcbiAgICAgICAgICAgICAgICBrZXlmcmFtZS50cmFuc2Zvcm1bdHJhbnNmb3JtVHlwZV0gPSBhbmltYXRpb24uY2hhbm5lbHNbY10uX3NhbXBsZXJSZWYuX291dHB1dFZhbHVlc1tkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydFRpbWUsIGVuZDogZW5kVGltZSwgZHVyYXRpb246IGVuZFRpbWUtc3RhcnRUaW1lLCB0cmFja3M6IHRyYWNrcyB9O1xuICAgIH0sXG5cbiAgICBFQ29tcG9uZW50VHlwZToge1xuICAgICAgICBCWVRFOiA1MTIwLFxuICAgICAgICBVTlNJR05FRF9CWVRFOiA1MTIxLFxuICAgICAgICBTSE9SVDogNTEyMixcbiAgICAgICAgVU5TSUdORURfU0hPUlQ6IDUxMjMsXG4gICAgICAgIFVOU0lHTkVEX0lOVDogNTEyNSxcbiAgICAgICAgRkxPQVQ6IDUxMjZcbiAgICB9XG59XG4iLCJpbXBvcnQgR0xURkV4cGxvZGVyIGZyb20gJy4vZ2x0ZmV4cGxvZGVyLmpzJztcbmltcG9ydCBFdmVudExpc3RlbmVyIGZyb20gJy4uLy4uL25vZGVfbW9kdWxlcy9tYWNneXZyL3NyYy91dGlscy9ldmVudGxpc3RlbmVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xURkZpbGVMb2FkZXIgZXh0ZW5kcyBFdmVudExpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5idWZmZXJEaWN0aW9uYXJ5ID0ge307XG4gICAgICAgIHRoaXMuYnVmZmVyQ291bnQgPSAwO1xuICAgIH1cblxuICAgIGxvYWRMb2NhbChmaWxlcmVmcykge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGZpbGVyZWZzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBmaWxlcmVmc1tjXS5uYW1lO1xuICAgICAgICAgICAgaWYgKGZpbGVuYW1lLnNwbGl0KCcuJylbZmlsZW5hbWUuc3BsaXQoJy4nKS5sZW5ndGgtMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JpbicpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlckNvdW50ICsrO1xuICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkJpbkxvYWRlZChmaWxlbmFtZSwgZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZXJlZnNbY10pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlbmFtZS5zcGxpdCgnLicpW2ZpbGVuYW1lLnNwbGl0KCcuJykubGVuZ3RoLTFdLnRvTG93ZXJDYXNlKCkgPT09ICdnbHRmJykge1xuICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkdMVEZMb2FkZWQoZmlsZW5hbWUsIGUpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlcmVmc1tjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkUmVtb3RlKHBhdGgpIHtcbiAgICAgICAgdGhpcy5fZmlsZW5hbWUgPSBwYXRoLnNwbGl0KCcvJylbcGF0aC5zcGxpdCgnLycpLmxlbmd0aC0xXTtcbiAgICAgICAgdGhpcy5fYmFzZXBhdGggPSBwYXRoLnN1YnN0cigwLCBwYXRoLmluZGV4T2YodGhpcy5fZmlsZW5hbWUpKTtcbiAgICAgICAgbGV0IGxvYWRlciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICBsb2FkZXIub3BlbignR0VUJywgcGF0aCwgdHJ1ZSk7XG4gICAgICAgIGxvYWRlci5vbmxvYWQgPSBkYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2x0ZiA9IEpTT04ucGFyc2UobG9hZGVyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVycyA9IHRoaXMuZ2x0Zi5idWZmZXJzO1xuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlckNvdW50ICsrO1xuICAgICAgICAgICAgICAgIGxldCBsb2FkZXIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICBsb2FkZXIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgICAgICBsb2FkZXIub3BlbignR0VUJywgdGhpcy5fYmFzZXBhdGggKyB0aGlzLmJ1ZmZlcnNbY10udXJpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBsb2FkZXIub25sb2FkID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25CaW5Mb2FkZWQodGhpcy5idWZmZXJzW2NdLnVyaSwgZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsb2FkZXIuc2VuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsb2FkZXIuc2VuZCgpO1xuICAgIH1cblxuICAgIG9uR0xURkxvYWRlZChmaWxlbmFtZSwgZSkge1xuICAgICAgICB0aGlzLmdsdGYgPSBKU09OLnBhcnNlKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgIGxldCBsb2FkZWQgPSB0aGlzLmNoZWNrTG9hZGVkRmlsZXMoKTtcbiAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5vbkxvYWRDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25CaW5Mb2FkZWQoZmlsZW5hbWUsIGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJEaWN0aW9uYXJ5W2ZpbGVuYW1lXSA9IGUudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5yZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJEaWN0aW9uYXJ5W2ZpbGVuYW1lXSA9IGUudGFyZ2V0LnJlc3BvbnNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZpbGVuYW1lICsgJyBjYW5ub3QgYmUgbG9hZGVkJywgZS50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsb2FkZWQgPSB0aGlzLmNoZWNrTG9hZGVkRmlsZXMoKTtcbiAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5vbkxvYWRDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Mb2FkQ29tcGxldGUoKSB7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5nbHRmLmJ1ZmZlcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuZ2x0Zi5idWZmZXJzW2NdLmRhdGEgPSB0aGlzLmJ1ZmZlckRpY3Rpb25hcnlbdGhpcy5nbHRmLmJ1ZmZlcnNbY10udXJpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2x0ZiA9IEdMVEZFeHBsb2Rlci5leHBsb2RlKHRoaXMuZ2x0Zik7XG4gICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KEdMVEZGaWxlTG9hZGVyLkxPQURFRCwgeyBnbHRmOiB0aGlzLmdsdGYgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tMb2FkZWRGaWxlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2x0ZiAmJiB0aGlzLmJ1ZmZlckNvdW50ID09PSBPYmplY3Qua2V5cyh0aGlzLmJ1ZmZlckRpY3Rpb25hcnkpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkdMVEZGaWxlTG9hZGVyLkxPQURFRCA9ICdvbkdMVEZMb2FkZWQnO1xuIiwiaW1wb3J0IEJhc2VHcm91cCBmcm9tICcuLi8uLi9ub2RlX21vZHVsZXMvbWFjZ3l2ci9zcmMvYmFzZWdyb3VwLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xURk9iamVjdCBleHRlbmRzIEJhc2VHcm91cCB7XG4gICAgLyoqXG4gICAgICogb24gY3JlYXRlIHNjZW5lXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIHNjZW5laW5mb1xuICAgICAqL1xuICAgIG9uQ3JlYXRlKHNjZW5lLCBzY2VuZWluZm8pIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9jdXJyZW50VGltZSA9IDA7XG4gICAgICAgIEJBQllMT04uU2NlbmVMb2FkZXIuU2hvd0xvYWRpbmdTY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlUmlnaHRIYW5kZWRDb29yZGluYXRlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZpbGVzSW5wdXQgPSBuZXcgQkFCWUxPTi5GaWxlc0lucHV0KHRoaXMuZW5naW5lLCB0aGlzLnNjZW5lLCB0aGlzLmNhbnZhcywgKHNjZW5lZmlsZSwgc2NlbmUpID0+IHRoaXMub25TY2VuZUxvYWRlZChzY2VuZWZpbGUsIHNjZW5lKSk7XG4gICAgfVxuXG4gICAgc2V0IHVzZVJpZ2h0SGFuZGVkU3lzdGVtKHZhbCkge1xuICAgICAgICB0aGlzLl91c2VSaWdodEhhbmRlZENvb3JkaW5hdGVzID0gdmFsO1xuICAgICAgICB0aGlzLnNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gdmFsO1xuICAgIH1cblxuICAgIGxvYWQodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGxldCB1cmkgPSB2YWx1ZTtcbiAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IHVyaS5zcGxpdCgnLycpW3VyaS5zcGxpdCgnLycpLmxlbmd0aC0xXTtcbiAgICAgICAgICAgIGxldCBiYXNlcGF0aCA9IHVyaS5zdWJzdHIoMCwgdXJpLmluZGV4T2YoZmlsZW5hbWUpKTtcbiAgICAgICAgICAgIGxldCBsb2FkZXIgPSBuZXcgQkFCWUxPTi5Bc3NldHNNYW5hZ2VyKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgbG9hZGVyLnVzZURlZmF1bHRMb2FkaW5nU2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdGFzayA9IGxvYWRlci5hZGRNZXNoVGFzaygndGFzaycsICcnLCBiYXNlcGF0aCwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgdGFzay5vblN1Y2Nlc3MgPSBhc3NldCA9PiB0aGlzLm9uTWVzaGVzTG9hZGVkKGFzc2V0KTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZXZlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZmlsZXNJbnB1dC5sb2FkRmlsZXMoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25NZXNoZXNMb2FkZWQoYXNzZXQpIHtcbiAgICAgICAgdGhpcy5hZGQoYXNzZXQubG9hZGVkTWVzaGVzKTtcbiAgICAgICAgaWYgKHRoaXMuX3VzZVJpZ2h0SGFuZGVkQ29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAucm90YXRpb24ueCA9IE1hdGguUEkvMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAucm90YXRpb24ueCA9IC1NYXRoLlBJLzI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVwYXJlU2NlbmUodGhpcy5zY2VuZSk7XG4gICAgfVxuXG4gICAgb25TY2VuZUxvYWRlZChzY2VuZWZpbGUsIHNjZW5lKSB7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb24ucmVwbGFjZUFsbFNjZW5lcyhzY2VuZSk7XG4gICAgICAgIHRoaXMucHJlcGFyZVNjZW5lKHNjZW5lKTtcbiAgICB9XG5cbiAgICBwcmVwYXJlU2NlbmUoc2NlbmUpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGNhbWVyYSBmcm9tIHNjZW5lIHRvIGFkZCBvdXIgb3duXG4gICAgICAgIGlmIChzY2VuZS5hY3RpdmVDYW1lcmEpIHtcbiAgICAgICAgICAgIHNjZW5lLmFjdGl2ZUNhbWVyYS5kaXNwb3NlKCk7XG4gICAgICAgICAgICBzY2VuZS5hY3RpdmVDYW1lcmEgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NlbmUuY3JlYXRlRGVmYXVsdENhbWVyYU9yTGlnaHQodHJ1ZSk7XG4gICAgICAgIHNjZW5lLmFjdGl2ZUNhbWVyYS5hdHRhY2hDb250cm9sKHRoaXMuY2FudmFzKTtcblxuICAgICAgICBpZiAoc2NlbmUubGlnaHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5hcHBsaWNhdGlvbi5hZGRMaWdodHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhdXNlIGFsbCB0byBzdGFydCAtIGlmIHN5bmNocm9ub3VzLCB0aGUgc2NlbmUgZG9lc24ndCBzZWVtIHRvIHNob3cgdXBcbiAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHNjZW5lLkFuaW1hdGFibGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgc2NlbmUuQW5pbWF0YWJsZXNbY10uZ29Ub0ZyYW1lKDApO1xuICAgICAgICAgICAgICAgIHNjZW5lLkFuaW1hdGFibGVzW2NdLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDUwKTtcblxuICAgICAgICBsZXQgd29ybGRFeHRlbmRzID0gc2NlbmUuZ2V0V29ybGRFeHRlbmRzKCk7XG4gICAgICAgIGxldCBzY2VuZU1pZFBvaW50O1xuICAgICAgICBpZiAodGhpcy5fdXNlUmlnaHRIYW5kZWRDb29yZGluYXRlcykge1xuICAgICAgICAgICAgc2NlbmVNaWRQb2ludCA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoKHdvcmxkRXh0ZW5kcy5tYXgueCArIHdvcmxkRXh0ZW5kcy5taW4ueCkvMiwgKHdvcmxkRXh0ZW5kcy5tYXgueSArIHdvcmxkRXh0ZW5kcy5taW4ueSkvMiwgKHdvcmxkRXh0ZW5kcy5tYXgueiArIHdvcmxkRXh0ZW5kcy5taW4ueikvMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc2NlbmVNaWRQb2ludCA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoKHdvcmxkRXh0ZW5kcy5tYXgueCArIHdvcmxkRXh0ZW5kcy5taW4ueCkvMiwgKHdvcmxkRXh0ZW5kcy5tYXgueSArIHdvcmxkRXh0ZW5kcy5taW4ueSkvMiwgKHdvcmxkRXh0ZW5kcy5tYXgueiArIHdvcmxkRXh0ZW5kcy5taW4ueikvMik7XG4gICAgICAgIH1cbiAgICAgICAgc2NlbmUuYWN0aXZlQ2FtZXJhLnNldFRhcmdldCggc2NlbmVNaWRQb2ludCApO1xuICAgIH1cblxuICAgIHNldCBkdXJhdGlvbihkdXIpIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkdXI7XG4gICAgfVxuXG4gICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2V0IHRpbWUodCkge1xuICAgICAgICB0ID0gdCAlIHRoaXMuZHVyYXRpb247XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gdDtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLnNjZW5lLkFuaW1hdGFibGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLkFuaW1hdGFibGVzW2NdLmdvVG9GcmFtZSh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZVZpc2liaWxpdHkodmlzaWJsZSwgbmFtZSkge1xuICAgICAgICBsZXQgbWlsbGlzZWNvbmRzID0gdGhpcy5zY2VuZS5fYW5pbWF0aW9uVGltZTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLnNjZW5lLkFuaW1hdGFibGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAvL2xldCBmcmFtZVJhdGUgPSB0aGlzLnNjZW5lLkFuaW1hdGFibGVzW2NdLl9hbmltYXRpb25zWzBdLmZyYW1lUGVyU2Vjb25kO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUuQW5pbWF0YWJsZXNbY10udGFyZ2V0Lm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLkFuaW1hdGFibGVzW2NdLnJlc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5BbmltYXRhYmxlc1tjXS5nb1RvRnJhbWUoMTApXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5BbmltYXRhYmxlc1tjXS5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUmVuZGVyKGRlbHRhdGltZSkge31cbn1cbiJdfQ=="}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/macgyvr/src/baseapplication.js","node_modules/macgyvr/src/baseconfig.js","node_modules/macgyvr/src/basegroup.js","node_modules/macgyvr/src/utils/eventlistener.js","src/app.js","src/io/gltfexploder.js","src/io/gltffileloader.js","src/objects/gltfobject.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import BaseConfig from './baseconfig.js';\nimport BaseGroup from './basegroup.js';\n\nexport default class BaseApplication {\n    constructor(el, cfg) {\n        this.appConfig = BaseConfig.apply(cfg);\n        this.element = el;\n        this.engine = new BABYLON.Engine(this.element, this.appConfig.engine.antialias, this.appConfig.engine.options);\n        this.engine.enableOfflineSupport = false;\n        this.scene = new BABYLON.Scene(this.engine);\n        this.scene.useRightHandedSystem = this.appConfig.scene.useRightHandedSystem;\n\n        this.isApplication = true;\n        this.engine.runRenderLoop( () => this.tick() );\n\n        this.cameras = [];\n        this.lights = [];\n\n        if (this.appConfig.camera) {\n            this.addCamera(this.appConfig.camera.type, this.appConfig.camera.position);\n        }\n\n        if (this.appConfig.lights) {\n            this.addLights(this.appConfig.lights);\n        }\n\n        if (this.appConfig.inspector) {\n            document.addEventListener('keydown', e => this.onKeyDown(e) );\n        }\n        this.root = new BaseGroup();\n        this.root.parent = this;\n        this.root.initializeGroup(this.scene, 'application-root');\n        this.root.onParented(this.scene, this, this.element);\n        this.onCreate(this.scene);\n\n        window.addEventListener('resize', () => this.onResize());\n\n        this.initialized = true;\n    }\n\n    get canvas() { return this.element; }\n\n    get name() { return 'root'; }\n\n    /**\n     * convenience method to add a typical camera\n     */\n    addCamera(type, options) {\n        if (!type) {\n            type = 'freecamera';\n        }\n\n        if (!options.position) {\n            options.position = new BABYLON.Vector3(0, 0, 0);\n        }\n\n        let camera;\n        switch (type) {\n            case 'default':\n            case 'freecamera':\n                camera = new BABYLON.FreeCamera('camera', options.position, this.scene);\n                camera.setTarget(BABYLON.Vector3.Zero());\n                camera.attachControl(this.element, true);\n                break;\n\n            case 'arcrotate':\n                camera = new BABYLON.ArcRotateCamera(\"ArcRotateCamera\", 0, 0, 0, BABYLON.Vector3.Zero(), this.scene);\n                camera.attachControl(this.element, true);\n                camera.setPosition(options.position);\n                break;\n\n            default:\n                console.error('Camera not added, ', type, ' is not found');\n        }\n        this.cameras.push(camera);\n    }\n\n    /**\n     * convenience method to add a typical light\n     */\n    addLights() {\n        let light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), this.scene);\n        light.intensity = 0.7;\n\n    }\n\n    get config() {\n        return this.appConfig;\n    }\n\n    /**\n     * render engine tick\n     */\n    tick() {\n        if (this.initialized && this.cameras.length > 0) {\n            this.scene.render();\n            this.onRender(this.engine.getDeltaTime());\n        }\n    }\n\n    /**\n     * replace all scenes starting with application and spidering through children, restarting all render loops\n     * @param scene\n     * @param children\n     */\n    replaceAllScenes(scene, children) {\n        if (!children) {\n            this.engine.stopRenderLoop();\n            this.engine.runRenderLoop( () => this.tick() );\n\n            this.scene = scene;\n            this.root.scene = scene;\n            children = this.root.children;\n        }\n        for (let c = 0; c < children.length; c++) {\n            if (children[c].isGroup) {\n                children[c].scene = scene;\n            }\n\n            if (children[c].children && children[c].children.length > 0) {\n                this.replaceAllScenes(scene, children[c].children);\n            }\n        }\n    }\n\n    add(objects) { return this.root.add(objects); }\n    remove(objects) { return this.root.remove(objects); }\n    removeAll(objects) { this.root.removeAll(objects); }\n    find(name) { return this.root.find(name); }\n\n    onKeyDown(e) {\n        if (this.config.inspector) {\n            if (e.keyCode === this.config.inspector || String.fromCharCode(e.keyCode).toLowerCase() === this.config.inspector ) {\n                if (this.scene.debugLayer.isVisible()) {\n                    this.scene.debugLayer.hide();\n                } else {\n                    this.scene.debugLayer.show();\n                }\n            }\n        }\n    }\n\n    onResize() {\n        this.engine.resize();\n    }\n\n    onCreate(sceneEl) {}\n    onRender(time) {}\n}\n","export default {\n    default: {\n        scene: {\n           useRightHandedSystem: false,\n        },\n        engine: {\n            antialias: true,\n            options: {}\n        },\n        camera: {\n            type: 'freecamera',\n            position: {\n                x: 0,\n                y: 0,\n                z: 0\n            }\n        },\n        inspector: 'i'\n    },\n\n    apply(cfg, node) {\n        if (!node) {\n            node = this.default;\n        }\n        for (let c in node) {\n            if (!cfg[c]) {\n                cfg[c] = node[c];\n            } else {\n                if (typeof cfg[c] === 'object') {\n                    cfg[c] = this.apply(cfg[c], node[c]);\n                }\n            }\n        }\n\n        return cfg;\n    }\n}\n","import EventListener from './utils/eventlistener.js';\nexport default class BaseGroup extends EventListener {\n    constructor(params) {\n        super();\n        this._config = params;\n        this._children = [];\n        this.isGroup = true;\n    }\n\n    init() {\n        this.onCreate(this.config);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * get app config\n     * @returns {*}\n     */\n    get appConfig() {\n        return this.application.appConfig;\n    }\n\n    /**\n     * get config\n     * @returns {*}\n     */\n    get config() {\n        return this._config;\n    }\n\n    initializeGroup(scene, name) {\n        if (!name) {\n            name = this.constructor.name + '-group';\n        }\n        this._group = new BABYLON.Mesh(name, scene);\n    }\n\n    onParented(scene, parent, canvas) {\n        this.scene = scene;\n        this._canvas = canvas;\n        this.onCreate(scene);\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     */\n    onRender(scene, time) {};\n    onCreate(params) {};\n\n    /**\n     * add object to parent\n     * @param object\n     */\n    add(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n        for (let c = 0; c < objects.length; c++) {\n            if (objects[c].isGroup) {\n                if (!objects[c].group) {\n                    objects[c].initializeGroup(this.scene);\n                }\n                objects[c].parent = this;\n                objects[c].group.parent = this._group;\n            } else {\n                objects[c].parent = this._group;\n            }\n            this._children.push(objects[c]);\n            if (objects[c].onParented) {\n                objects[c].onParented(this._scene, this._group, this._canvas);\n            }\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    remove(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n\n        this._children = this.children.filter(val => !objects.includes(val));\n        for (let c = 0; c < objects.length; c++) {\n            this.scene.removeMesh(objects[c]);\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    removeAll() {\n        for (let c = 0; c < this._children.length; c++) {\n            this._children[c].dispose();\n        }\n        this._children = [];\n    }\n\n    find(name) {\n        for (let c = 0; c < this._children.length; c++) {\n            if (this._children[c].name === name) {\n                return this._children[c];\n            }\n        }\n        return null;\n    }\n\n    get application() {\n        let parent = this.parent;\n        while (parent) {\n            if (parent.isApplication) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * get engine\n     */\n    get engine() {\n        return this._scene._engine;\n    }\n\n    /**\n     * get babylon scene\n     */\n    get scene() {\n        return this._scene;\n    }\n\n    /**\n     * set scene and rewire render loop for scene\n     * @param val\n     */\n    set scene(val) {\n        if (this.scene) {\n            //console.log(this.engine, this.name);\n        }\n        if (this._scene && this._scene._engine) {\n            this._scene._engine.stopRenderLoop();\n        }\n        this._scene = val;\n        this._scene._engine.runRenderLoop( () => this.tick() );\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._children;\n    }\n\n    /**\n     * render loop\n     */\n    tick() {\n        //console.log('tick', this.name)\n        this.onRender(this.scene._engine.getDeltaTime());\n    }\n}\n","export default class EventListener {\n    constructor() {\n        /**\n         * event listeners\n         * @type {Array}\n         * @private\n         */\n        this._listeners = [];\n    }\n\n    /**\n     * add event listener\n     * @param type\n     * @param cb\n     * @returns {{type: *, callback: *}}\n     */\n    addListener(type, cb) {\n        let listener = { type: type, callback: cb };\n        this._listeners.push(listener);\n        return listener;\n    }\n\n    /**\n     * remove event listener\n     * @param listener\n     */\n    removeListener(listener) {\n        for (let c = 0; c < this._listeners.length; c++) {\n            if (listener === this._listeners[c]) {\n                this._listeners.splice(c, 0);\n                return;\n            }\n        }\n    }\n\n    /**\n     * trigger event\n     * @param type\n     * @param params\n     */\n    triggerEvent(type, params) {\n        this._listeners.forEach( function(l) {\n            if (type == l.type) {\n                l.callback.apply(this, [type, params]);\n            }\n        });\n    }\n}\n","import GLTFFileLoader from './io/gltffileloader.js';\nimport GLTFExploder from './io/gltfexploder.js';\nimport BaseApplication from '../node_modules/macgyvr/src/baseapplication.js';\nimport GLTFObject from './objects/gltfobject.js';\n\nexport default class Application extends BaseApplication {\n\n    set time(t) {\n        this._currentTime = t;\n\n        if (this.gltf) {\n            this.gltf.time = t;\n        }\n\n        if (this.config.components.timeline) {\n            this.config.components.timeline.currentTime = t;\n        }\n\n        if (this.config.components.controls) {\n            this.config.components.controls.time = t;\n        }\n    }\n\n    get time() {\n        return this._currentTime;\n    }\n\n    onCreate(scene) {\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_SELECTED, e => this.onTrackSelection(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.SCRUB_TIMELINE, e => this.onScrubTimeline(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_VISIBILITY_CHANGED, e => this.onTrackVisibilityChanged(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.CONTROL_CLICKED, e => this.onPlaybackControlClicked(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.LOAD_GLTF, e => this.loadFile(e));\n        this.config.components.samples.addEventListener(AnimationSampleGLTFs.SELECT_REMOTE_FILE, e => this.loadFile(e));\n        this.config.components.info.addEventListener(AnimationSceneInfo.SWITCH_COORDINATE_SYSTEM, e => this.switchCoordinateSystem(e));\n        this.time = 0;\n        this.playing = false;\n        this.gltf = this.add( new GLTFObject() );\n    }\n\n    loadFile(event) {\n        this.config.components.samples.style.display = 'none';\n\n        let loader = new GLTFFileLoader();\n        loader.addListener(GLTFFileLoader.LOADED, (eventtype, event) => this.onGLTFData(event));\n        if (typeof event === 'string') {\n            let uri = event;\n            this.config.components.info.setAttribute('filename', uri);\n            loader.loadRemote(uri);\n            this.gltf.load(uri);\n        } else if (event.detail.uri) {\n            this.config.components.info.setAttribute('filename', event.detail.uri);\n            loader.loadRemote(event.detail.uri);\n            this.gltf.load(event.detail.uri);\n        } else {\n            this.config.components.info.setAttribute('filename', event.detail.files[0].name);\n            loader.loadLocal(event.detail.files);\n            this.gltf.load(event.detail.inputevent);\n        }\n\n        this.gltf.time = this.time;\n    }\n\n    onGLTFData(event) {\n        let timeline = GLTFExploder.generateTimeline(event.gltf.animations);\n        this.config.components.timeline.data = timeline;\n        this.gltf.duration = timeline.duration;\n        this.config.components.controls.duration = timeline.duration;\n        this.config.components.nodes.data = event.gltf.nodes;\n    }\n\n    switchCoordinateSystem(event) {\n        this.gltf.useRightHandedSystem = event.detail.rightHanded;\n    }\n\n    onScrubTimeline(event) {\n        if (!event.detail.resumeplayback) {\n            this.playing = false;\n        }\n\n        this.time = event.detail.playbacktime;\n    }\n\n    onTrackSelection(event) {\n        this.config.components.nodes.selectNodeByName(event.detail.name);\n    }\n\n    onTrackVisibilityChanged(event) {\n        this.gltf.toggleVisibility(event.detail.visible, event.detail.name, event.detail.playbacktime);\n    }\n\n    onPlaybackControlClicked(event) {\n        this.playing = event.detail.isPlaying;\n\n        switch (event.detail.action) {\n            case AnimationPlaybackControls.STEP_FORWARD:\n                this.time += .01;\n                break;\n\n            case AnimationPlaybackControls.STEP_BACKWARD:\n                this.time -= .01;\n                break;\n\n            case AnimationPlaybackControls.FAST_FORWARD:\n                this.time += .1;\n                break;\n\n            case AnimationPlaybackControls.FAST_BACKWARD:\n                this.time -= .1;\n                break;\n        }\n    }\n\n    onRender(deltatime) {\n        if (this.playing) {\n            this.time += deltatime / 1000;\n        }\n    }\n\n}\n","// lots of approach in binary processing here stolen from Babylon\n// https://github.com/BabylonJS/Babylon.js/tree/master/loaders/src/glTF/2.0\n\n// Only supports mashing the animation buffer pieces into the GLTF object for now\nexport default {\n    explode(gltf) {\n        for (let f = 0; f < gltf.nodes.length; f++) {\n            if (!gltf.nodes[f].name) {\n                gltf.nodes[f].name = 'Node ' + Number(f+1) + ' (unnamed)';\n            }\n        }\n        for (let c = 0; c < gltf.animations.length; c++) {\n            // wire sampler references within channels for easy access\n            for (let d = 0; d < gltf.animations[c].channels.length; d++) {\n                gltf.animations[c].channels[d]._samplerRef = gltf.animations[c].samplers[gltf.animations[c].channels[d].sampler];\n                gltf.animations[c].channels[d]._samplerRef._channelRef = gltf.animations[c].channels[d];\n                gltf.animations[c].channels[d].target._nodeRef = gltf.nodes[gltf.animations[c].channels[d].target.node];\n            }\n\n            // get accessor references for samplers and resolve data from buffer\n            for (let e = 0; e < gltf.animations[c].samplers.length; e++) {\n               gltf.animations[c].samplers[e]._inputRef = gltf.accessors[gltf.animations[c].samplers[e].input];\n\n               // for animation, input refers to keyframe times\n               gltf.animations[c].samplers[e]._inputValues = this._resolveAnimationSamplerData('keyframes', gltf, gltf.animations[c].samplers[e]._inputRef);\n\n\n               // output refers to scale, rotate, or translate\n               gltf.animations[c].samplers[e]._outputRef = gltf.accessors[gltf.animations[c].samplers[e].output];\n               gltf.animations[c].samplers[e]._outputRef._bufferViewRef = gltf.bufferViews[gltf.animations[c].samplers[e]._outputRef.bufferView];\n\n               let transformType = gltf.animations[c].samplers[e]._channelRef.target.path;\n               gltf.animations[c].samplers[e]._outputValues = this._resolveAnimationSamplerData(transformType, gltf, gltf.animations[c].samplers[e]._outputRef);\n            }\n        }\n        return gltf;\n    },\n\n    _resolveAnimationSamplerData(type, gltf, samplerData) {\n        let bufferView = gltf.bufferViews[samplerData.bufferView];\n        let buffer = gltf.buffers[bufferView.buffer].data;\n\n        // map bufferView to actual mem ref\n        samplerData._bufferViewRef = bufferView;\n\n        let byteOffset = bufferView.byteOffset;\n        if (samplerData.byteOffset) {\n            byteOffset += samplerData.byteOffset;\n        }\n        let byteLength = samplerData.count * this._getByteStrideFromType(samplerData);\n        let values = this._parseBufferData(buffer, byteOffset, byteLength, samplerData.componentType);\n\n        if (type === 'keyframes') {\n            return values;\n        } else {\n            let counter = 0;\n            let transforms = [];\n            let vec;\n\n            for (let c = 0; c < values.length; c++) {\n                switch (counter) {\n                    case 0:\n                        transforms.push({});\n                        vec = transforms[transforms.length-1];\n                        vec.x = values[c];\n                        counter ++;\n                        break;\n\n                    case 1:\n                        vec.y = values[c];\n                        counter ++;\n                        break;\n\n                    case 2:\n                        vec.z = values[c];\n\n                        counter ++;\n                        if (type !== 'rotation') {\n                            counter = 0;\n                        }\n                        break;\n\n                    case 3:\n                        vec.w = values[c];\n                        counter = 0;\n                        break;\n                }\n            }\n            return transforms;\n        }\n    },\n\n    _getByteStrideFromType(accessor) {\n        switch (accessor.type) {\n            case \"SCALAR\":\n                return 1;\n            case \"VEC2\":\n                return 2;\n            case \"VEC3\":\n                return 3;\n            case \"VEC4\":\n                return 4;\n            case \"MAT2\":\n                return 4;\n            case \"MAT3\":\n                return 9;\n            case \"MAT4\":\n                return 16;\n            default:\n                console.warn(\"Invalid accessor type (\" + accessor.type + \")\");\n                return 0;\n        }\n    },\n\n    _parseBufferData(buffer, byteOffset, byteLength, componentType) {\n        let bufferViewData;\n        switch (componentType) {\n            case this.EComponentType.BYTE:\n                bufferViewData = new Int8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_BYTE:\n                bufferViewData = new Uint8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.SHORT:\n                bufferViewData = new Int16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_SHORT:\n                bufferViewData = new Uint16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_INT:\n                bufferViewData = new Uint32Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.FLOAT:\n                bufferViewData = new Float32Array(buffer, byteOffset, byteLength);\n                break;\n            default:\n                console.warn(\"Invalid component type (\" + componentType + \")\");\n                return;\n        }\n        return bufferViewData;\n    },\n\n    generateTimeline(gltfAnims) {\n        let start;\n        let end;\n        let timeline = { animations: [] };\n        for (let c = 0; c < gltfAnims.length; c++) {\n            let tracks = this._generateTracksForAnimation(gltfAnims[c]);\n            if (!start || start > tracks.start) {\n                start = tracks.start;\n            }\n            if (!end || end < tracks.end) {\n                end = tracks.end;\n            }\n            timeline.animations.push({ animation: tracks });\n        }\n\n        timeline.start = start;\n        timeline.end = end;\n        timeline.duration = end - start;\n        return timeline;\n    },\n\n    _generateTracksForAnimation(animation) {\n        let tracks = {};\n        let startTime = -1;\n        let endTime = -1;\n        for (let c = 0; c < animation.channels.length; c++) {\n            if (!tracks[animation.channels[c].target._nodeRef.name]) {\n                tracks[animation.channels[c].target._nodeRef.name] = [];\n            }\n\n            let currentChannel = tracks[animation.channels[c].target._nodeRef.name];\n\n            for (let d = 0; d < animation.channels[c]._samplerRef._inputValues.length; d++) {\n                let time = animation.channels[c]._samplerRef._inputValues[d];\n                if (startTime === -1 || time < startTime) {\n                    startTime = time;\n                }\n                if (endTime === -1 || time > endTime) {\n                    endTime = time;\n                }\n\n                let keyframe;\n                for (let e = 0; e < currentChannel.length; e++) {\n                    if (currentChannel[e].time === time) {\n                        keyframe = currentChannel[e];\n                    }\n                }\n                if (!keyframe) {\n                    keyframe = { time: time, transform: {}, name: animation.channels[c].target._nodeRef.name };\n                    currentChannel.push(keyframe);\n                }\n\n                let transformType = animation.channels[c].target.path;\n                keyframe.transform[transformType] = animation.channels[c]._samplerRef._outputValues[d];\n            }\n        }\n\n        return { start: startTime, end: endTime, duration: endTime-startTime, tracks: tracks };\n    },\n\n    EComponentType: {\n        BYTE: 5120,\n        UNSIGNED_BYTE: 5121,\n        SHORT: 5122,\n        UNSIGNED_SHORT: 5123,\n        UNSIGNED_INT: 5125,\n        FLOAT: 5126\n    }\n}\n","import GLTFExploder from './gltfexploder.js';\nimport EventListener from '../../node_modules/macgyvr/src/utils/eventlistener.js';\n\nexport default class GLTFFileLoader extends EventListener {\n    constructor() {\n        super();\n        this.bufferDictionary = {};\n        this.bufferCount = 0;\n    }\n\n    loadLocal(filerefs) {\n        for (let c = 0; c < filerefs.length; c++) {\n            let filename = filerefs[c].name;\n            if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'bin') {\n                let reader = new FileReader();\n                this.bufferCount ++;\n                reader.onload = e => {\n                    this.onBinLoaded(filename, e);\n                };\n                reader.readAsArrayBuffer(filerefs[c]);\n            } else if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'gltf') {\n                let reader = new FileReader();\n                reader.onload = e => {\n                    this.onGLTFLoaded(filename, e)\n                };\n                reader.readAsText(filerefs[c]);\n            }\n        }\n    }\n\n    loadRemote(path) {\n        this._filename = path.split('/')[path.split('/').length-1];\n        this._basepath = path.substr(0, path.indexOf(this._filename));\n        let loader = new XMLHttpRequest();\n        loader.open('GET', path, true);\n        loader.onload = data => {\n            this.gltf = JSON.parse(loader.response);\n            this.buffers = this.gltf.buffers;\n            for (let c = 0; c < this.buffers.length; c++) {\n                this.bufferCount ++;\n                let loader = new XMLHttpRequest();\n                loader.responseType = 'arraybuffer';\n                loader.open('GET', this._basepath + this.buffers[c].uri, true);\n                loader.onload = e => {\n                    this.onBinLoaded(this.buffers[c].uri, e);\n                };\n                loader.send();\n            }\n        };\n        loader.send();\n    }\n\n    onGLTFLoaded(filename, e) {\n        this.gltf = JSON.parse(e.target.result);\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onBinLoaded(filename, e) {\n        if (e.target.result) {\n            this.bufferDictionary[filename] = e.target.result;\n        } else if (e.target.response) {\n            this.bufferDictionary[filename] = e.target.response;\n        } else {\n            throw new Error(filename + ' cannot be loaded', e.target);\n        }\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onLoadComplete() {\n        for (let c = 0; c < this.gltf.buffers.length; c++) {\n            this.gltf.buffers[c].data = this.bufferDictionary[this.gltf.buffers[c].uri];\n        }\n\n        this.gltf = GLTFExploder.explode(this.gltf);\n        this.triggerEvent(GLTFFileLoader.LOADED, { gltf: this.gltf });\n    }\n\n    checkLoadedFiles() {\n        if (this.gltf && this.bufferCount === Object.keys(this.bufferDictionary).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nGLTFFileLoader.LOADED = 'onGLTFLoaded';\n","import BaseGroup from '../../node_modules/macgyvr/src/basegroup.js';\n\nexport default class GLTFObject extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param sceneinfo\n     */\n    onCreate(scene, sceneinfo) {\n        this._duration = 0;\n        this._currentTime = 0;\n        BABYLON.SceneLoader.ShowLoadingScreen = false;\n        this._useRightHandedCoordinates = false;\n        this.filesInput = new BABYLON.FilesInput(this.engine, this.scene, this.canvas, (scenefile, scene) => this.onSceneLoaded(scenefile, scene));\n    }\n\n    set useRightHandedSystem(val) {\n        this._useRightHandedCoordinates = val;\n        this.scene.useRightHandedSystem = val;\n    }\n\n    load(value) {\n        if (typeof value === 'string') {\n            let uri = value;\n            let filename = uri.split('/')[uri.split('/').length-1];\n            let basepath = uri.substr(0, uri.indexOf(filename));\n            let loader = new BABYLON.AssetsManager(this.scene);\n            loader.useDefaultLoadingScreen = false;\n            let task = loader.addMeshTask('task', '', basepath, filename);\n            task.onSuccess = asset => this.onMeshesLoaded(asset);\n            loader.load();\n        } else {\n            let event = value;\n            this.filesInput.loadFiles(event);\n        }\n    }\n\n    onMeshesLoaded(asset) {\n        this.add(asset.loadedMeshes);\n        if (this._useRightHandedCoordinates) {\n            this.group.rotation.x = Math.PI/2;\n        } else {\n            this.group.rotation.x = -Math.PI/2;\n        }\n        this.prepareScene(this.scene);\n    }\n\n    onSceneLoaded(scenefile, scene) {\n        this.application.replaceAllScenes(scene);\n        this.prepareScene(scene);\n    }\n\n    prepareScene(scene) {\n        // remove camera from scene to add our own\n        if (scene.activeCamera) {\n            scene.activeCamera.dispose();\n            scene.activeCamera = null;\n        }\n\n        scene.createDefaultCameraOrLight(true);\n        scene.activeCamera.attachControl(this.canvas);\n\n        if (scene.lights.length === 0) {\n            this.application.addLights();\n        }\n\n        // pause all to start - if synchronous, the scene doesn't seem to show up\n        setTimeout( function() {\n            for (let c = 0; c < scene.Animatables.length; c++) {\n                scene.Animatables[c].goToFrame(0);\n                scene.Animatables[c].pause();\n            }\n        }, 50);\n\n        let worldExtends = scene.getWorldExtends();\n        let sceneMidPoint;\n        if (this._useRightHandedCoordinates) {\n            sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, (worldExtends.max.y + worldExtends.min.y)/2, (worldExtends.max.z + worldExtends.min.z)/2);\n        } else {\n            let sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, (worldExtends.max.y + worldExtends.min.y)/2, (worldExtends.max.z + worldExtends.min.z)/2);\n        }\n        scene.activeCamera.setTarget( sceneMidPoint );\n    }\n\n    set duration(dur) {\n        this._duration = dur;\n    }\n\n    get duration() {\n        return this._duration;\n    }\n\n    set time(t) {\n        t = t % this.duration;\n        this._currentTime = t;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            this.scene.Animatables[c].goToFrame(t);\n        }\n    }\n\n    toggleVisibility(visible, name) {\n        let milliseconds = this.scene._animationTime;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            //let frameRate = this.scene.Animatables[c]._animations[0].framePerSecond;\n            if (this.scene.Animatables[c].target.name === name) {\n                if (visible) {\n                    this.scene.Animatables[c].restart();\n                    this.scene.Animatables[c].goToFrame(10)\n                } else {\n                    this.scene.Animatables[c].pause();\n                }\n            }\n        }\n    }\n\n    onRender(deltatime) {}\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvbWFjZ3l2ci9zcmMvYmFzZWFwcGxpY2F0aW9uLmpzIiwibm9kZV9tb2R1bGVzL21hY2d5dnIvc3JjL2Jhc2Vjb25maWcuanMiLCJub2RlX21vZHVsZXMvbWFjZ3l2ci9zcmMvYmFzZWdyb3VwLmpzIiwibm9kZV9tb2R1bGVzL21hY2d5dnIvc3JjL3V0aWxzL2V2ZW50bGlzdGVuZXIuanMiLCJzcmMvYXBwLmpzIiwic3JjL2lvL2dsdGZleHBsb2Rlci5qcyIsInNyYy9pby9nbHRmZmlsZWxvYWRlci5qcyIsInNyYy9vYmplY3RzL2dsdGZvYmplY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQ0FBOzs7O0FBQ0E7Ozs7Ozs7O0lBRXFCLGU7QUFDakIsNkJBQVksRUFBWixFQUFnQixHQUFoQixFQUFxQjtBQUFBOztBQUFBOztBQUNqQixhQUFLLFNBQUwsR0FBaUIscUJBQVcsS0FBWCxDQUFpQixHQUFqQixDQUFqQjtBQUNBLGFBQUssT0FBTCxHQUFlLEVBQWY7QUFDQSxhQUFLLE1BQUwsR0FBYyxJQUFJLFFBQVEsTUFBWixDQUFtQixLQUFLLE9BQXhCLEVBQWlDLEtBQUssU0FBTCxDQUFlLE1BQWYsQ0FBc0IsU0FBdkQsRUFBa0UsS0FBSyxTQUFMLENBQWUsTUFBZixDQUFzQixPQUF4RixDQUFkO0FBQ0EsYUFBSyxNQUFMLENBQVksb0JBQVosR0FBbUMsS0FBbkM7QUFDQSxhQUFLLEtBQUwsR0FBYSxJQUFJLFFBQVEsS0FBWixDQUFrQixLQUFLLE1BQXZCLENBQWI7QUFDQSxhQUFLLEtBQUwsQ0FBVyxvQkFBWCxHQUFrQyxLQUFLLFNBQUwsQ0FBZSxLQUFmLENBQXFCLG9CQUF2RDs7QUFFQSxhQUFLLGFBQUwsR0FBcUIsSUFBckI7QUFDQSxhQUFLLE1BQUwsQ0FBWSxhQUFaLENBQTJCO0FBQUEsbUJBQU0sTUFBSyxJQUFMLEVBQU47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Q2I7aUJBQUEsQUFBSyxlQUFMLEFBQW9CLEFBQ3BCO2lCQUFLLElBQUksSUFBVCxBQUFhLEdBQUcsSUFBSSxLQUFBLEFBQUssTUFBTCxBQUFXLFlBQS9CLEFBQTJDLFFBQTNDLEFBQW1ELEtBQUssQUFDcEQ7cUJBQUEsQUFBSyxNQUFMLEFBQVcsWUFBWCxBQUF1QixHQUF2QixBQUEwQixVQUExQixBQUFvQyxBQUN2QztBQUNKOzs7Ozs7O2tCLEFBaEdnQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgQmFzZUNvbmZpZyBmcm9tICcuL2Jhc2Vjb25maWcuanMnO1xuaW1wb3J0IEJhc2VHcm91cCBmcm9tICcuL2Jhc2Vncm91cC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VBcHBsaWNhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZWwsIGNmZykge1xuICAgICAgICB0aGlzLmFwcENvbmZpZyA9IEJhc2VDb25maWcuYXBwbHkoY2ZnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWw7XG4gICAgICAgIHRoaXMuZW5naW5lID0gbmV3IEJBQllMT04uRW5naW5lKHRoaXMuZWxlbWVudCwgdGhpcy5hcHBDb25maWcuZW5naW5lLmFudGlhbGlhcywgdGhpcy5hcHBDb25maWcuZW5naW5lLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVuZ2luZS5lbmFibGVPZmZsaW5lU3VwcG9ydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IEJBQllMT04uU2NlbmUodGhpcy5lbmdpbmUpO1xuICAgICAgICB0aGlzLnNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gdGhpcy5hcHBDb25maWcuc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW07XG5cbiAgICAgICAgdGhpcy5pc0FwcGxpY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbmdpbmUucnVuUmVuZGVyTG9vcCggKCkgPT4gdGhpcy50aWNrKCkgKTtcblxuICAgICAgICB0aGlzLmNhbWVyYXMgPSBbXTtcbiAgICAgICAgdGhpcy5saWdodHMgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5hcHBDb25maWcuY2FtZXJhKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENhbWVyYSh0aGlzLmFwcENvbmZpZy5jYW1lcmEudHlwZSwgdGhpcy5hcHBDb25maWcuY2FtZXJhLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFwcENvbmZpZy5saWdodHMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkTGlnaHRzKHRoaXMuYXBwQ29uZmlnLmxpZ2h0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hcHBDb25maWcuaW5zcGVjdG9yKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB0aGlzLm9uS2V5RG93bihlKSApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBCYXNlR3JvdXAoKTtcbiAgICAgICAgdGhpcy5yb290LnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHRoaXMucm9vdC5pbml0aWFsaXplR3JvdXAodGhpcy5zY2VuZSwgJ2FwcGxpY2F0aW9uLXJvb3QnKTtcbiAgICAgICAgdGhpcy5yb290Lm9uUGFyZW50ZWQodGhpcy5zY2VuZSwgdGhpcywgdGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5vbkNyZWF0ZSh0aGlzLnNjZW5lKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy5vblJlc2l6ZSgpKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgY2FudmFzKCkgeyByZXR1cm4gdGhpcy5lbGVtZW50OyB9XG5cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuICdyb290JzsgfVxuXG4gICAgLyoqXG4gICAgICogY29udmVuaWVuY2UgbWV0aG9kIHRvIGFkZCBhIHR5cGljYWwgY2FtZXJhXG4gICAgICovXG4gICAgYWRkQ2FtZXJhKHR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2ZyZWVjYW1lcmEnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBvc2l0aW9uID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjYW1lcmE7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgICAgICBjYXNlICdmcmVlY2FtZXJhJzpcbiAgICAgICAgICAgICAgICBjYW1lcmEgPSBuZXcgQkFCWUxPTi5GcmVlQ2FtZXJhKCdjYW1lcmEnLCBvcHRpb25zLnBvc2l0aW9uLCB0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgICAgICBjYW1lcmEuc2V0VGFyZ2V0KEJBQllMT04uVmVjdG9yMy5aZXJvKCkpO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5hdHRhY2hDb250cm9sKHRoaXMuZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2FyY3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IEJBQllMT04uQXJjUm90YXRlQ2FtZXJhKFwiQXJjUm90YXRlQ2FtZXJhXCIsIDAsIDAsIDAsIEJBQllMT04uVmVjdG9yMy5aZXJvKCksIHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgIGNhbWVyYS5hdHRhY2hDb250cm9sKHRoaXMuZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY2FtZXJhLnNldFBvc2l0aW9uKG9wdGlvbnMucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NhbWVyYSBub3QgYWRkZWQsICcsIHR5cGUsICcgaXMgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW1lcmFzLnB1c2goY2FtZXJhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb252ZW5pZW5jZSBtZXRob2QgdG8gYWRkIGEgdHlwaWNhbCBsaWdodFxuICAgICAqL1xuICAgIGFkZExpZ2h0cygpIHtcbiAgICAgICAgbGV0IGxpZ2h0ID0gbmV3IEJBQllMT04uSGVtaXNwaGVyaWNMaWdodChcImxpZ2h0MVwiLCBuZXcgQkFCWUxPTi5WZWN0b3IzKDAsIDEsIDApLCB0aGlzLnNjZW5lKTtcbiAgICAgICAgbGlnaHQuaW50ZW5zaXR5ID0gMC43O1xuXG4gICAgfVxuXG4gICAgZ2V0IGNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbmRlciBlbmdpbmUgdGlja1xuICAgICAqL1xuICAgIHRpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkICYmIHRoaXMuY2FtZXJhcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnJlbmRlcigpO1xuICAgICAgICAgICAgdGhpcy5vblJlbmRlcih0aGlzLmVuZ2luZS5nZXREZWx0YVRpbWUoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXBsYWNlIGFsbCBzY2VuZXMgc3RhcnRpbmcgd2l0aCBhcHBsaWNhdGlvbiBhbmQgc3BpZGVyaW5nIHRocm91Z2ggY2hpbGRyZW4sIHJlc3RhcnRpbmcgYWxsIHJlbmRlciBsb29wc1xuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjaGlsZHJlblxuICAgICAqL1xuICAgIHJlcGxhY2VBbGxTY2VuZXMoc2NlbmUsIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLnN0b3BSZW5kZXJMb29wKCk7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5ydW5SZW5kZXJMb29wKCAoKSA9PiB0aGlzLnRpY2soKSApO1xuXG4gICAgICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltjXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bY10uc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2NdLmNoaWxkcmVuICYmIGNoaWxkcmVuW2NdLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VBbGxTY2VuZXMoc2NlbmUsIGNoaWxkcmVuW2NdLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZChvYmplY3RzKSB7IHJldHVybiB0aGlzLnJvb3QuYWRkKG9iamVjdHMpOyB9XG4gICAgcmVtb3ZlKG9iamVjdHMpIHsgcmV0dXJuIHRoaXMucm9vdC5yZW1vdmUob2JqZWN0cyk7IH1cbiAgICByZW1vdmVBbGwob2JqZWN0cykgeyB0aGlzLnJvb3QucmVtb3ZlQWxsKG9iamVjdHMpOyB9XG4gICAgZmluZChuYW1lKSB7IHJldHVybiB0aGlzLnJvb3QuZmluZChuYW1lKTsgfVxuXG4gICAgb25LZXlEb3duKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmluc3BlY3Rvcikge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gdGhpcy5jb25maWcuaW5zcGVjdG9yIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKS50b0xvd2VyQ2FzZSgpID09PSB0aGlzLmNvbmZpZy5pbnNwZWN0b3IgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUuZGVidWdMYXllci5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmRlYnVnTGF5ZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuZGVidWdMYXllci5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLnJlc2l6ZSgpO1xuICAgIH1cblxuICAgIG9uQ3JlYXRlKHNjZW5lRWwpIHt9XG4gICAgb25SZW5kZXIodGltZSkge31cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBkZWZhdWx0OiB7XG4gICAgICAgIHNjZW5lOiB7XG4gICAgICAgICAgIHVzZVJpZ2h0SGFuZGVkU3lzdGVtOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgZW5naW5lOiB7XG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBvcHRpb25zOiB7fVxuICAgICAgICB9LFxuICAgICAgICBjYW1lcmE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdmcmVlY2FtZXJhJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIHo6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5zcGVjdG9yOiAnaSdcbiAgICB9LFxuXG4gICAgYXBwbHkoY2ZnLCBub2RlKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjIGluIG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghY2ZnW2NdKSB7XG4gICAgICAgICAgICAgICAgY2ZnW2NdID0gbm9kZVtjXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjZmdbY10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNmZ1tjXSA9IHRoaXMuYXBwbHkoY2ZnW2NdLCBub2RlW2NdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2ZnO1xuICAgIH1cbn1cbiIsImltcG9ydCBFdmVudExpc3RlbmVyIGZyb20gJy4vdXRpbHMvZXZlbnRsaXN0ZW5lci5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlR3JvdXAgZXh0ZW5kcyBFdmVudExpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gcGFyYW1zO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmlzR3JvdXAgPSB0cnVlO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMub25DcmVhdGUodGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBuYW1lIG9mIGdyb3VwXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFwcCBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXQgYXBwQ29uZmlnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbi5hcHBDb25maWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldCBjb25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUdyb3VwKHNjZW5lLCBuYW1lKSB7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZSArICctZ3JvdXAnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dyb3VwID0gbmV3IEJBQllMT04uTWVzaChuYW1lLCBzY2VuZSk7XG4gICAgfVxuXG4gICAgb25QYXJlbnRlZChzY2VuZSwgcGFyZW50LCBjYW52YXMpIHtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgICAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMub25DcmVhdGUoc2NlbmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG92ZXJyaWRhYmxlIG1ldGhvZHNcbiAgICAgKiBsZWF2ZSBlbXB0eSB0byBiZSBhIHNpbXBsZSBhYnN0cmFjdGlvbiB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgc3VwZXIgb25cbiAgICAgKiBAcGFyYW0gc2NlbmVcbiAgICAgKi9cbiAgICBvblJlbmRlcihzY2VuZSwgdGltZSkge307XG4gICAgb25DcmVhdGUocGFyYW1zKSB7fTtcblxuICAgIC8qKlxuICAgICAqIGFkZCBvYmplY3QgdG8gcGFyZW50XG4gICAgICogQHBhcmFtIG9iamVjdFxuICAgICAqL1xuICAgIGFkZChvYmplY3RzKSB7XG4gICAgICAgIGxldCBhc0FycmF5ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9iamVjdHMubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9iamVjdHMgPSBbb2JqZWN0c107XG4gICAgICAgICAgICBhc0FycmF5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBvYmplY3RzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAob2JqZWN0c1tjXS5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzW2NdLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHNbY10uaW5pdGlhbGl6ZUdyb3VwKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RzW2NdLnBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5ncm91cC5wYXJlbnQgPSB0aGlzLl9ncm91cDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5wYXJlbnQgPSB0aGlzLl9ncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2gob2JqZWN0c1tjXSk7XG4gICAgICAgICAgICBpZiAob2JqZWN0c1tjXS5vblBhcmVudGVkKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0c1tjXS5vblBhcmVudGVkKHRoaXMuX3NjZW5lLCB0aGlzLl9ncm91cCwgdGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RzWzBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKG9iamVjdHMpIHtcbiAgICAgICAgbGV0IGFzQXJyYXkgPSB0cnVlO1xuICAgICAgICBpZiAob2JqZWN0cy5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqZWN0cyA9IFtvYmplY3RzXTtcbiAgICAgICAgICAgIGFzQXJyYXkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5maWx0ZXIodmFsID0+ICFvYmplY3RzLmluY2x1ZGVzKHZhbCkpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG9iamVjdHMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlTWVzaChvYmplY3RzW2NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhc0FycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RzWzBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQWxsKCkge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbltjXS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICBmaW5kKG5hbWUpIHtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoaWxkcmVuW2NdLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5bY107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGFwcGxpY2F0aW9uKCkge1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQuaXNBcHBsaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHBhcmVudCBncm91cCBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7VEhSRUUuT2JqZWN0M0R9XG4gICAgICovXG4gICAgZ2V0IGdyb3VwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXA7XG4gICAgfVxuXG4gICAgZ2V0IGNhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZW5naW5lXG4gICAgICovXG4gICAgZ2V0IGVuZ2luZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lLl9lbmdpbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGJhYnlsb24gc2NlbmVcbiAgICAgKi9cbiAgICBnZXQgc2NlbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY2VuZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgc2NlbmUgYW5kIHJld2lyZSByZW5kZXIgbG9vcCBmb3Igc2NlbmVcbiAgICAgKiBAcGFyYW0gdmFsXG4gICAgICovXG4gICAgc2V0IHNjZW5lKHZhbCkge1xuICAgICAgICBpZiAodGhpcy5zY2VuZSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLmVuZ2luZSwgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc2NlbmUgJiYgdGhpcy5fc2NlbmUuX2VuZ2luZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NlbmUuX2VuZ2luZS5zdG9wUmVuZGVyTG9vcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NjZW5lID0gdmFsO1xuICAgICAgICB0aGlzLl9zY2VuZS5fZW5naW5lLnJ1blJlbmRlckxvb3AoICgpID0+IHRoaXMudGljaygpICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNoaWxkcmVuIG9mIHRoaXMgZ3JvdXBcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVuZGVyIGxvb3BcbiAgICAgKi9cbiAgICB0aWNrKCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCd0aWNrJywgdGhpcy5uYW1lKVxuICAgICAgICB0aGlzLm9uUmVuZGVyKHRoaXMuc2NlbmUuX2VuZ2luZS5nZXREZWx0YVRpbWUoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGV2ZW50IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcGFyYW0gY2JcbiAgICAgKiBAcmV0dXJucyB7e3R5cGU6ICosIGNhbGxiYWNrOiAqfX1cbiAgICAgKi9cbiAgICBhZGRMaXN0ZW5lcih0eXBlLCBjYikge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSB7IHR5cGU6IHR5cGUsIGNhbGxiYWNrOiBjYiB9O1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSB0aGlzLl9saXN0ZW5lcnNbY10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGMsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyaWdnZXIgZXZlbnRcbiAgICAgKiBAcGFyYW0gdHlwZVxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKi9cbiAgICB0cmlnZ2VyRXZlbnQodHlwZSwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKCBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBsLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBsLmNhbGxiYWNrLmFwcGx5KHRoaXMsIFt0eXBlLCBwYXJhbXNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEdMVEZGaWxlTG9hZGVyIGZyb20gJy4vaW8vZ2x0ZmZpbGVsb2FkZXIuanMnO1xuaW1wb3J0IEdMVEZFeHBsb2RlciBmcm9tICcuL2lvL2dsdGZleHBsb2Rlci5qcyc7XG5pbXBvcnQgQmFzZUFwcGxpY2F0aW9uIGZyb20gJy4uL25vZGVfbW9kdWxlcy9tYWNneXZyL3NyYy9iYXNlYXBwbGljYXRpb24uanMnO1xuaW1wb3J0IEdMVEZPYmplY3QgZnJvbSAnLi9vYmplY3RzL2dsdGZvYmplY3QuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHBsaWNhdGlvbiBleHRlbmRzIEJhc2VBcHBsaWNhdGlvbiB7XG5cbiAgICBzZXQgdGltZSh0KSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gdDtcblxuICAgICAgICBpZiAodGhpcy5nbHRmKSB7XG4gICAgICAgICAgICB0aGlzLmdsdGYudGltZSA9IHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZSkge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZS5jdXJyZW50VGltZSA9IHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb25maWcuY29tcG9uZW50cy5jb250cm9scykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5jb250cm9scy50aW1lID0gdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCB0aW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFRpbWU7XG4gICAgfVxuXG4gICAgb25DcmVhdGUoc2NlbmUpIHtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy50aW1lbGluZS5hZGRFdmVudExpc3RlbmVyKEFuaW1hdGlvblRpbWVsaW5lLlRSQUNLX1NFTEVDVEVELCBlID0+IHRoaXMub25UcmFja1NlbGVjdGlvbihlKSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMudGltZWxpbmUuYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25UaW1lbGluZS5TQ1JVQl9USU1FTElORSwgZSA9PiB0aGlzLm9uU2NydWJUaW1lbGluZShlKSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMudGltZWxpbmUuYWRkRXZlbnRMaXN0ZW5lcihBbmltYXRpb25UaW1lbGluZS5UUkFDS19WSVNJQklMSVRZX0NIQU5HRUQsIGUgPT4gdGhpcy5vblRyYWNrVmlzaWJpbGl0eUNoYW5nZWQoZSkpO1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5DT05UUk9MX0NMSUNLRUQsIGUgPT4gdGhpcy5vblBsYXliYWNrQ29udHJvbENsaWNrZWQoZSkpO1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLmNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5MT0FEX0dMVEYsIGUgPT4gdGhpcy5sb2FkRmlsZShlKSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuc2FtcGxlcy5hZGRFdmVudExpc3RlbmVyKEFuaW1hdGlvblNhbXBsZUdMVEZzLlNFTEVDVF9SRU1PVEVfRklMRSwgZSA9PiB0aGlzLmxvYWRGaWxlKGUpKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5pbmZvLmFkZEV2ZW50TGlzdGVuZXIoQW5pbWF0aW9uU2NlbmVJbmZvLlNXSVRDSF9DT09SRElOQVRFX1NZU1RFTSwgZSA9PiB0aGlzLnN3aXRjaENvb3JkaW5hdGVTeXN0ZW0oZSkpO1xuICAgICAgICB0aGlzLnRpbWUgPSAwO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nbHRmID0gdGhpcy5hZGQoIG5ldyBHTFRGT2JqZWN0KCkgKTtcbiAgICB9XG5cbiAgICBsb2FkRmlsZShldmVudCkge1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLnNhbXBsZXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICBsZXQgbG9hZGVyID0gbmV3IEdMVEZGaWxlTG9hZGVyKCk7XG4gICAgICAgIGxvYWRlci5hZGRMaXN0ZW5lcihHTFRGRmlsZUxvYWRlci5MT0FERUQsIChldmVudHR5cGUsIGV2ZW50KSA9PiB0aGlzLm9uR0xURkRhdGEoZXZlbnQpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGxldCB1cmkgPSBldmVudDtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuaW5mby5zZXRBdHRyaWJ1dGUoJ2ZpbGVuYW1lJywgdXJpKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkUmVtb3RlKHVyaSk7XG4gICAgICAgICAgICB0aGlzLmdsdGYubG9hZCh1cmkpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmRldGFpbC51cmkpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMuaW5mby5zZXRBdHRyaWJ1dGUoJ2ZpbGVuYW1lJywgZXZlbnQuZGV0YWlsLnVyaSk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZFJlbW90ZShldmVudC5kZXRhaWwudXJpKTtcbiAgICAgICAgICAgIHRoaXMuZ2x0Zi5sb2FkKGV2ZW50LmRldGFpbC51cmkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5pbmZvLnNldEF0dHJpYnV0ZSgnZmlsZW5hbWUnLCBldmVudC5kZXRhaWwuZmlsZXNbMF0ubmFtZSk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZExvY2FsKGV2ZW50LmRldGFpbC5maWxlcyk7XG4gICAgICAgICAgICB0aGlzLmdsdGYubG9hZChldmVudC5kZXRhaWwuaW5wdXRldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdsdGYudGltZSA9IHRoaXMudGltZTtcbiAgICB9XG5cbiAgICBvbkdMVEZEYXRhKGV2ZW50KSB7XG4gICAgICAgIGxldCB0aW1lbGluZSA9IEdMVEZFeHBsb2Rlci5nZW5lcmF0ZVRpbWVsaW5lKGV2ZW50LmdsdGYuYW5pbWF0aW9ucyk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudHMudGltZWxpbmUuZGF0YSA9IHRpbWVsaW5lO1xuICAgICAgICB0aGlzLmdsdGYuZHVyYXRpb24gPSB0aW1lbGluZS5kdXJhdGlvbjtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5jb250cm9scy5kdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uO1xuICAgICAgICB0aGlzLmNvbmZpZy5jb21wb25lbnRzLm5vZGVzLmRhdGEgPSBldmVudC5nbHRmLm5vZGVzO1xuICAgIH1cblxuICAgIHN3aXRjaENvb3JkaW5hdGVTeXN0ZW0oZXZlbnQpIHtcbiAgICAgICAgdGhpcy5nbHRmLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gZXZlbnQuZGV0YWlsLnJpZ2h0SGFuZGVkO1xuICAgIH1cblxuICAgIG9uU2NydWJUaW1lbGluZShldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50LmRldGFpbC5yZXN1bWVwbGF5YmFjaykge1xuICAgICAgICAgICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbWUgPSBldmVudC5kZXRhaWwucGxheWJhY2t0aW1lO1xuICAgIH1cblxuICAgIG9uVHJhY2tTZWxlY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50cy5ub2Rlcy5zZWxlY3ROb2RlQnlOYW1lKGV2ZW50LmRldGFpbC5uYW1lKTtcbiAgICB9XG5cbiAgICBvblRyYWNrVmlzaWJpbGl0eUNoYW5nZWQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5nbHRmLnRvZ2dsZVZpc2liaWxpdHkoZXZlbnQuZGV0YWlsLnZpc2libGUsIGV2ZW50LmRldGFpbC5uYW1lLCBldmVudC5kZXRhaWwucGxheWJhY2t0aW1lKTtcbiAgICB9XG5cbiAgICBvblBsYXliYWNrQ29udHJvbENsaWNrZWQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wbGF5aW5nID0gZXZlbnQuZGV0YWlsLmlzUGxheWluZztcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRldGFpbC5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5TVEVQX0ZPUldBUkQ6XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lICs9IC4wMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLlNURVBfQkFDS1dBUkQ6XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lIC09IC4wMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzLkZBU1RfRk9SV0FSRDpcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgKz0gLjE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQW5pbWF0aW9uUGxheWJhY2tDb250cm9scy5GQVNUX0JBQ0tXQVJEOlxuICAgICAgICAgICAgICAgIHRoaXMudGltZSAtPSAuMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUmVuZGVyKGRlbHRhdGltZSkge1xuICAgICAgICBpZiAodGhpcy5wbGF5aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWUgKz0gZGVsdGF0aW1lIC8gMTAwMDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiLy8gbG90cyBvZiBhcHByb2FjaCBpbiBiaW5hcnkgcHJvY2Vzc2luZyBoZXJlIHN0b2xlbiBmcm9tIEJhYnlsb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9CYWJ5bG9uSlMvQmFieWxvbi5qcy90cmVlL21hc3Rlci9sb2FkZXJzL3NyYy9nbFRGLzIuMFxuXG4vLyBPbmx5IHN1cHBvcnRzIG1hc2hpbmcgdGhlIGFuaW1hdGlvbiBidWZmZXIgcGllY2VzIGludG8gdGhlIEdMVEYgb2JqZWN0IGZvciBub3dcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBleHBsb2RlKGdsdGYpIHtcbiAgICAgICAgZm9yIChsZXQgZiA9IDA7IGYgPCBnbHRmLm5vZGVzLmxlbmd0aDsgZisrKSB7XG4gICAgICAgICAgICBpZiAoIWdsdGYubm9kZXNbZl0ubmFtZSkge1xuICAgICAgICAgICAgICAgIGdsdGYubm9kZXNbZl0ubmFtZSA9ICdOb2RlICcgKyBOdW1iZXIoZisxKSArICcgKHVubmFtZWQpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGdsdGYuYW5pbWF0aW9ucy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgLy8gd2lyZSBzYW1wbGVyIHJlZmVyZW5jZXMgd2l0aGluIGNoYW5uZWxzIGZvciBlYXN5IGFjY2Vzc1xuICAgICAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHMubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHNbZF0uX3NhbXBsZXJSZWYgPSBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZ2x0Zi5hbmltYXRpb25zW2NdLmNoYW5uZWxzW2RdLnNhbXBsZXJdO1xuICAgICAgICAgICAgICAgIGdsdGYuYW5pbWF0aW9uc1tjXS5jaGFubmVsc1tkXS5fc2FtcGxlclJlZi5fY2hhbm5lbFJlZiA9IGdsdGYuYW5pbWF0aW9uc1tjXS5jaGFubmVsc1tkXTtcbiAgICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHNbZF0udGFyZ2V0Ll9ub2RlUmVmID0gZ2x0Zi5ub2Rlc1tnbHRmLmFuaW1hdGlvbnNbY10uY2hhbm5lbHNbZF0udGFyZ2V0Lm5vZGVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBnZXQgYWNjZXNzb3IgcmVmZXJlbmNlcyBmb3Igc2FtcGxlcnMgYW5kIHJlc29sdmUgZGF0YSBmcm9tIGJ1ZmZlclxuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5faW5wdXRSZWYgPSBnbHRmLmFjY2Vzc29yc1tnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uaW5wdXRdO1xuXG4gICAgICAgICAgICAgICAvLyBmb3IgYW5pbWF0aW9uLCBpbnB1dCByZWZlcnMgdG8ga2V5ZnJhbWUgdGltZXNcbiAgICAgICAgICAgICAgIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5faW5wdXRWYWx1ZXMgPSB0aGlzLl9yZXNvbHZlQW5pbWF0aW9uU2FtcGxlckRhdGEoJ2tleWZyYW1lcycsIGdsdGYsIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5faW5wdXRSZWYpO1xuXG5cbiAgICAgICAgICAgICAgIC8vIG91dHB1dCByZWZlcnMgdG8gc2NhbGUsIHJvdGF0ZSwgb3IgdHJhbnNsYXRlXG4gICAgICAgICAgICAgICBnbHRmLmFuaW1hdGlvbnNbY10uc2FtcGxlcnNbZV0uX291dHB1dFJlZiA9IGdsdGYuYWNjZXNzb3JzW2dsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5vdXRwdXRdO1xuICAgICAgICAgICAgICAgZ2x0Zi5hbmltYXRpb25zW2NdLnNhbXBsZXJzW2VdLl9vdXRwdXRSZWYuX2J1ZmZlclZpZXdSZWYgPSBnbHRmLmJ1ZmZlclZpZXdzW2dsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5fb3V0cHV0UmVmLmJ1ZmZlclZpZXddO1xuXG4gICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtVHlwZSA9IGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5fY2hhbm5lbFJlZi50YXJnZXQucGF0aDtcbiAgICAgICAgICAgICAgIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5fb3V0cHV0VmFsdWVzID0gdGhpcy5fcmVzb2x2ZUFuaW1hdGlvblNhbXBsZXJEYXRhKHRyYW5zZm9ybVR5cGUsIGdsdGYsIGdsdGYuYW5pbWF0aW9uc1tjXS5zYW1wbGVyc1tlXS5fb3V0cHV0UmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2x0ZjtcbiAgICB9LFxuXG4gICAgX3Jlc29sdmVBbmltYXRpb25TYW1wbGVyRGF0YSh0eXBlLCBnbHRmLCBzYW1wbGVyRGF0YSkge1xuICAgICAgICBsZXQgYnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3Nbc2FtcGxlckRhdGEuYnVmZmVyVmlld107XG4gICAgICAgIGxldCBidWZmZXIgPSBnbHRmLmJ1ZmZlcnNbYnVmZmVyVmlldy5idWZmZXJdLmRhdGE7XG5cbiAgICAgICAgLy8gbWFwIGJ1ZmZlclZpZXcgdG8gYWN0dWFsIG1lbSByZWZcbiAgICAgICAgc2FtcGxlckRhdGEuX2J1ZmZlclZpZXdSZWYgPSBidWZmZXJWaWV3O1xuXG4gICAgICAgIGxldCBieXRlT2Zmc2V0ID0gYnVmZmVyVmlldy5ieXRlT2Zmc2V0O1xuICAgICAgICBpZiAoc2FtcGxlckRhdGEuYnl0ZU9mZnNldCkge1xuICAgICAgICAgICAgYnl0ZU9mZnNldCArPSBzYW1wbGVyRGF0YS5ieXRlT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGxldCBieXRlTGVuZ3RoID0gc2FtcGxlckRhdGEuY291bnQgKiB0aGlzLl9nZXRCeXRlU3RyaWRlRnJvbVR5cGUoc2FtcGxlckRhdGEpO1xuICAgICAgICBsZXQgdmFsdWVzID0gdGhpcy5fcGFyc2VCdWZmZXJEYXRhKGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCwgc2FtcGxlckRhdGEuY29tcG9uZW50VHlwZSk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgbGV0IHRyYW5zZm9ybXMgPSBbXTtcbiAgICAgICAgICAgIGxldCB2ZWM7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdmFsdWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybXMucHVzaCh7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMgPSB0cmFuc2Zvcm1zW3RyYW5zZm9ybXMubGVuZ3RoLTFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjLnggPSB2YWx1ZXNbY107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyICsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjLnkgPSB2YWx1ZXNbY107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyICsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjLnogPSB2YWx1ZXNbY107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ3JvdGF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjLncgPSB2YWx1ZXNbY107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1zO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9nZXRCeXRlU3RyaWRlRnJvbVR5cGUoYWNjZXNzb3IpIHtcbiAgICAgICAgc3dpdGNoIChhY2Nlc3Nvci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiU0NBTEFSXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICBjYXNlIFwiVkVDMlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICAgICAgY2FzZSBcIlZFQzNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgICAgIGNhc2UgXCJWRUM0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgICAgICBjYXNlIFwiTUFUMlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgICAgY2FzZSBcIk1BVDNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgICAgIGNhc2UgXCJNQVQ0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE2O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGFjY2Vzc29yIHR5cGUgKFwiICsgYWNjZXNzb3IudHlwZSArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfcGFyc2VCdWZmZXJEYXRhKGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCwgY29tcG9uZW50VHlwZSkge1xuICAgICAgICBsZXQgYnVmZmVyVmlld0RhdGE7XG4gICAgICAgIHN3aXRjaCAoY29tcG9uZW50VHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLkJZVEU6XG4gICAgICAgICAgICAgICAgYnVmZmVyVmlld0RhdGEgPSBuZXcgSW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuRUNvbXBvbmVudFR5cGUuVU5TSUdORURfQllURTpcbiAgICAgICAgICAgICAgICBidWZmZXJWaWV3RGF0YSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuRUNvbXBvbmVudFR5cGUuU0hPUlQ6XG4gICAgICAgICAgICAgICAgYnVmZmVyVmlld0RhdGEgPSBuZXcgSW50MTZBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLkVDb21wb25lbnRUeXBlLlVOU0lHTkVEX1NIT1JUOlxuICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXdEYXRhID0gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuRUNvbXBvbmVudFR5cGUuVU5TSUdORURfSU5UOlxuICAgICAgICAgICAgICAgIGJ1ZmZlclZpZXdEYXRhID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuRUNvbXBvbmVudFR5cGUuRkxPQVQ6XG4gICAgICAgICAgICAgICAgYnVmZmVyVmlld0RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgY29tcG9uZW50IHR5cGUgKFwiICsgY29tcG9uZW50VHlwZSArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlclZpZXdEYXRhO1xuICAgIH0sXG5cbiAgICBnZW5lcmF0ZVRpbWVsaW5lKGdsdGZBbmltcykge1xuICAgICAgICBsZXQgc3RhcnQ7XG4gICAgICAgIGxldCBlbmQ7XG4gICAgICAgIGxldCB0aW1lbGluZSA9IHsgYW5pbWF0aW9uczogW10gfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBnbHRmQW5pbXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCB0cmFja3MgPSB0aGlzLl9nZW5lcmF0ZVRyYWNrc0ZvckFuaW1hdGlvbihnbHRmQW5pbXNbY10pO1xuICAgICAgICAgICAgaWYgKCFzdGFydCB8fCBzdGFydCA+IHRyYWNrcy5zdGFydCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdHJhY2tzLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmQgfHwgZW5kIDwgdHJhY2tzLmVuZCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHRyYWNrcy5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lbGluZS5hbmltYXRpb25zLnB1c2goeyBhbmltYXRpb246IHRyYWNrcyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVsaW5lLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRpbWVsaW5lLmVuZCA9IGVuZDtcbiAgICAgICAgdGltZWxpbmUuZHVyYXRpb24gPSBlbmQgLSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHRpbWVsaW5lO1xuICAgIH0sXG5cbiAgICBfZ2VuZXJhdGVUcmFja3NGb3JBbmltYXRpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgIGxldCB0cmFja3MgPSB7fTtcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IC0xO1xuICAgICAgICBsZXQgZW5kVGltZSA9IC0xO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGFuaW1hdGlvbi5jaGFubmVscy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKCF0cmFja3NbYW5pbWF0aW9uLmNoYW5uZWxzW2NdLnRhcmdldC5fbm9kZVJlZi5uYW1lXSkge1xuICAgICAgICAgICAgICAgIHRyYWNrc1thbmltYXRpb24uY2hhbm5lbHNbY10udGFyZ2V0Ll9ub2RlUmVmLm5hbWVdID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjdXJyZW50Q2hhbm5lbCA9IHRyYWNrc1thbmltYXRpb24uY2hhbm5lbHNbY10udGFyZ2V0Ll9ub2RlUmVmLm5hbWVdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IGFuaW1hdGlvbi5jaGFubmVsc1tjXS5fc2FtcGxlclJlZi5faW5wdXRWYWx1ZXMubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdGltZSA9IGFuaW1hdGlvbi5jaGFubmVsc1tjXS5fc2FtcGxlclJlZi5faW5wdXRWYWx1ZXNbZF07XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gLTEgfHwgdGltZSA8IHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5kVGltZSA9PT0gLTEgfHwgdGltZSA+IGVuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kVGltZSA9IHRpbWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGtleWZyYW1lO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgY3VycmVudENoYW5uZWwubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGFubmVsW2VdLnRpbWUgPT09IHRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lID0gY3VycmVudENoYW5uZWxbZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFrZXlmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZSA9IHsgdGltZTogdGltZSwgdHJhbnNmb3JtOiB7fSwgbmFtZTogYW5pbWF0aW9uLmNoYW5uZWxzW2NdLnRhcmdldC5fbm9kZVJlZi5uYW1lIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFubmVsLnB1c2goa2V5ZnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1UeXBlID0gYW5pbWF0aW9uLmNoYW5uZWxzW2NdLnRhcmdldC5wYXRoO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lLnRyYW5zZm9ybVt0cmFuc2Zvcm1UeXBlXSA9IGFuaW1hdGlvbi5jaGFubmVsc1tjXS5fc2FtcGxlclJlZi5fb3V0cHV0VmFsdWVzW2RdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0VGltZSwgZW5kOiBlbmRUaW1lLCBkdXJhdGlvbjogZW5kVGltZS1zdGFydFRpbWUsIHRyYWNrczogdHJhY2tzIH07XG4gICAgfSxcblxuICAgIEVDb21wb25lbnRUeXBlOiB7XG4gICAgICAgIEJZVEU6IDUxMjAsXG4gICAgICAgIFVOU0lHTkVEX0JZVEU6IDUxMjEsXG4gICAgICAgIFNIT1JUOiA1MTIyLFxuICAgICAgICBVTlNJR05FRF9TSE9SVDogNTEyMyxcbiAgICAgICAgVU5TSUdORURfSU5UOiA1MTI1LFxuICAgICAgICBGTE9BVDogNTEyNlxuICAgIH1cbn1cbiIsImltcG9ydCBHTFRGRXhwbG9kZXIgZnJvbSAnLi9nbHRmZXhwbG9kZXIuanMnO1xuaW1wb3J0IEV2ZW50TGlzdGVuZXIgZnJvbSAnLi4vLi4vbm9kZV9tb2R1bGVzL21hY2d5dnIvc3JjL3V0aWxzL2V2ZW50bGlzdGVuZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHTFRGRmlsZUxvYWRlciBleHRlbmRzIEV2ZW50TGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJ1ZmZlckRpY3Rpb25hcnkgPSB7fTtcbiAgICAgICAgdGhpcy5idWZmZXJDb3VudCA9IDA7XG4gICAgfVxuXG4gICAgbG9hZExvY2FsKGZpbGVyZWZzKSB7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgZmlsZXJlZnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IGZpbGVyZWZzW2NdLm5hbWU7XG4gICAgICAgICAgICBpZiAoZmlsZW5hbWUuc3BsaXQoJy4nKVtmaWxlbmFtZS5zcGxpdCgnLicpLmxlbmd0aC0xXS50b0xvd2VyQ2FzZSgpID09PSAnYmluJykge1xuICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyQ291bnQgKys7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQmluTG9hZGVkKGZpbGVuYW1lLCBlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlcmVmc1tjXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVuYW1lLnNwbGl0KCcuJylbZmlsZW5hbWUuc3BsaXQoJy4nKS5sZW5ndGgtMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2dsdGYnKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uR0xURkxvYWRlZChmaWxlbmFtZSwgZSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGVyZWZzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRSZW1vdGUocGF0aCkge1xuICAgICAgICB0aGlzLl9maWxlbmFtZSA9IHBhdGguc3BsaXQoJy8nKVtwYXRoLnNwbGl0KCcvJykubGVuZ3RoLTFdO1xuICAgICAgICB0aGlzLl9iYXNlcGF0aCA9IHBhdGguc3Vic3RyKDAsIHBhdGguaW5kZXhPZih0aGlzLl9maWxlbmFtZSkpO1xuICAgICAgICBsZXQgbG9hZGVyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIGxvYWRlci5vcGVuKCdHRVQnLCBwYXRoLCB0cnVlKTtcbiAgICAgICAgbG9hZGVyLm9ubG9hZCA9IGRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbHRmID0gSlNPTi5wYXJzZShsb2FkZXIucmVzcG9uc2UpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJzID0gdGhpcy5nbHRmLmJ1ZmZlcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuYnVmZmVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyQ291bnQgKys7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRlciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIGxvYWRlci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgICAgIGxvYWRlci5vcGVuKCdHRVQnLCB0aGlzLl9iYXNlcGF0aCArIHRoaXMuYnVmZmVyc1tjXS51cmksIHRydWUpO1xuICAgICAgICAgICAgICAgIGxvYWRlci5vbmxvYWQgPSBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkJpbkxvYWRlZCh0aGlzLmJ1ZmZlcnNbY10udXJpLCBlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxvYWRlci5zZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxvYWRlci5zZW5kKCk7XG4gICAgfVxuXG4gICAgb25HTFRGTG9hZGVkKGZpbGVuYW1lLCBlKSB7XG4gICAgICAgIHRoaXMuZ2x0ZiA9IEpTT04ucGFyc2UoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgbGV0IGxvYWRlZCA9IHRoaXMuY2hlY2tMb2FkZWRGaWxlcygpO1xuICAgICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkJpbkxvYWRlZChmaWxlbmFtZSwgZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQucmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckRpY3Rpb25hcnlbZmlsZW5hbWVdID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckRpY3Rpb25hcnlbZmlsZW5hbWVdID0gZS50YXJnZXQucmVzcG9uc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZmlsZW5hbWUgKyAnIGNhbm5vdCBiZSBsb2FkZWQnLCBlLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxvYWRlZCA9IHRoaXMuY2hlY2tMb2FkZWRGaWxlcygpO1xuICAgICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkxvYWRDb21wbGV0ZSgpIHtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmdsdGYuYnVmZmVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgdGhpcy5nbHRmLmJ1ZmZlcnNbY10uZGF0YSA9IHRoaXMuYnVmZmVyRGljdGlvbmFyeVt0aGlzLmdsdGYuYnVmZmVyc1tjXS51cmldO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nbHRmID0gR0xURkV4cGxvZGVyLmV4cGxvZGUodGhpcy5nbHRmKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoR0xURkZpbGVMb2FkZXIuTE9BREVELCB7IGdsdGY6IHRoaXMuZ2x0ZiB9KTtcbiAgICB9XG5cbiAgICBjaGVja0xvYWRlZEZpbGVzKCkge1xuICAgICAgICBpZiAodGhpcy5nbHRmICYmIHRoaXMuYnVmZmVyQ291bnQgPT09IE9iamVjdC5rZXlzKHRoaXMuYnVmZmVyRGljdGlvbmFyeSkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuR0xURkZpbGVMb2FkZXIuTE9BREVEID0gJ29uR0xURkxvYWRlZCc7XG4iLCJpbXBvcnQgQmFzZUdyb3VwIGZyb20gJy4uLy4uL25vZGVfbW9kdWxlcy9tYWNneXZyL3NyYy9iYXNlZ3JvdXAuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHTFRGT2JqZWN0IGV4dGVuZHMgQmFzZUdyb3VwIHtcbiAgICAvKipcbiAgICAgKiBvbiBjcmVhdGUgc2NlbmVcbiAgICAgKiBAcGFyYW0gc2NlbmVcbiAgICAgKiBAcGFyYW0gc2NlbmVpbmZvXG4gICAgICovXG4gICAgb25DcmVhdGUoc2NlbmUsIHNjZW5laW5mbykge1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgQkFCWUxPTi5TY2VuZUxvYWRlci5TaG93TG9hZGluZ1NjcmVlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl91c2VSaWdodEhhbmRlZENvb3JkaW5hdGVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZmlsZXNJbnB1dCA9IG5ldyBCQUJZTE9OLkZpbGVzSW5wdXQodGhpcy5lbmdpbmUsIHRoaXMuc2NlbmUsIHRoaXMuY2FudmFzLCAoc2NlbmVmaWxlLCBzY2VuZSkgPT4gdGhpcy5vblNjZW5lTG9hZGVkKHNjZW5lZmlsZSwgc2NlbmUpKTtcbiAgICB9XG5cbiAgICBzZXQgdXNlUmlnaHRIYW5kZWRTeXN0ZW0odmFsKSB7XG4gICAgICAgIHRoaXMuX3VzZVJpZ2h0SGFuZGVkQ29vcmRpbmF0ZXMgPSB2YWw7XG4gICAgICAgIHRoaXMuc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0gPSB2YWw7XG4gICAgfVxuXG4gICAgbG9hZCh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbGV0IHVyaSA9IHZhbHVlO1xuICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gdXJpLnNwbGl0KCcvJylbdXJpLnNwbGl0KCcvJykubGVuZ3RoLTFdO1xuICAgICAgICAgICAgbGV0IGJhc2VwYXRoID0gdXJpLnN1YnN0cigwLCB1cmkuaW5kZXhPZihmaWxlbmFtZSkpO1xuICAgICAgICAgICAgbGV0IGxvYWRlciA9IG5ldyBCQUJZTE9OLkFzc2V0c01hbmFnZXIodGhpcy5zY2VuZSk7XG4gICAgICAgICAgICBsb2FkZXIudXNlRGVmYXVsdExvYWRpbmdTY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0YXNrID0gbG9hZGVyLmFkZE1lc2hUYXNrKCd0YXNrJywgJycsIGJhc2VwYXRoLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB0YXNrLm9uU3VjY2VzcyA9IGFzc2V0ID0+IHRoaXMub25NZXNoZXNMb2FkZWQoYXNzZXQpO1xuICAgICAgICAgICAgbG9hZGVyLmxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBldmVudCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5maWxlc0lucHV0LmxvYWRGaWxlcyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1lc2hlc0xvYWRlZChhc3NldCkge1xuICAgICAgICB0aGlzLmFkZChhc3NldC5sb2FkZWRNZXNoZXMpO1xuICAgICAgICBpZiAodGhpcy5fdXNlUmlnaHRIYW5kZWRDb29yZGluYXRlcykge1xuICAgICAgICAgICAgdGhpcy5ncm91cC5yb3RhdGlvbi54ID0gTWF0aC5QSS8yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ncm91cC5yb3RhdGlvbi54ID0gLU1hdGguUEkvMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXBhcmVTY2VuZSh0aGlzLnNjZW5lKTtcbiAgICB9XG5cbiAgICBvblNjZW5lTG9hZGVkKHNjZW5lZmlsZSwgc2NlbmUpIHtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbi5yZXBsYWNlQWxsU2NlbmVzKHNjZW5lKTtcbiAgICAgICAgdGhpcy5wcmVwYXJlU2NlbmUoc2NlbmUpO1xuICAgIH1cblxuICAgIHByZXBhcmVTY2VuZShzY2VuZSkge1xuICAgICAgICAvLyByZW1vdmUgY2FtZXJhIGZyb20gc2NlbmUgdG8gYWRkIG91ciBvd25cbiAgICAgICAgaWYgKHNjZW5lLmFjdGl2ZUNhbWVyYSkge1xuICAgICAgICAgICAgc2NlbmUuYWN0aXZlQ2FtZXJhLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHNjZW5lLmFjdGl2ZUNhbWVyYSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzY2VuZS5jcmVhdGVEZWZhdWx0Q2FtZXJhT3JMaWdodCh0cnVlKTtcbiAgICAgICAgc2NlbmUuYWN0aXZlQ2FtZXJhLmF0dGFjaENvbnRyb2wodGhpcy5jYW52YXMpO1xuXG4gICAgICAgIGlmIChzY2VuZS5saWdodHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uLmFkZExpZ2h0cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGF1c2UgYWxsIHRvIHN0YXJ0IC0gaWYgc3luY2hyb25vdXMsIHRoZSBzY2VuZSBkb2Vzbid0IHNlZW0gdG8gc2hvdyB1cFxuICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgc2NlbmUuQW5pbWF0YWJsZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICBzY2VuZS5BbmltYXRhYmxlc1tjXS5nb1RvRnJhbWUoMCk7XG4gICAgICAgICAgICAgICAgc2NlbmUuQW5pbWF0YWJsZXNbY10ucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTApO1xuXG4gICAgICAgIGxldCB3b3JsZEV4dGVuZHMgPSBzY2VuZS5nZXRXb3JsZEV4dGVuZHMoKTtcbiAgICAgICAgbGV0IHNjZW5lTWlkUG9pbnQ7XG4gICAgICAgIGlmICh0aGlzLl91c2VSaWdodEhhbmRlZENvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBzY2VuZU1pZFBvaW50ID0gbmV3IEJBQllMT04uVmVjdG9yMygod29ybGRFeHRlbmRzLm1heC54ICsgd29ybGRFeHRlbmRzLm1pbi54KS8yLCAod29ybGRFeHRlbmRzLm1heC55ICsgd29ybGRFeHRlbmRzLm1pbi55KS8yLCAod29ybGRFeHRlbmRzLm1heC56ICsgd29ybGRFeHRlbmRzLm1pbi56KS8yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzY2VuZU1pZFBvaW50ID0gbmV3IEJBQllMT04uVmVjdG9yMygod29ybGRFeHRlbmRzLm1heC54ICsgd29ybGRFeHRlbmRzLm1pbi54KS8yLCAod29ybGRFeHRlbmRzLm1heC55ICsgd29ybGRFeHRlbmRzLm1pbi55KS8yLCAod29ybGRFeHRlbmRzLm1heC56ICsgd29ybGRFeHRlbmRzLm1pbi56KS8yKTtcbiAgICAgICAgfVxuICAgICAgICBzY2VuZS5hY3RpdmVDYW1lcmEuc2V0VGFyZ2V0KCBzY2VuZU1pZFBvaW50ICk7XG4gICAgfVxuXG4gICAgc2V0IGR1cmF0aW9uKGR1cikge1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cjtcbiAgICB9XG5cbiAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcbiAgICB9XG5cbiAgICBzZXQgdGltZSh0KSB7XG4gICAgICAgIHQgPSB0ICUgdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSB0O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuc2NlbmUuQW5pbWF0YWJsZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuQW5pbWF0YWJsZXNbY10uZ29Ub0ZyYW1lKHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlVmlzaWJpbGl0eSh2aXNpYmxlLCBuYW1lKSB7XG4gICAgICAgIGxldCBtaWxsaXNlY29uZHMgPSB0aGlzLnNjZW5lLl9hbmltYXRpb25UaW1lO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuc2NlbmUuQW5pbWF0YWJsZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIC8vbGV0IGZyYW1lUmF0ZSA9IHRoaXMuc2NlbmUuQW5pbWF0YWJsZXNbY10uX2FuaW1hdGlvbnNbMF0uZnJhbWVQZXJTZWNvbmQ7XG4gICAgICAgICAgICBpZiAodGhpcy5zY2VuZS5BbmltYXRhYmxlc1tjXS50YXJnZXQubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuQW5pbWF0YWJsZXNbY10ucmVzdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLkFuaW1hdGFibGVzW2NdLmdvVG9GcmFtZSgxMClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLkFuaW1hdGFibGVzW2NdLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZW5kZXIoZGVsdGF0aW1lKSB7fVxufVxuIl19"}
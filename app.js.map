{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/macgyvr/src/baseapplication.js","node_modules/macgyvr/src/baseconfig.js","node_modules/macgyvr/src/basegroup.js","node_modules/macgyvr/src/utils/eventlistener.js","src/app.js","src/io/gltfexploder.js","src/io/gltffileloader.js","src/objects/gltfobject.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import BaseConfig from './baseconfig.js';\nimport BaseGroup from './basegroup.js';\n\nexport default class BaseApplication {\n    constructor(el, cfg) {\n        this.appConfig = BaseConfig.apply(cfg);\n        this.element = el;\n        this.engine = new BABYLON.Engine(this.element, this.appConfig.engine.antialias, this.appConfig.engine.options);\n        this.engine.enableOfflineSupport = false;\n        this.scene = new BABYLON.Scene(this.engine);\n        this.scene.useRightHandedSystem = this.appConfig.scene.useRightHandedSystem;\n\n        this.isApplication = true;\n        this.engine.runRenderLoop( () => this.tick() );\n\n        this.cameras = [];\n        this.lights = [];\n\n        if (this.appConfig.camera) {\n            this.addCamera(this.appConfig.camera.type, this.appConfig.camera.position);\n        }\n\n        if (this.appConfig.lights) {\n            this.addLights(this.appConfig.lights);\n        }\n\n        if (this.appConfig.inspector) {\n            document.addEventListener('keydown', e => this.onKeyDown(e) );\n        }\n        this.root = new BaseGroup();\n        this.root.parent = this;\n        this.root.initializeGroup(this.scene, 'application-root');\n        this.root.onParented(this.scene, this, this.element);\n        this.onCreate(this.scene);\n\n        window.addEventListener('resize', () => this.onResize());\n\n        this.initialized = true;\n    }\n\n    get canvas() { return this.element; }\n\n    get name() { return 'root'; }\n\n    /**\n     * convenience method to add a typical camera\n     */\n    addCamera(type, options) {\n        if (!type) {\n            type = 'freecamera';\n        }\n\n        if (!options.position) {\n            options.position = new BABYLON.Vector3(0, 0, 0);\n        }\n\n        let camera;\n        switch (type) {\n            case 'default':\n            case 'freecamera':\n                camera = new BABYLON.FreeCamera('camera', options.position, this.scene);\n                camera.setTarget(BABYLON.Vector3.Zero());\n                camera.attachControl(this.element, true);\n                break;\n\n            case 'arcrotate':\n                camera = new BABYLON.ArcRotateCamera(\"ArcRotateCamera\", 0, 0, 0, BABYLON.Vector3.Zero(), this.scene);\n                camera.attachControl(this.element, true);\n                camera.setPosition(options.position);\n                break;\n\n            default:\n                console.error('Camera not added, ', type, ' is not found');\n        }\n        this.cameras.push(camera);\n    }\n\n    /**\n     * convenience method to add a typical light\n     */\n    addLights() {\n        let light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), this.scene);\n        light.intensity = 0.7;\n\n    }\n\n    get config() {\n        return this.appConfig;\n    }\n\n    /**\n     * render engine tick\n     */\n    tick() {\n        if (this.initialized && this.cameras.length > 0) {\n            this.scene.render();\n            this.onRender(this.engine.getDeltaTime());\n        }\n    }\n\n    /**\n     * replace all scenes starting with application and spidering through children, restarting all render loops\n     * @param scene\n     * @param children\n     */\n    replaceAllScenes(scene, children) {\n        if (!children) {\n            this.engine.stopRenderLoop();\n            this.engine.runRenderLoop( () => this.tick() );\n\n            this.scene = scene;\n            this.root.scene = scene;\n            children = this.root.children;\n        }\n        for (let c = 0; c < children.length; c++) {\n            if (children[c].isGroup) {\n                children[c].scene = scene;\n            }\n\n            if (children[c].children && children[c].children.length > 0) {\n                this.replaceAllScenes(scene, children[c].children);\n            }\n        }\n    }\n\n    add(objects) { return this.root.add(objects); }\n    remove(objects) { return this.root.remove(objects); }\n    removeAll(objects) { this.root.removeAll(objects); }\n    find(name) { return this.root.find(name); }\n\n    onKeyDown(e) {\n        if (this.config.inspector) {\n            if (e.keyCode === this.config.inspector || String.fromCharCode(e.keyCode).toLowerCase() === this.config.inspector ) {\n                if (this.scene.debugLayer.isVisible()) {\n                    this.scene.debugLayer.hide();\n                } else {\n                    this.scene.debugLayer.show();\n                }\n            }\n        }\n    }\n\n    onResize() {\n        this.engine.resize();\n    }\n\n    onCreate(sceneEl) {}\n    onRender(time) {}\n}\n","export default {\n    default: {\n        scene: {\n           useRightHandedSystem: false,\n        },\n        engine: {\n            antialias: true,\n            options: {}\n        },\n        camera: {\n            type: 'freecamera',\n            position: {\n                x: 0,\n                y: 0,\n                z: 0\n            }\n        },\n        inspector: 'i'\n    },\n\n    apply(cfg, node) {\n        if (!node) {\n            node = this.default;\n        }\n        for (let c in node) {\n            if (!cfg[c]) {\n                cfg[c] = node[c];\n            } else {\n                if (typeof cfg[c] === 'object') {\n                    cfg[c] = this.apply(cfg[c], node[c]);\n                }\n            }\n        }\n\n        return cfg;\n    }\n}\n","import EventListener from './utils/eventlistener.js';\nexport default class BaseGroup extends EventListener {\n    constructor(params) {\n        super();\n        this._config = params;\n        this._children = [];\n        this.isGroup = true;\n    }\n\n    init() {\n        this.onCreate(this.config);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * get app config\n     * @returns {*}\n     */\n    get appConfig() {\n        return this.application.appConfig;\n    }\n\n    /**\n     * get config\n     * @returns {*}\n     */\n    get config() {\n        return this._config;\n    }\n\n    initializeGroup(scene, name) {\n        if (!name) {\n            name = this.constructor.name + '-group';\n        }\n        this._group = new BABYLON.Mesh(name, scene);\n    }\n\n    onParented(scene, parent, canvas) {\n        this.scene = scene;\n        this._canvas = canvas;\n        this.onCreate(scene);\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     */\n    onRender(scene, time) {};\n    onCreate(params) {};\n\n    /**\n     * add object to parent\n     * @param object\n     */\n    add(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n        for (let c = 0; c < objects.length; c++) {\n            if (objects[c].isGroup) {\n                if (!objects[c].group) {\n                    objects[c].initializeGroup(this.scene);\n                }\n                objects[c].parent = this;\n                objects[c].group.parent = this._group;\n            } else {\n                objects[c].parent = this._group;\n            }\n            this._children.push(objects[c]);\n            if (objects[c].onParented) {\n                objects[c].onParented(this._scene, this._group, this._canvas);\n            }\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    remove(objects) {\n        let asArray = true;\n        if (objects.length === undefined) {\n            objects = [objects];\n            asArray = false;\n        }\n\n        this._children = this.children.filter(val => !objects.includes(val));\n        for (let c = 0; c < objects.length; c++) {\n            this.scene.removeMesh(objects[c]);\n        }\n\n        if (asArray) {\n            return objects;\n        } else {\n            return objects[0];\n        }\n    }\n\n    removeAll() {\n        for (let c = 0; c < this._children.length; c++) {\n            this._children[c].dispose();\n        }\n        this._children = [];\n    }\n\n    find(name) {\n        for (let c = 0; c < this._children.length; c++) {\n            if (this._children[c].name === name) {\n                return this._children[c];\n            }\n        }\n        return null;\n    }\n\n    get application() {\n        let parent = this.parent;\n        while (parent) {\n            if (parent.isApplication) {\n                return parent;\n            }\n            parent = parent.parent;\n        }\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    /**\n     * get engine\n     */\n    get engine() {\n        return this._scene._engine;\n    }\n\n    /**\n     * get babylon scene\n     */\n    get scene() {\n        return this._scene;\n    }\n\n    /**\n     * set scene and rewire render loop for scene\n     * @param val\n     */\n    set scene(val) {\n        if (this.scene) {\n            //console.log(this.engine, this.name);\n        }\n        if (this._scene && this._scene._engine) {\n            this._scene._engine.stopRenderLoop();\n        }\n        this._scene = val;\n        this._scene._engine.runRenderLoop( () => this.tick() );\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._children;\n    }\n\n    /**\n     * render loop\n     */\n    tick() {\n        //console.log('tick', this.name)\n        this.onRender(this.scene._engine.getDeltaTime());\n    }\n}\n","export default class EventListener {\n    constructor() {\n        /**\n         * event listeners\n         * @type {Array}\n         * @private\n         */\n        this._listeners = [];\n    }\n\n    /**\n     * add event listener\n     * @param type\n     * @param cb\n     * @returns {{type: *, callback: *}}\n     */\n    addListener(type, cb) {\n        let listener = { type: type, callback: cb };\n        this._listeners.push(listener);\n        return listener;\n    }\n\n    /**\n     * remove event listener\n     * @param listener\n     */\n    removeListener(listener) {\n        for (let c = 0; c < this._listeners.length; c++) {\n            if (listener === this._listeners[c]) {\n                this._listeners.splice(c, 0);\n                return;\n            }\n        }\n    }\n\n    /**\n     * trigger event\n     * @param type\n     * @param params\n     */\n    triggerEvent(type, params) {\n        this._listeners.forEach( function(l) {\n            if (type == l.type) {\n                l.callback.apply(this, [type, params]);\n            }\n        });\n    }\n}\n","import GLTFFileLoader from './io/gltffileloader.js';\nimport GLTFExploder from './io/gltfexploder.js';\nimport BaseApplication from '../node_modules/macgyvr/src/baseapplication.js';\nimport GLTFObject from './objects/gltfobject.js';\n\nexport default class Application extends BaseApplication {\n\n    set time(t) {\n        this._currentTime = t;\n\n        if (this.gltf) {\n            this.gltf.time = t;\n        }\n\n        if (this.config.components.timeline) {\n            this.config.components.timeline.currentTime = t;\n        }\n\n        if (this.config.components.controls) {\n            this.config.components.controls.time = t;\n        }\n    }\n\n    get time() {\n        return this._currentTime;\n    }\n\n    onCreate(scene) {\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_SELECTED, e => this.onTrackSelection(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.SCRUB_TIMELINE, e => this.onScrubTimeline(e));\n        this.config.components.timeline.addEventListener(AnimationTimeline.TRACK_VISIBILITY_CHANGED, e => this.onTrackVisibilityChanged(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.CONTROL_CLICKED, e => this.onPlaybackControlClicked(e));\n        this.config.components.controls.addEventListener(AnimationPlaybackControls.LOAD_GLTF, e => this.loadFile(e));\n        this.config.components.samples.addEventListener(AnimationSampleGLTFs.SELECT_REMOTE_FILE, e => this.loadFile(e));\n        this.config.components.info.addEventListener(AnimationSceneInfo.SWITCH_COORDINATE_SYSTEM, e => this.switchCoordinateSystem(e));\n        this.time = 0;\n        this.playing = false;\n        this.gltf = this.add( new GLTFObject() );\n    }\n\n    loadFile(event) {\n        this.config.components.samples.style.display = 'none';\n\n        let loader = new GLTFFileLoader();\n        loader.addListener(GLTFFileLoader.LOADED, (eventtype, event) => this.onGLTFData(event));\n        if (typeof event === 'string') {\n            let uri = event;\n            this.config.components.info.setAttribute('filename', uri);\n            loader.loadRemote(uri);\n            this.gltf.load(uri);\n        } else if (event.detail.uri) {\n            this.config.components.info.setAttribute('filename', event.detail.uri);\n            loader.loadRemote(event.detail.uri);\n            this.gltf.load(event.detail.uri);\n        } else {\n            this.config.components.info.setAttribute('filename', event.detail.files[0].name);\n            loader.loadLocal(event.detail.files);\n            this.gltf.load(event.detail.inputevent);\n        }\n\n        this.gltf.time = this.time;\n    }\n\n    onGLTFData(event) {\n        let timeline = GLTFExploder.generateTimeline(event.gltf.animations);\n        this.config.components.timeline.data = timeline;\n        this.gltf.duration = timeline.duration;\n        this.config.components.controls.duration = timeline.duration;\n        this.config.components.nodes.data = event.gltf.nodes;\n    }\n\n    switchCoordinateSystem(event) {\n        this.gltf.useRightHandedSystem = event.detail.rightHanded;\n    }\n\n    onScrubTimeline(event) {\n        if (!event.detail.resumeplayback) {\n            this.playing = false;\n        }\n\n        this.time = event.detail.playbacktime;\n    }\n\n    onTrackSelection(event) {\n        this.config.components.nodes.selectNodeByName(event.detail.name);\n    }\n\n    onTrackVisibilityChanged(event) {\n        this.gltf.toggleVisibility(event.detail.visible, event.detail.name, event.detail.playbacktime);\n    }\n\n    onPlaybackControlClicked(event) {\n        this.playing = event.detail.isPlaying;\n\n        switch (event.detail.action) {\n            case AnimationPlaybackControls.STEP_FORWARD:\n                this.time += .01;\n                break;\n\n            case AnimationPlaybackControls.STEP_BACKWARD:\n                this.time -= .01;\n                break;\n\n            case AnimationPlaybackControls.FAST_FORWARD:\n                this.time += .1;\n                break;\n\n            case AnimationPlaybackControls.FAST_BACKWARD:\n                this.time -= .1;\n                break;\n        }\n    }\n\n    onRender(deltatime) {\n        if (this.playing) {\n            this.time += deltatime / 1000;\n        }\n    }\n\n}\n","// lots of approach in binary processing here stolen from Babylon\n// https://github.com/BabylonJS/Babylon.js/tree/master/loaders/src/glTF/2.0\n\n// Only supports mashing the animation buffer pieces into the GLTF object for now\nexport default {\n    explode(gltf) {\n        for (let f = 0; f < gltf.nodes.length; f++) {\n            if (!gltf.nodes[f].name) {\n                gltf.nodes[f].name = 'Node ' + Number(f+1) + ' (unnamed)';\n            }\n        }\n        for (let c = 0; c < gltf.animations.length; c++) {\n            // wire sampler references within channels for easy access\n            for (let d = 0; d < gltf.animations[c].channels.length; d++) {\n                gltf.animations[c].channels[d]._samplerRef = gltf.animations[c].samplers[gltf.animations[c].channels[d].sampler];\n                gltf.animations[c].channels[d]._samplerRef._channelRef = gltf.animations[c].channels[d];\n                gltf.animations[c].channels[d].target._nodeRef = gltf.nodes[gltf.animations[c].channels[d].target.node];\n            }\n\n            // get accessor references for samplers and resolve data from buffer\n            for (let e = 0; e < gltf.animations[c].samplers.length; e++) {\n               gltf.animations[c].samplers[e]._inputRef = gltf.accessors[gltf.animations[c].samplers[e].input];\n\n               // for animation, input refers to keyframe times\n               gltf.animations[c].samplers[e]._inputValues = this._resolveAnimationSamplerData('keyframes', gltf, gltf.animations[c].samplers[e]._inputRef);\n\n\n               // output refers to scale, rotate, or translate\n               gltf.animations[c].samplers[e]._outputRef = gltf.accessors[gltf.animations[c].samplers[e].output];\n               gltf.animations[c].samplers[e]._outputRef._bufferViewRef = gltf.bufferViews[gltf.animations[c].samplers[e]._outputRef.bufferView];\n\n               let transformType = gltf.animations[c].samplers[e]._channelRef.target.path;\n               gltf.animations[c].samplers[e]._outputValues = this._resolveAnimationSamplerData(transformType, gltf, gltf.animations[c].samplers[e]._outputRef);\n            }\n        }\n        return gltf;\n    },\n\n    _resolveAnimationSamplerData(type, gltf, samplerData) {\n        let bufferView = gltf.bufferViews[samplerData.bufferView];\n        let buffer = gltf.buffers[bufferView.buffer].data;\n\n        // map bufferView to actual mem ref\n        samplerData._bufferViewRef = bufferView;\n\n        let byteOffset = bufferView.byteOffset;\n        if (samplerData.byteOffset) {\n            byteOffset += samplerData.byteOffset;\n        }\n        let byteLength = samplerData.count * this._getByteStrideFromType(samplerData);\n        let values = this._parseBufferData(buffer, byteOffset, byteLength, samplerData.componentType);\n\n        if (type === 'keyframes') {\n            return values;\n        } else {\n            let counter = 0;\n            let transforms = [];\n            let vec;\n\n            for (let c = 0; c < values.length; c++) {\n                switch (counter) {\n                    case 0:\n                        transforms.push({});\n                        vec = transforms[transforms.length-1];\n                        vec.x = values[c];\n                        counter ++;\n                        break;\n\n                    case 1:\n                        vec.y = values[c];\n                        counter ++;\n                        break;\n\n                    case 2:\n                        vec.z = values[c];\n\n                        counter ++;\n                        if (type !== 'rotation') {\n                            counter = 0;\n                        }\n                        break;\n\n                    case 3:\n                        vec.w = values[c];\n                        counter = 0;\n                        break;\n                }\n            }\n            return transforms;\n        }\n    },\n\n    _getByteStrideFromType(accessor) {\n        switch (accessor.type) {\n            case \"SCALAR\":\n                return 1;\n            case \"VEC2\":\n                return 2;\n            case \"VEC3\":\n                return 3;\n            case \"VEC4\":\n                return 4;\n            case \"MAT2\":\n                return 4;\n            case \"MAT3\":\n                return 9;\n            case \"MAT4\":\n                return 16;\n            default:\n                console.warn(\"Invalid accessor type (\" + accessor.type + \")\");\n                return 0;\n        }\n    },\n\n    _parseBufferData(buffer, byteOffset, byteLength, componentType) {\n        let bufferViewData;\n        switch (componentType) {\n            case this.EComponentType.BYTE:\n                bufferViewData = new Int8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_BYTE:\n                bufferViewData = new Uint8Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.SHORT:\n                bufferViewData = new Int16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_SHORT:\n                bufferViewData = new Uint16Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.UNSIGNED_INT:\n                bufferViewData = new Uint32Array(buffer, byteOffset, byteLength);\n                break;\n            case this.EComponentType.FLOAT:\n                bufferViewData = new Float32Array(buffer, byteOffset, byteLength);\n                break;\n            default:\n                console.warn(\"Invalid component type (\" + componentType + \")\");\n                return;\n        }\n        return bufferViewData;\n    },\n\n    generateTimeline(gltfAnims) {\n        let start;\n        let end;\n        let timeline = { animations: [] };\n        for (let c = 0; c < gltfAnims.length; c++) {\n            let tracks = this._generateTracksForAnimation(gltfAnims[c]);\n            if (!start || start > tracks.start) {\n                start = tracks.start;\n            }\n            if (!end || end < tracks.end) {\n                end = tracks.end;\n            }\n            timeline.animations.push({ animation: tracks });\n        }\n\n        timeline.start = start;\n        timeline.end = end;\n        timeline.duration = end - start;\n        return timeline;\n    },\n\n    _generateTracksForAnimation(animation) {\n        let tracks = {};\n        let startTime = -1;\n        let endTime = -1;\n        for (let c = 0; c < animation.channels.length; c++) {\n            if (!tracks[animation.channels[c].target._nodeRef.name]) {\n                tracks[animation.channels[c].target._nodeRef.name] = [];\n            }\n\n            let currentChannel = tracks[animation.channels[c].target._nodeRef.name];\n\n            for (let d = 0; d < animation.channels[c]._samplerRef._inputValues.length; d++) {\n                let time = animation.channels[c]._samplerRef._inputValues[d];\n                if (startTime === -1 || time < startTime) {\n                    startTime = time;\n                }\n                if (endTime === -1 || time > endTime) {\n                    endTime = time;\n                }\n\n                let keyframe;\n                for (let e = 0; e < currentChannel.length; e++) {\n                    if (currentChannel[e].time === time) {\n                        keyframe = currentChannel[e];\n                    }\n                }\n                if (!keyframe) {\n                    keyframe = { time: time, transform: {}, name: animation.channels[c].target._nodeRef.name };\n                    currentChannel.push(keyframe);\n                }\n\n                let transformType = animation.channels[c].target.path;\n                keyframe.transform[transformType] = animation.channels[c]._samplerRef._outputValues[d];\n            }\n        }\n\n        return { start: startTime, end: endTime, duration: endTime-startTime, tracks: tracks };\n    },\n\n    EComponentType: {\n        BYTE: 5120,\n        UNSIGNED_BYTE: 5121,\n        SHORT: 5122,\n        UNSIGNED_SHORT: 5123,\n        UNSIGNED_INT: 5125,\n        FLOAT: 5126\n    }\n}\n","import GLTFExploder from './gltfexploder.js';\nimport EventListener from '../../node_modules/macgyvr/src/utils/eventlistener.js';\n\nexport default class GLTFFileLoader extends EventListener {\n    constructor() {\n        super();\n        this.bufferDictionary = {};\n        this.bufferCount = 0;\n    }\n\n    loadLocal(filerefs) {\n        for (let c = 0; c < filerefs.length; c++) {\n            let filename = filerefs[c].name;\n            if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'bin') {\n                let reader = new FileReader();\n                this.bufferCount ++;\n                reader.onload = e => {\n                    this.onBinLoaded(filename, e);\n                };\n                reader.readAsArrayBuffer(filerefs[c]);\n            } else if (filename.split('.')[filename.split('.').length-1].toLowerCase() === 'gltf') {\n                let reader = new FileReader();\n                reader.onload = e => {\n                    this.onGLTFLoaded(filename, e)\n                };\n                reader.readAsText(filerefs[c]);\n            }\n        }\n    }\n\n    loadRemote(path) {\n        this._filename = path.split('/')[path.split('/').length-1];\n        this._basepath = path.substr(0, path.indexOf(this._filename));\n        let loader = new XMLHttpRequest();\n        loader.open('GET', path, true);\n        loader.onload = data => {\n            this.gltf = JSON.parse(loader.response);\n            this.buffers = this.gltf.buffers;\n            for (let c = 0; c < this.buffers.length; c++) {\n                this.bufferCount ++;\n                let loader = new XMLHttpRequest();\n                loader.responseType = 'arraybuffer';\n                loader.open('GET', this._basepath + this.buffers[c].uri, true);\n                loader.onload = e => {\n                    this.onBinLoaded(this.buffers[c].uri, e);\n                };\n                loader.send();\n            }\n        };\n        loader.send();\n    }\n\n    onGLTFLoaded(filename, e) {\n        this.gltf = JSON.parse(e.target.result);\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onBinLoaded(filename, e) {\n        if (e.target.result) {\n            this.bufferDictionary[filename] = e.target.result;\n        } else if (e.target.response) {\n            this.bufferDictionary[filename] = e.target.response;\n        } else {\n            throw new Error(filename + ' cannot be loaded', e.target);\n        }\n        let loaded = this.checkLoadedFiles();\n        if (loaded) {\n            this.onLoadComplete();\n        }\n    }\n\n    onLoadComplete() {\n        for (let c = 0; c < this.gltf.buffers.length; c++) {\n            this.gltf.buffers[c].data = this.bufferDictionary[this.gltf.buffers[c].uri];\n        }\n\n        this.gltf = GLTFExploder.explode(this.gltf);\n        this.triggerEvent(GLTFFileLoader.LOADED, { gltf: this.gltf });\n    }\n\n    checkLoadedFiles() {\n        if (this.gltf && this.bufferCount === Object.keys(this.bufferDictionary).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nGLTFFileLoader.LOADED = 'onGLTFLoaded';\n","import BaseGroup from '../../node_modules/macgyvr/src/basegroup.js';\n\nexport default class GLTFObject extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param sceneinfo\n     */\n    onCreate(scene, sceneinfo) {\n        this._duration = 0;\n        this._currentTime = 0;\n        BABYLON.SceneLoader.ShowLoadingScreen = false;\n        this._useRightHandedCoordinates = false;\n        this.filesInput = new BABYLON.FilesInput(this.engine, this.scene, this.canvas, (scenefile, scene) => this.onSceneLoaded(scenefile, scene));\n    }\n\n    set useRightHandedSystem(val) {\n        this._useRightHandedCoordinates = val;\n        this.scene.useRightHandedSystem = val;\n    }\n\n    load(value) {\n        if (typeof value === 'string') {\n            let uri = value;\n            let filename = uri.split('/')[uri.split('/').length-1];\n            let basepath = uri.substr(0, uri.indexOf(filename));\n            let loader = new BABYLON.AssetsManager(this.scene);\n            loader.useDefaultLoadingScreen = false;\n            let task = loader.addMeshTask('task', '', basepath, filename);\n            task.onSuccess = asset => this.onMeshesLoaded(asset);\n            loader.load();\n        } else {\n            let event = value;\n            this.filesInput.loadFiles(event);\n        }\n    }\n\n    onMeshesLoaded(asset) {\n        this.add(asset.loadedMeshes);\n        if (this._useRightHandedCoordinates) {\n            this.group.rotation.x = Math.PI/2;\n        } else {\n            this.group.rotation.x = -Math.PI/2;\n        }\n        this.prepareScene(this.scene);\n    }\n\n    onSceneLoaded(scenefile, scene) {\n        this.application.replaceAllScenes(scene);\n        this.prepareScene(scene);\n    }\n\n    prepareScene(scene) {\n        // remove camera from scene to add our own\n        if (scene.activeCamera) {\n            scene.activeCamera.dispose();\n            scene.activeCamera = null;\n        }\n\n        scene.createDefaultCameraOrLight(true);\n        scene.activeCamera.attachControl(this.canvas);\n\n        if (scene.lights.length === 0) {\n            this.application.addLights();\n        }\n\n        // pause all to start - if synchronous, the scene doesn't seem to show up\n        setTimeout( function() {\n            for (let c = 0; c < scene.Animatables.length; c++) {\n                scene.Animatables[c].goToFrame(0);\n                scene.Animatables[c].pause();\n            }\n        }, 50);\n\n        let worldExtends = scene.getWorldExtends();\n        let sceneMidPoint;\n        if (this._useRightHandedCoordinates) {\n            sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, worldExtends.max.y, (worldExtends.max.z + worldExtends.min.z)/2);\n        } else {\n            sceneMidPoint = new BABYLON.Vector3((worldExtends.max.x + worldExtends.min.x)/2, (worldExtends.max.y + worldExtends.min.y)/2, (worldExtends.max.z + worldExtends.min.z)/2);\n        }\n        scene.activeCamera.setTarget( sceneMidPoint );\n    }\n\n    set duration(dur) {\n        this._duration = dur;\n    }\n\n    get duration() {\n        return this._duration;\n    }\n\n    set time(t) {\n        t = t % this.duration;\n        this._currentTime = t;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            this.scene.Animatables[c].goToFrame(t);\n        }\n    }\n\n    toggleVisibility(visible, name) {\n        let milliseconds = this.scene._animationTime;\n        for (let c = 0; c < this.scene.Animatables.length; c++) {\n            //let frameRate = this.scene.Animatables[c]._animations[0].framePerSecond;\n            if (this.scene.Animatables[c].target.name === name) {\n                if (visible) {\n                    this.scene.Animatables[c].restart();\n                    this.scene.Animatables[c].goToFrame(10)\n                } else {\n                    this.scene.Animatables[c].pause();\n                }\n            }\n        }\n    }\n\n    onRender(deltatime) {}\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}